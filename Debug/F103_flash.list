
F103_flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000350c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003618  08003618  00013618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003640  08003640  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003640  08003640  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003640  08003640  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003640  08003640  00013640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003644  08003644  00013644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  2000000c  08003654  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08003654  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a94  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aac  00000000  00000000  00029ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0002b578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  0002bed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ddb  00000000  00000000  0002c7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d5f  00000000  00000000  0004357b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008379d  00000000  00000000  0004d2da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0a77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002594  00000000  00000000  000d0acc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003600 	.word	0x08003600

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003600 	.word	0x08003600

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fd55 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f883 	bl	8000260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f94f 	bl	80003fc <MX_GPIO_Init>
  MX_DMA_Init();
 800015e:	f000 f927 	bl	80003b0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f8fb 	bl	800035c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000166:	f000 f8c3 	bl	80002f0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 800016a:	4b37      	ldr	r3, [pc, #220]	; (8000248 <main+0xfc>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	68da      	ldr	r2, [r3, #12]
 8000170:	4b35      	ldr	r3, [pc, #212]	; (8000248 <main+0xfc>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	f042 0210 	orr.w	r2, r2, #16
 8000178:	60da      	str	r2, [r3, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RX = 0;
 800017a:	4b34      	ldr	r3, [pc, #208]	; (800024c <main+0x100>)
 800017c:	2200      	movs	r2, #0
 800017e:	701a      	strb	r2, [r3, #0]
	  memset(receive_buffer, 0, 60);
 8000180:	223c      	movs	r2, #60	; 0x3c
 8000182:	2100      	movs	r1, #0
 8000184:	4832      	ldr	r0, [pc, #200]	; (8000250 <main+0x104>)
 8000186:	f003 fa33 	bl	80035f0 <memset>
	  HAL_UART_Receive_DMA(&huart1, receive_buffer, 20);
 800018a:	2214      	movs	r2, #20
 800018c:	4930      	ldr	r1, [pc, #192]	; (8000250 <main+0x104>)
 800018e:	482e      	ldr	r0, [pc, #184]	; (8000248 <main+0xfc>)
 8000190:	f002 fc53 	bl	8002a3a <HAL_UART_Receive_DMA>
	  while(!RX) {}
 8000194:	bf00      	nop
 8000196:	4b2d      	ldr	r3, [pc, #180]	; (800024c <main+0x100>)
 8000198:	781b      	ldrb	r3, [r3, #0]
 800019a:	2b00      	cmp	r3, #0
 800019c:	d0fb      	beq.n	8000196 <main+0x4a>
	  HAL_UART_DMAStop(&huart1);
 800019e:	482a      	ldr	r0, [pc, #168]	; (8000248 <main+0xfc>)
 80001a0:	f002 fc7b 	bl	8002a9a <HAL_UART_DMAStop>
	  //HAL_UART_Transmit(&huart1,receive_buffer,20,5000);

	  switch(receive_buffer[0])
 80001a4:	4b2a      	ldr	r3, [pc, #168]	; (8000250 <main+0x104>)
 80001a6:	781b      	ldrb	r3, [r3, #0]
 80001a8:	2b1a      	cmp	r3, #26
 80001aa:	d001      	beq.n	80001b0 <main+0x64>
 80001ac:	2b1b      	cmp	r3, #27

	  	  break;

	  	  case 0x1B :

	  	  break;
 80001ae:	e04a      	b.n	8000246 <main+0xfa>
	  		START_SECTOR_OF_FIRMWARE = receive_buffer[1];
 80001b0:	4b27      	ldr	r3, [pc, #156]	; (8000250 <main+0x104>)
 80001b2:	785a      	ldrb	r2, [r3, #1]
 80001b4:	4b27      	ldr	r3, [pc, #156]	; (8000254 <main+0x108>)
 80001b6:	701a      	strb	r2, [r3, #0]
	  		W25qxx_Init(); // initial flash
 80001b8:	f000 fb80 	bl	80008bc <W25qxx_Init>
	  		uint32_t adr_firmw_size = 16 * START_SECTOR_OF_FIRMWARE;
 80001bc:	4b25      	ldr	r3, [pc, #148]	; (8000254 <main+0x108>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	607b      	str	r3, [r7, #4]
	  		memset(receive_buffer, 0, 4);
 80001c4:	2204      	movs	r2, #4
 80001c6:	2100      	movs	r1, #0
 80001c8:	4821      	ldr	r0, [pc, #132]	; (8000250 <main+0x104>)
 80001ca:	f003 fa11 	bl	80035f0 <memset>
	  		W25qxx_ReadPage(receive_buffer, adr_firmw_size, 0, 3);
 80001ce:	2303      	movs	r3, #3
 80001d0:	2200      	movs	r2, #0
 80001d2:	6879      	ldr	r1, [r7, #4]
 80001d4:	481e      	ldr	r0, [pc, #120]	; (8000250 <main+0x104>)
 80001d6:	f000 fc73 	bl	8000ac0 <W25qxx_ReadPage>
	  		firmware_size = (uint32_t)receive_buffer[0];
 80001da:	4b1d      	ldr	r3, [pc, #116]	; (8000250 <main+0x104>)
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	461a      	mov	r2, r3
 80001e0:	4b1d      	ldr	r3, [pc, #116]	; (8000258 <main+0x10c>)
 80001e2:	601a      	str	r2, [r3, #0]
	  		firmware_size <<= 8;
 80001e4:	4b1c      	ldr	r3, [pc, #112]	; (8000258 <main+0x10c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	021b      	lsls	r3, r3, #8
 80001ea:	4a1b      	ldr	r2, [pc, #108]	; (8000258 <main+0x10c>)
 80001ec:	6013      	str	r3, [r2, #0]
	  		firmware_size += (uint32_t)receive_buffer[1];
 80001ee:	4b18      	ldr	r3, [pc, #96]	; (8000250 <main+0x104>)
 80001f0:	785b      	ldrb	r3, [r3, #1]
 80001f2:	461a      	mov	r2, r3
 80001f4:	4b18      	ldr	r3, [pc, #96]	; (8000258 <main+0x10c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4413      	add	r3, r2
 80001fa:	4a17      	ldr	r2, [pc, #92]	; (8000258 <main+0x10c>)
 80001fc:	6013      	str	r3, [r2, #0]
	  		firmware_size <<= 8;
 80001fe:	4b16      	ldr	r3, [pc, #88]	; (8000258 <main+0x10c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	021b      	lsls	r3, r3, #8
 8000204:	4a14      	ldr	r2, [pc, #80]	; (8000258 <main+0x10c>)
 8000206:	6013      	str	r3, [r2, #0]
	  		firmware_size += (uint32_t)receive_buffer[2];
 8000208:	4b11      	ldr	r3, [pc, #68]	; (8000250 <main+0x104>)
 800020a:	789b      	ldrb	r3, [r3, #2]
 800020c:	461a      	mov	r2, r3
 800020e:	4b12      	ldr	r3, [pc, #72]	; (8000258 <main+0x10c>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4413      	add	r3, r2
 8000214:	4a10      	ldr	r2, [pc, #64]	; (8000258 <main+0x10c>)
 8000216:	6013      	str	r3, [r2, #0]
	  		transmit_buffer[0] = 0x1C;
 8000218:	4b10      	ldr	r3, [pc, #64]	; (800025c <main+0x110>)
 800021a:	221c      	movs	r2, #28
 800021c:	701a      	strb	r2, [r3, #0]
	  		transmit_buffer[1] = receive_buffer[0];
 800021e:	4b0c      	ldr	r3, [pc, #48]	; (8000250 <main+0x104>)
 8000220:	781a      	ldrb	r2, [r3, #0]
 8000222:	4b0e      	ldr	r3, [pc, #56]	; (800025c <main+0x110>)
 8000224:	705a      	strb	r2, [r3, #1]
	  		transmit_buffer[2] = receive_buffer[1];
 8000226:	4b0a      	ldr	r3, [pc, #40]	; (8000250 <main+0x104>)
 8000228:	785a      	ldrb	r2, [r3, #1]
 800022a:	4b0c      	ldr	r3, [pc, #48]	; (800025c <main+0x110>)
 800022c:	709a      	strb	r2, [r3, #2]
	  		transmit_buffer[3] = receive_buffer[2];
 800022e:	4b08      	ldr	r3, [pc, #32]	; (8000250 <main+0x104>)
 8000230:	789a      	ldrb	r2, [r3, #2]
 8000232:	4b0a      	ldr	r3, [pc, #40]	; (800025c <main+0x110>)
 8000234:	70da      	strb	r2, [r3, #3]
	  		HAL_UART_Transmit(&huart1,transmit_buffer,4,5000);
 8000236:	f241 3388 	movw	r3, #5000	; 0x1388
 800023a:	2204      	movs	r2, #4
 800023c:	4907      	ldr	r1, [pc, #28]	; (800025c <main+0x110>)
 800023e:	4802      	ldr	r0, [pc, #8]	; (8000248 <main+0xfc>)
 8000240:	f002 fb69 	bl	8002916 <HAL_UART_Transmit>
	  	  break;
 8000244:	bf00      	nop
	  RX = 0;
 8000246:	e798      	b.n	800017a <main+0x2e>
 8000248:	20000134 	.word	0x20000134
 800024c:	20000028 	.word	0x20000028
 8000250:	2000002c 	.word	0x2000002c
 8000254:	200000a4 	.word	0x200000a4
 8000258:	200000a8 	.word	0x200000a8
 800025c:	20000068 	.word	0x20000068

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b090      	sub	sp, #64	; 0x40
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	f107 0318 	add.w	r3, r7, #24
 800026a:	2228      	movs	r2, #40	; 0x28
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f003 f9be 	bl	80035f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
 800027a:	605a      	str	r2, [r3, #4]
 800027c:	609a      	str	r2, [r3, #8]
 800027e:	60da      	str	r2, [r3, #12]
 8000280:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000282:	2301      	movs	r3, #1
 8000284:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800028a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800028c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000290:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000292:	2301      	movs	r3, #1
 8000294:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000296:	2302      	movs	r3, #2
 8000298:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800029a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800029e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002a0:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80002a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a6:	f107 0318 	add.w	r3, r7, #24
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 fa76 	bl	800179c <HAL_RCC_OscConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80002b6:	f000 f939 	bl	800052c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ba:	230f      	movs	r3, #15
 80002bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002be:	2302      	movs	r3, #2
 80002c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2101      	movs	r1, #1
 80002d4:	4618      	mov	r0, r3
 80002d6:	f001 fce1 	bl	8001c9c <HAL_RCC_ClockConfig>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002e0:	f000 f924 	bl	800052c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80002e4:	f001 fdc4 	bl	8001e70 <HAL_RCC_EnableCSS>
}
 80002e8:	bf00      	nop
 80002ea:	3740      	adds	r7, #64	; 0x40
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002f4:	4b17      	ldr	r3, [pc, #92]	; (8000354 <MX_SPI1_Init+0x64>)
 80002f6:	4a18      	ldr	r2, [pc, #96]	; (8000358 <MX_SPI1_Init+0x68>)
 80002f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002fa:	4b16      	ldr	r3, [pc, #88]	; (8000354 <MX_SPI1_Init+0x64>)
 80002fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000300:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000302:	4b14      	ldr	r3, [pc, #80]	; (8000354 <MX_SPI1_Init+0x64>)
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000308:	4b12      	ldr	r3, [pc, #72]	; (8000354 <MX_SPI1_Init+0x64>)
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800030e:	4b11      	ldr	r3, [pc, #68]	; (8000354 <MX_SPI1_Init+0x64>)
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000314:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <MX_SPI1_Init+0x64>)
 8000316:	2200      	movs	r2, #0
 8000318:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800031a:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <MX_SPI1_Init+0x64>)
 800031c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000320:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000322:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <MX_SPI1_Init+0x64>)
 8000324:	2208      	movs	r2, #8
 8000326:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000328:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <MX_SPI1_Init+0x64>)
 800032a:	2200      	movs	r2, #0
 800032c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800032e:	4b09      	ldr	r3, [pc, #36]	; (8000354 <MX_SPI1_Init+0x64>)
 8000330:	2200      	movs	r2, #0
 8000332:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000334:	4b07      	ldr	r3, [pc, #28]	; (8000354 <MX_SPI1_Init+0x64>)
 8000336:	2200      	movs	r2, #0
 8000338:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800033a:	4b06      	ldr	r3, [pc, #24]	; (8000354 <MX_SPI1_Init+0x64>)
 800033c:	220a      	movs	r2, #10
 800033e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000340:	4804      	ldr	r0, [pc, #16]	; (8000354 <MX_SPI1_Init+0x64>)
 8000342:	f001 fe6b 	bl	800201c <HAL_SPI_Init>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800034c:	f000 f8ee 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}
 8000354:	20000178 	.word	0x20000178
 8000358:	40013000 	.word	0x40013000

0800035c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000360:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000362:	4a12      	ldr	r2, [pc, #72]	; (80003ac <MX_USART1_UART_Init+0x50>)
 8000364:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000366:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000368:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800036c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 800037c:	2200      	movs	r2, #0
 800037e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000382:	220c      	movs	r2, #12
 8000384:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000386:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000388:	2200      	movs	r2, #0
 800038a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 800038e:	2200      	movs	r2, #0
 8000390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000392:	4805      	ldr	r0, [pc, #20]	; (80003a8 <MX_USART1_UART_Init+0x4c>)
 8000394:	f002 fa72 	bl	800287c <HAL_UART_Init>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800039e:	f000 f8c5 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000134 	.word	0x20000134
 80003ac:	40013800 	.word	0x40013800

080003b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003b6:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <MX_DMA_Init+0x48>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a0f      	ldr	r2, [pc, #60]	; (80003f8 <MX_DMA_Init+0x48>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6153      	str	r3, [r2, #20]
 80003c2:	4b0d      	ldr	r3, [pc, #52]	; (80003f8 <MX_DMA_Init+0x48>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2100      	movs	r1, #0
 80003d2:	200e      	movs	r0, #14
 80003d4:	f000 fd71 	bl	8000eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80003d8:	200e      	movs	r0, #14
 80003da:	f000 fd8a 	bl	8000ef2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80003de:	2200      	movs	r2, #0
 80003e0:	2100      	movs	r1, #0
 80003e2:	200f      	movs	r0, #15
 80003e4:	f000 fd69 	bl	8000eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80003e8:	200f      	movs	r0, #15
 80003ea:	f000 fd82 	bl	8000ef2 <HAL_NVIC_EnableIRQ>

}
 80003ee:	bf00      	nop
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40021000 	.word	0x40021000

080003fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b088      	sub	sp, #32
 8000400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000402:	f107 0310 	add.w	r3, r7, #16
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000410:	4b2d      	ldr	r3, [pc, #180]	; (80004c8 <MX_GPIO_Init+0xcc>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a2c      	ldr	r2, [pc, #176]	; (80004c8 <MX_GPIO_Init+0xcc>)
 8000416:	f043 0310 	orr.w	r3, r3, #16
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b2a      	ldr	r3, [pc, #168]	; (80004c8 <MX_GPIO_Init+0xcc>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f003 0310 	and.w	r3, r3, #16
 8000424:	60fb      	str	r3, [r7, #12]
 8000426:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000428:	4b27      	ldr	r3, [pc, #156]	; (80004c8 <MX_GPIO_Init+0xcc>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a26      	ldr	r2, [pc, #152]	; (80004c8 <MX_GPIO_Init+0xcc>)
 800042e:	f043 0320 	orr.w	r3, r3, #32
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b24      	ldr	r3, [pc, #144]	; (80004c8 <MX_GPIO_Init+0xcc>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0320 	and.w	r3, r3, #32
 800043c:	60bb      	str	r3, [r7, #8]
 800043e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000440:	4b21      	ldr	r3, [pc, #132]	; (80004c8 <MX_GPIO_Init+0xcc>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a20      	ldr	r2, [pc, #128]	; (80004c8 <MX_GPIO_Init+0xcc>)
 8000446:	f043 0304 	orr.w	r3, r3, #4
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b1e      	ldr	r3, [pc, #120]	; (80004c8 <MX_GPIO_Init+0xcc>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0304 	and.w	r3, r3, #4
 8000454:	607b      	str	r3, [r7, #4]
 8000456:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000458:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <MX_GPIO_Init+0xcc>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a1a      	ldr	r2, [pc, #104]	; (80004c8 <MX_GPIO_Init+0xcc>)
 800045e:	f043 0308 	orr.w	r3, r3, #8
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b18      	ldr	r3, [pc, #96]	; (80004c8 <MX_GPIO_Init+0xcc>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0308 	and.w	r3, r3, #8
 800046c:	603b      	str	r3, [r7, #0]
 800046e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000470:	2200      	movs	r2, #0
 8000472:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000476:	4815      	ldr	r0, [pc, #84]	; (80004cc <MX_GPIO_Init+0xd0>)
 8000478:	f001 f978 	bl	800176c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	2101      	movs	r1, #1
 8000480:	4813      	ldr	r0, [pc, #76]	; (80004d0 <MX_GPIO_Init+0xd4>)
 8000482:	f001 f973 	bl	800176c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000486:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800048a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048c:	2301      	movs	r3, #1
 800048e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000490:	2300      	movs	r3, #0
 8000492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000494:	2302      	movs	r3, #2
 8000496:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000498:	f107 0310 	add.w	r3, r7, #16
 800049c:	4619      	mov	r1, r3
 800049e:	480b      	ldr	r0, [pc, #44]	; (80004cc <MX_GPIO_Init+0xd0>)
 80004a0:	f000 ffe0 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 80004a4:	2301      	movs	r3, #1
 80004a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a8:	2301      	movs	r3, #1
 80004aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b0:	2302      	movs	r3, #2
 80004b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	4619      	mov	r1, r3
 80004ba:	4805      	ldr	r0, [pc, #20]	; (80004d0 <MX_GPIO_Init+0xd4>)
 80004bc:	f000 ffd2 	bl	8001464 <HAL_GPIO_Init>

}
 80004c0:	bf00      	nop
 80004c2:	3720      	adds	r7, #32
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40021000 	.word	0x40021000
 80004cc:	40011000 	.word	0x40011000
 80004d0:	40010c00 	.word	0x40010c00

080004d4 <USER_UART_IRQHandler>:

/* USER CODE BEGIN 4 */
void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 // file stm32f1xx_hal_uart.c
 // comment
 // Set the UART DMA Half transfer complete callback
 // huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt

 if(huart == &huart1) //Determine whether it is serial port 1
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a11      	ldr	r2, [pc, #68]	; (8000524 <USER_UART_IRQHandler+0x50>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d11a      	bne.n	800051a <USER_UART_IRQHandler+0x46>
 {
  if(RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))   //Judging whether it is idle interruption
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <USER_UART_IRQHandler+0x50>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f003 0310 	and.w	r3, r3, #16
 80004ee:	2b10      	cmp	r3, #16
 80004f0:	d113      	bne.n	800051a <USER_UART_IRQHandler+0x46>
  {
   HAL_UART_DMAStop(&huart1);
 80004f2:	480c      	ldr	r0, [pc, #48]	; (8000524 <USER_UART_IRQHandler+0x50>)
 80004f4:	f002 fad1 	bl	8002a9a <HAL_UART_DMAStop>
   __HAL_UART_CLEAR_IDLEFLAG(&huart1); //Clear idle interrupt sign (otherwise it will continue to enter interrupt)
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <USER_UART_IRQHandler+0x50>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	4b07      	ldr	r3, [pc, #28]	; (8000524 <USER_UART_IRQHandler+0x50>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
   RX = 1;
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <USER_UART_IRQHandler+0x54>)
 8000510:	2201      	movs	r2, #1
 8000512:	701a      	strb	r2, [r3, #0]
   HAL_UART_DMAStop(&huart1);
 8000514:	4803      	ldr	r0, [pc, #12]	; (8000524 <USER_UART_IRQHandler+0x50>)
 8000516:	f002 fac0 	bl	8002a9a <HAL_UART_DMAStop>
  }
 }
}
 800051a:	bf00      	nop
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000134 	.word	0x20000134
 8000528:	20000028 	.word	0x20000028

0800052c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000530:	b672      	cpsid	i
}
 8000532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000534:	e7fe      	b.n	8000534 <Error_Handler+0x8>
	...

08000538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <HAL_MspInit+0x5c>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	4a14      	ldr	r2, [pc, #80]	; (8000594 <HAL_MspInit+0x5c>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6193      	str	r3, [r2, #24]
 800054a:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_MspInit+0x5c>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000556:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <HAL_MspInit+0x5c>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	4a0e      	ldr	r2, [pc, #56]	; (8000594 <HAL_MspInit+0x5c>)
 800055c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000560:	61d3      	str	r3, [r2, #28]
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <HAL_MspInit+0x5c>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <HAL_MspInit+0x60>)
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <HAL_MspInit+0x60>)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	40021000 	.word	0x40021000
 8000598:	40010000 	.word	0x40010000

0800059c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a1b      	ldr	r2, [pc, #108]	; (8000624 <HAL_SPI_MspInit+0x88>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d12f      	bne.n	800061c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005bc:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <HAL_SPI_MspInit+0x8c>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	4a19      	ldr	r2, [pc, #100]	; (8000628 <HAL_SPI_MspInit+0x8c>)
 80005c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005c6:	6193      	str	r3, [r2, #24]
 80005c8:	4b17      	ldr	r3, [pc, #92]	; (8000628 <HAL_SPI_MspInit+0x8c>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005d0:	60fb      	str	r3, [r7, #12]
 80005d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <HAL_SPI_MspInit+0x8c>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	4a13      	ldr	r2, [pc, #76]	; (8000628 <HAL_SPI_MspInit+0x8c>)
 80005da:	f043 0304 	orr.w	r3, r3, #4
 80005de:	6193      	str	r3, [r2, #24]
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <HAL_SPI_MspInit+0x8c>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	f003 0304 	and.w	r3, r3, #4
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80005ec:	23a0      	movs	r3, #160	; 0xa0
 80005ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f0:	2302      	movs	r3, #2
 80005f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005f4:	2303      	movs	r3, #3
 80005f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f8:	f107 0310 	add.w	r3, r7, #16
 80005fc:	4619      	mov	r1, r3
 80005fe:	480b      	ldr	r0, [pc, #44]	; (800062c <HAL_SPI_MspInit+0x90>)
 8000600:	f000 ff30 	bl	8001464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000604:	2340      	movs	r3, #64	; 0x40
 8000606:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	4619      	mov	r1, r3
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <HAL_SPI_MspInit+0x90>)
 8000618:	f000 ff24 	bl	8001464 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800061c:	bf00      	nop
 800061e:	3720      	adds	r7, #32
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40013000 	.word	0x40013000
 8000628:	40021000 	.word	0x40021000
 800062c:	40010800 	.word	0x40010800

08000630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 0310 	add.w	r3, r7, #16
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a47      	ldr	r2, [pc, #284]	; (8000768 <HAL_UART_MspInit+0x138>)
 800064c:	4293      	cmp	r3, r2
 800064e:	f040 8086 	bne.w	800075e <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000652:	4b46      	ldr	r3, [pc, #280]	; (800076c <HAL_UART_MspInit+0x13c>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	4a45      	ldr	r2, [pc, #276]	; (800076c <HAL_UART_MspInit+0x13c>)
 8000658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065c:	6193      	str	r3, [r2, #24]
 800065e:	4b43      	ldr	r3, [pc, #268]	; (800076c <HAL_UART_MspInit+0x13c>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b40      	ldr	r3, [pc, #256]	; (800076c <HAL_UART_MspInit+0x13c>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	4a3f      	ldr	r2, [pc, #252]	; (800076c <HAL_UART_MspInit+0x13c>)
 8000670:	f043 0304 	orr.w	r3, r3, #4
 8000674:	6193      	str	r3, [r2, #24]
 8000676:	4b3d      	ldr	r3, [pc, #244]	; (800076c <HAL_UART_MspInit+0x13c>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	f003 0304 	and.w	r3, r3, #4
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000682:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000686:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000688:	2302      	movs	r3, #2
 800068a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800068c:	2303      	movs	r3, #3
 800068e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	4619      	mov	r1, r3
 8000696:	4836      	ldr	r0, [pc, #216]	; (8000770 <HAL_UART_MspInit+0x140>)
 8000698:	f000 fee4 	bl	8001464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800069c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	f107 0310 	add.w	r3, r7, #16
 80006ae:	4619      	mov	r1, r3
 80006b0:	482f      	ldr	r0, [pc, #188]	; (8000770 <HAL_UART_MspInit+0x140>)
 80006b2:	f000 fed7 	bl	8001464 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80006b6:	4b2f      	ldr	r3, [pc, #188]	; (8000774 <HAL_UART_MspInit+0x144>)
 80006b8:	4a2f      	ldr	r2, [pc, #188]	; (8000778 <HAL_UART_MspInit+0x148>)
 80006ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006bc:	4b2d      	ldr	r3, [pc, #180]	; (8000774 <HAL_UART_MspInit+0x144>)
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c2:	4b2c      	ldr	r3, [pc, #176]	; (8000774 <HAL_UART_MspInit+0x144>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006c8:	4b2a      	ldr	r3, [pc, #168]	; (8000774 <HAL_UART_MspInit+0x144>)
 80006ca:	2280      	movs	r2, #128	; 0x80
 80006cc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006ce:	4b29      	ldr	r3, [pc, #164]	; (8000774 <HAL_UART_MspInit+0x144>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006d4:	4b27      	ldr	r3, [pc, #156]	; (8000774 <HAL_UART_MspInit+0x144>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80006da:	4b26      	ldr	r3, [pc, #152]	; (8000774 <HAL_UART_MspInit+0x144>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80006e0:	4b24      	ldr	r3, [pc, #144]	; (8000774 <HAL_UART_MspInit+0x144>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80006e6:	4823      	ldr	r0, [pc, #140]	; (8000774 <HAL_UART_MspInit+0x144>)
 80006e8:	f000 fc1e 	bl	8000f28 <HAL_DMA_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80006f2:	f7ff ff1b 	bl	800052c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4a1e      	ldr	r2, [pc, #120]	; (8000774 <HAL_UART_MspInit+0x144>)
 80006fa:	639a      	str	r2, [r3, #56]	; 0x38
 80006fc:	4a1d      	ldr	r2, [pc, #116]	; (8000774 <HAL_UART_MspInit+0x144>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <HAL_UART_MspInit+0x14c>)
 8000704:	4a1e      	ldr	r2, [pc, #120]	; (8000780 <HAL_UART_MspInit+0x150>)
 8000706:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <HAL_UART_MspInit+0x14c>)
 800070a:	2210      	movs	r2, #16
 800070c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <HAL_UART_MspInit+0x14c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <HAL_UART_MspInit+0x14c>)
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <HAL_UART_MspInit+0x14c>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <HAL_UART_MspInit+0x14c>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <HAL_UART_MspInit+0x14c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800072c:	4b13      	ldr	r3, [pc, #76]	; (800077c <HAL_UART_MspInit+0x14c>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000732:	4812      	ldr	r0, [pc, #72]	; (800077c <HAL_UART_MspInit+0x14c>)
 8000734:	f000 fbf8 	bl	8000f28 <HAL_DMA_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800073e:	f7ff fef5 	bl	800052c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4a0d      	ldr	r2, [pc, #52]	; (800077c <HAL_UART_MspInit+0x14c>)
 8000746:	635a      	str	r2, [r3, #52]	; 0x34
 8000748:	4a0c      	ldr	r2, [pc, #48]	; (800077c <HAL_UART_MspInit+0x14c>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2100      	movs	r1, #0
 8000752:	2025      	movs	r0, #37	; 0x25
 8000754:	f000 fbb1 	bl	8000eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000758:	2025      	movs	r0, #37	; 0x25
 800075a:	f000 fbca 	bl	8000ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800075e:	bf00      	nop
 8000760:	3720      	adds	r7, #32
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40013800 	.word	0x40013800
 800076c:	40021000 	.word	0x40021000
 8000770:	40010800 	.word	0x40010800
 8000774:	200000f0 	.word	0x200000f0
 8000778:	40020058 	.word	0x40020058
 800077c:	200000ac 	.word	0x200000ac
 8000780:	40020044 	.word	0x40020044

08000784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000788:	f001 fc10 	bl	8001fac <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800078c:	e7fe      	b.n	800078c <NMI_Handler+0x8>

0800078e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000792:	e7fe      	b.n	8000792 <HardFault_Handler+0x4>

08000794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <MemManage_Handler+0x4>

0800079a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <BusFault_Handler+0x4>

080007a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <UsageFault_Handler+0x4>

080007a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr

080007b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr

080007be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr

080007ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ce:	f000 fa5d 	bl	8000c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80007dc:	4802      	ldr	r0, [pc, #8]	; (80007e8 <DMA1_Channel4_IRQHandler+0x10>)
 80007de:	f000 fd0d 	bl	80011fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000ac 	.word	0x200000ac

080007ec <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80007f0:	4802      	ldr	r0, [pc, #8]	; (80007fc <DMA1_Channel5_IRQHandler+0x10>)
 80007f2:	f000 fd03 	bl	80011fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200000f0 	.word	0x200000f0

08000800 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000804:	4803      	ldr	r0, [pc, #12]	; (8000814 <USART1_IRQHandler+0x14>)
 8000806:	f002 f9a3 	bl	8002b50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USER_UART_IRQHandler(&huart1);
 800080a:	4802      	ldr	r0, [pc, #8]	; (8000814 <USART1_IRQHandler+0x14>)
 800080c:	f7ff fe62 	bl	80004d4 <USER_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000134 	.word	0x20000134

08000818 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <W25qxx_Spi>:



//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af02      	add	r7, sp, #8
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;

	HAL_SPI_TransmitReceive(W25QXX_SPI_PTR, &Data, &ret, 1, 100); // spi2
 800082e:	f107 020f 	add.w	r2, r7, #15
 8000832:	1df9      	adds	r1, r7, #7
 8000834:	2364      	movs	r3, #100	; 0x64
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	2301      	movs	r3, #1
 800083a:	4804      	ldr	r0, [pc, #16]	; (800084c <W25qxx_Spi+0x28>)
 800083c:	f001 fd83 	bl	8002346 <HAL_SPI_TransmitReceive>
	ret = W25QXX_SPI->DR;*/

	//while((W25QXX_SPI->SR & SPI_SR_BSY));
	//__HAL_SPI_CLEAR_OVRFLAG(&hspi2);

	return ret;
 8000840:	7bfb      	ldrb	r3, [r7, #15]
}
 8000842:	4618      	mov	r0, r3
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000178 	.word	0x20000178

08000850 <W25qxx_ReadID>:

//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]

	W25QFLASH_CS_SELECT;
 8000866:	2200      	movs	r2, #0
 8000868:	2101      	movs	r1, #1
 800086a:	4813      	ldr	r0, [pc, #76]	; (80008b8 <W25qxx_ReadID+0x68>)
 800086c:	f000 ff7e 	bl	800176c <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_GET_JEDEC_ID);
 8000870:	209f      	movs	r0, #159	; 0x9f
 8000872:	f7ff ffd7 	bl	8000824 <W25qxx_Spi>

	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000876:	20a5      	movs	r0, #165	; 0xa5
 8000878:	f7ff ffd4 	bl	8000824 <W25qxx_Spi>
 800087c:	4603      	mov	r3, r0
 800087e:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000880:	20a5      	movs	r0, #165	; 0xa5
 8000882:	f7ff ffcf 	bl	8000824 <W25qxx_Spi>
 8000886:	4603      	mov	r3, r0
 8000888:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800088a:	20a5      	movs	r0, #165	; 0xa5
 800088c:	f7ff ffca 	bl	8000824 <W25qxx_Spi>
 8000890:	4603      	mov	r3, r0
 8000892:	603b      	str	r3, [r7, #0]

	W25QFLASH_CS_UNSELECT;
 8000894:	2201      	movs	r2, #1
 8000896:	2101      	movs	r1, #1
 8000898:	4807      	ldr	r0, [pc, #28]	; (80008b8 <W25qxx_ReadID+0x68>)
 800089a:	f000 ff67 	bl	800176c <HAL_GPIO_WritePin>

	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	041a      	lsls	r2, r3, #16
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	021b      	lsls	r3, r3, #8
 80008a6:	4313      	orrs	r3, r2
 80008a8:	683a      	ldr	r2, [r7, #0]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	60fb      	str	r3, [r7, #12]

	return Temp;
 80008ae:	68fb      	ldr	r3, [r7, #12]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40010c00 	.word	0x40010c00

080008bc <W25qxx_Init>:
	W25QFLASH_CS_UNSELECT;
}

//###################################################################################################################
uint8_t W25qxx_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 80008c2:	4b7d      	ldr	r3, [pc, #500]	; (8000ab8 <W25qxx_Init+0x1fc>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick() < 100)
 80008ca:	e002      	b.n	80008d2 <W25qxx_Init+0x16>
	W25qxx_Delay(1);
 80008cc:	2001      	movs	r0, #1
 80008ce:	f000 f9f9 	bl	8000cc4 <HAL_Delay>
	while(HAL_GetTick() < 100)
 80008d2:	f000 f9ed 	bl	8000cb0 <HAL_GetTick>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b63      	cmp	r3, #99	; 0x63
 80008da:	d9f7      	bls.n	80008cc <W25qxx_Init+0x10>

	W25QFLASH_CS_UNSELECT;
 80008dc:	2201      	movs	r2, #1
 80008de:	2101      	movs	r1, #1
 80008e0:	4876      	ldr	r0, [pc, #472]	; (8000abc <W25qxx_Init+0x200>)
 80008e2:	f000 ff43 	bl	800176c <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 80008e6:	2064      	movs	r0, #100	; 0x64
 80008e8:	f000 f9ec 	bl	8000cc4 <HAL_Delay>

	#if (INIT_DEBUG == 1)
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Init Begin...\n", 14, 1000);
	#endif
	
	id = W25qxx_ReadID();
 80008ec:	f7ff ffb0 	bl	8000850 <W25qxx_ReadID>
 80008f0:	6078      	str	r0, [r7, #4]
	#if (INIT_DEBUG == 1)
	snprintf(buf, 64, "ID:0x%lX\n", id);
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
	#endif

	switch(id & 0x0000FFFF)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	f243 0217 	movw	r2, #12311	; 0x3017
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d838      	bhi.n	8000970 <W25qxx_Init+0xb4>
 80008fe:	f243 0211 	movw	r2, #12305	; 0x3011
 8000902:	4293      	cmp	r3, r2
 8000904:	d21e      	bcs.n	8000944 <W25qxx_Init+0x88>
 8000906:	e0a1      	b.n	8000a4c <W25qxx_Init+0x190>
 8000908:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800090c:	3b11      	subs	r3, #17
 800090e:	2b09      	cmp	r3, #9
 8000910:	f200 809c 	bhi.w	8000a4c <W25qxx_Init+0x190>
 8000914:	a201      	add	r2, pc, #4	; (adr r2, 800091c <W25qxx_Init+0x60>)
 8000916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800091a:	bf00      	nop
 800091c:	08000a07 	.word	0x08000a07
 8000920:	080009f9 	.word	0x080009f9
 8000924:	080009eb 	.word	0x080009eb
 8000928:	080009dd 	.word	0x080009dd
 800092c:	080009cf 	.word	0x080009cf
 8000930:	080009c1 	.word	0x080009c1
 8000934:	080009b3 	.word	0x080009b3
 8000938:	080009a3 	.word	0x080009a3
 800093c:	08000993 	.word	0x08000993
 8000940:	08000983 	.word	0x08000983
 8000944:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 8000948:	3b11      	subs	r3, #17
 800094a:	2b06      	cmp	r3, #6
 800094c:	d87e      	bhi.n	8000a4c <W25qxx_Init+0x190>
 800094e:	a201      	add	r2, pc, #4	; (adr r2, 8000954 <W25qxx_Init+0x98>)
 8000950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000954:	08000a45 	.word	0x08000a45
 8000958:	08000a3d 	.word	0x08000a3d
 800095c:	08000a35 	.word	0x08000a35
 8000960:	08000a2d 	.word	0x08000a2d
 8000964:	08000a25 	.word	0x08000a25
 8000968:	08000a1d 	.word	0x08000a1d
 800096c:	08000a15 	.word	0x08000a15
 8000970:	f244 021a 	movw	r2, #16410	; 0x401a
 8000974:	4293      	cmp	r3, r2
 8000976:	d869      	bhi.n	8000a4c <W25qxx_Init+0x190>
 8000978:	f244 0211 	movw	r2, #16401	; 0x4011
 800097c:	4293      	cmp	r3, r2
 800097e:	d2c3      	bcs.n	8000908 <W25qxx_Init+0x4c>
 8000980:	e064      	b.n	8000a4c <W25qxx_Init+0x190>
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID = W25Q512;
 8000982:	4b4d      	ldr	r3, [pc, #308]	; (8000ab8 <W25qxx_Init+0x1fc>)
 8000984:	220a      	movs	r2, #10
 8000986:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 1024;
 8000988:	4b4b      	ldr	r3, [pc, #300]	; (8000ab8 <W25qxx_Init+0x1fc>)
 800098a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800098e:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q512\n", 14, 1000);
			#endif
		break;
 8000990:	e062      	b.n	8000a58 <W25qxx_Init+0x19c>

		case 0x4019:	// 	w25q256
			w25qxx.ID = W25Q256;
 8000992:	4b49      	ldr	r3, [pc, #292]	; (8000ab8 <W25qxx_Init+0x1fc>)
 8000994:	2209      	movs	r2, #9
 8000996:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 512;
 8000998:	4b47      	ldr	r3, [pc, #284]	; (8000ab8 <W25qxx_Init+0x1fc>)
 800099a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800099e:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q256\n", 14, 1000);
			#endif
		break;
 80009a0:	e05a      	b.n	8000a58 <W25qxx_Init+0x19c>

		case 0x4018:	// 	w25q128
			w25qxx.ID = W25Q128;
 80009a2:	4b45      	ldr	r3, [pc, #276]	; (8000ab8 <W25qxx_Init+0x1fc>)
 80009a4:	2208      	movs	r2, #8
 80009a6:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 256;
 80009a8:	4b43      	ldr	r3, [pc, #268]	; (8000ab8 <W25qxx_Init+0x1fc>)
 80009aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009ae:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q128\n", 14, 1000);
			#endif
		break;
 80009b0:	e052      	b.n	8000a58 <W25qxx_Init+0x19c>

		case 0x4017:	//	w25q64
			w25qxx.ID = W25Q64;
 80009b2:	4b41      	ldr	r3, [pc, #260]	; (8000ab8 <W25qxx_Init+0x1fc>)
 80009b4:	2207      	movs	r2, #7
 80009b6:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 128;
 80009b8:	4b3f      	ldr	r3, [pc, #252]	; (8000ab8 <W25qxx_Init+0x1fc>)
 80009ba:	2280      	movs	r2, #128	; 0x80
 80009bc:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q64\n", 13, 1000);
			#endif
		break;
 80009be:	e04b      	b.n	8000a58 <W25qxx_Init+0x19c>

		case 0x4016:	//	w25q32
			w25qxx.ID = W25Q32;
 80009c0:	4b3d      	ldr	r3, [pc, #244]	; (8000ab8 <W25qxx_Init+0x1fc>)
 80009c2:	2206      	movs	r2, #6
 80009c4:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 64;
 80009c6:	4b3c      	ldr	r3, [pc, #240]	; (8000ab8 <W25qxx_Init+0x1fc>)
 80009c8:	2240      	movs	r2, #64	; 0x40
 80009ca:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q32\n", 13, 1000);
			#endif
		break;
 80009cc:	e044      	b.n	8000a58 <W25qxx_Init+0x19c>

		case 0x4015:	//	w25q16
			w25qxx.ID = W25Q16;
 80009ce:	4b3a      	ldr	r3, [pc, #232]	; (8000ab8 <W25qxx_Init+0x1fc>)
 80009d0:	2205      	movs	r2, #5
 80009d2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 32;
 80009d4:	4b38      	ldr	r3, [pc, #224]	; (8000ab8 <W25qxx_Init+0x1fc>)
 80009d6:	2220      	movs	r2, #32
 80009d8:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q16\n", 13, 1000);
			#endif
		break;
 80009da:	e03d      	b.n	8000a58 <W25qxx_Init+0x19c>

		case 0x4014:	//	w25q80
			w25qxx.ID = W25Q80;
 80009dc:	4b36      	ldr	r3, [pc, #216]	; (8000ab8 <W25qxx_Init+0x1fc>)
 80009de:	2204      	movs	r2, #4
 80009e0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 16;
 80009e2:	4b35      	ldr	r3, [pc, #212]	; (8000ab8 <W25qxx_Init+0x1fc>)
 80009e4:	2210      	movs	r2, #16
 80009e6:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q80\n", 13, 1000);
			#endif
		break;
 80009e8:	e036      	b.n	8000a58 <W25qxx_Init+0x19c>

		case 0x4013:	//	w25q40
			w25qxx.ID = W25Q40;
 80009ea:	4b33      	ldr	r3, [pc, #204]	; (8000ab8 <W25qxx_Init+0x1fc>)
 80009ec:	2203      	movs	r2, #3
 80009ee:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 8;
 80009f0:	4b31      	ldr	r3, [pc, #196]	; (8000ab8 <W25qxx_Init+0x1fc>)
 80009f2:	2208      	movs	r2, #8
 80009f4:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q40\n", 13, 1000);
			#endif
		break;
 80009f6:	e02f      	b.n	8000a58 <W25qxx_Init+0x19c>

		case 0x4012:	//	w25q20
			w25qxx.ID = W25Q20;
 80009f8:	4b2f      	ldr	r3, [pc, #188]	; (8000ab8 <W25qxx_Init+0x1fc>)
 80009fa:	2202      	movs	r2, #2
 80009fc:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 4;
 80009fe:	4b2e      	ldr	r3, [pc, #184]	; (8000ab8 <W25qxx_Init+0x1fc>)
 8000a00:	2204      	movs	r2, #4
 8000a02:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q20\n", 13, 1000);
			#endif
		break;
 8000a04:	e028      	b.n	8000a58 <W25qxx_Init+0x19c>

		case 0x4011:	//	w25q10
			w25qxx.ID = W25Q10;
 8000a06:	4b2c      	ldr	r3, [pc, #176]	; (8000ab8 <W25qxx_Init+0x1fc>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 2;
 8000a0c:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <W25qxx_Init+0x1fc>)
 8000a0e:	2202      	movs	r2, #2
 8000a10:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q10\n", 13, 1000);
			#endif
		break;
 8000a12:	e021      	b.n	8000a58 <W25qxx_Init+0x19c>

		////////////////////////////////////////////////////////////////////////////////

		case 0x3017:	//	w25x64
			//w25qxx.ID = W25Q64;
			w25qxx.BlockCount = 128;
 8000a14:	4b28      	ldr	r3, [pc, #160]	; (8000ab8 <W25qxx_Init+0x1fc>)
 8000a16:	2280      	movs	r2, #128	; 0x80
 8000a18:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x64\n", 13, 1000);
			#endif
		break;
 8000a1a:	e01d      	b.n	8000a58 <W25qxx_Init+0x19c>

		case 0x3016:	//	w25x32
			//w25qxx.ID = W25Q32;
			w25qxx.BlockCount = 64;
 8000a1c:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <W25qxx_Init+0x1fc>)
 8000a1e:	2240      	movs	r2, #64	; 0x40
 8000a20:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x32\n", 13, 1000);
			#endif
		break;
 8000a22:	e019      	b.n	8000a58 <W25qxx_Init+0x19c>

		case 0x3015:	//	w25q16
			//w25qxx.ID = W25Q16;
			w25qxx.BlockCount = 32;
 8000a24:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <W25qxx_Init+0x1fc>)
 8000a26:	2220      	movs	r2, #32
 8000a28:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x16\n", 13, 1000);
			#endif
		break;
 8000a2a:	e015      	b.n	8000a58 <W25qxx_Init+0x19c>

		////////////////////////////////////////////////////////////////////////////////
		case 0x3014:	//	w25x80
			//w25qxx.ID = W25Q80;
			w25qxx.BlockCount = 16;
 8000a2c:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <W25qxx_Init+0x1fc>)
 8000a2e:	2210      	movs	r2, #16
 8000a30:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x80\n", 13, 1000);
			#endif
		break;
 8000a32:	e011      	b.n	8000a58 <W25qxx_Init+0x19c>

		case 0x3013:	//	w25x40
			//w25qxx.ID = W25Q40;
			w25qxx.BlockCount = 8;
 8000a34:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <W25qxx_Init+0x1fc>)
 8000a36:	2208      	movs	r2, #8
 8000a38:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x40\n", 13, 1000);
			#endif
		break;
 8000a3a:	e00d      	b.n	8000a58 <W25qxx_Init+0x19c>

		case 0x3012:	//	w25x20
			//w25qxx.ID = W25Q20;
			w25qxx.BlockCount = 4;
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <W25qxx_Init+0x1fc>)
 8000a3e:	2204      	movs	r2, #4
 8000a40:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x20\n", 13, 1000);
			#endif
		break;
 8000a42:	e009      	b.n	8000a58 <W25qxx_Init+0x19c>

		case 0x3011:	//	w25x10
			//w25qxx.ID = W25Q10;
			w25qxx.BlockCount = 2;
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <W25qxx_Init+0x1fc>)
 8000a46:	2202      	movs	r2, #2
 8000a48:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x10\n", 13, 1000);
			#endif
		break;
 8000a4a:	e005      	b.n	8000a58 <W25qxx_Init+0x19c>
		default:
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Unknown ID\n", 11, 1000);
			#endif

			w25qxx.Lock = 0;
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <W25qxx_Init+0x1fc>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	e02b      	b.n	8000ab0 <W25qxx_Init+0x1f4>
	}


	w25qxx.PageSize = 256;
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <W25qxx_Init+0x1fc>)
 8000a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a5e:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <W25qxx_Init+0x1fc>)
 8000a62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a66:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <W25qxx_Init+0x1fc>)
 8000a6a:	69db      	ldr	r3, [r3, #28]
 8000a6c:	011b      	lsls	r3, r3, #4
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <W25qxx_Init+0x1fc>)
 8000a70:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <W25qxx_Init+0x1fc>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	4a10      	ldr	r2, [pc, #64]	; (8000ab8 <W25qxx_Init+0x1fc>)
 8000a78:	6912      	ldr	r2, [r2, #16]
 8000a7a:	fb02 f303 	mul.w	r3, r2, r3
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <W25qxx_Init+0x1fc>)
 8000a80:	8952      	ldrh	r2, [r2, #10]
 8000a82:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a86:	4a0c      	ldr	r2, [pc, #48]	; (8000ab8 <W25qxx_Init+0x1fc>)
 8000a88:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <W25qxx_Init+0x1fc>)
 8000a8c:	691b      	ldr	r3, [r3, #16]
 8000a8e:	011b      	lsls	r3, r3, #4
 8000a90:	4a09      	ldr	r2, [pc, #36]	; (8000ab8 <W25qxx_Init+0x1fc>)
 8000a92:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <W25qxx_Init+0x1fc>)
 8000a96:	695b      	ldr	r3, [r3, #20]
 8000a98:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <W25qxx_Init+0x1fc>)
 8000a9a:	6912      	ldr	r2, [r2, #16]
 8000a9c:	fb02 f303 	mul.w	r3, r2, r3
 8000aa0:	0a9b      	lsrs	r3, r3, #10
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <W25qxx_Init+0x1fc>)
 8000aa4:	6213      	str	r3, [r2, #32]
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);

	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Init Done\n", 10, 1000);
	#endif

	w25qxx.Lock = 0;
 8000aa6:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <W25qxx_Init+0x1fc>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return 1;
 8000aae:	2301      	movs	r3, #1
}	
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200001d0 	.word	0x200001d0
 8000abc:	40010c00 	.word	0x40010c00

08000ac0 <W25qxx_ReadPage>:
	w25qxx.Lock = 0;
}

//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
 8000acc:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 8000ace:	e002      	b.n	8000ad6 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f000 f8f7 	bl	8000cc4 <HAL_Delay>
	while(w25qxx.Lock==1)
 8000ad6:	4b34      	ldr	r3, [pc, #208]	; (8000ba8 <W25qxx_ReadPage+0xe8>)
 8000ad8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d0f7      	beq.n	8000ad0 <W25qxx_ReadPage+0x10>

	w25qxx.Lock = 1;
 8000ae0:	4b31      	ldr	r3, [pc, #196]	; (8000ba8 <W25qxx_ReadPage+0xe8>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	if((NumByteToRead_up_to_PageSize>w25qxx.PageSize) || (NumByteToRead_up_to_PageSize==0))
 8000ae8:	4b2f      	ldr	r3, [pc, #188]	; (8000ba8 <W25qxx_ReadPage+0xe8>)
 8000aea:	895b      	ldrh	r3, [r3, #10]
 8000aec:	461a      	mov	r2, r3
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d802      	bhi.n	8000afa <W25qxx_ReadPage+0x3a>
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d102      	bne.n	8000b00 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize=w25qxx.PageSize;
 8000afa:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <W25qxx_ReadPage+0xe8>)
 8000afc:	895b      	ldrh	r3, [r3, #10]
 8000afe:	603b      	str	r3, [r7, #0]

	if((OffsetInByte+NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	4413      	add	r3, r2
 8000b06:	4a28      	ldr	r2, [pc, #160]	; (8000ba8 <W25qxx_ReadPage+0xe8>)
 8000b08:	8952      	ldrh	r2, [r2, #10]
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d905      	bls.n	8000b1a <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8000b0e:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <W25qxx_ReadPage+0xe8>)
 8000b10:	895b      	ldrh	r3, [r3, #10]
 8000b12:	461a      	mov	r2, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	603b      	str	r3, [r7, #0]

	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8000b1a:	4b23      	ldr	r3, [pc, #140]	; (8000ba8 <W25qxx_ReadPage+0xe8>)
 8000b1c:	895b      	ldrh	r3, [r3, #10]
 8000b1e:	461a      	mov	r2, r3
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	fb03 f302 	mul.w	r3, r3, r2
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	60bb      	str	r3, [r7, #8]
	W25QFLASH_CS_SELECT;
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2101      	movs	r1, #1
 8000b30:	481e      	ldr	r0, [pc, #120]	; (8000bac <W25qxx_ReadPage+0xec>)
 8000b32:	f000 fe1b 	bl	800176c <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_FAST_READ);
 8000b36:	200b      	movs	r0, #11
 8000b38:	f7ff fe74 	bl	8000824 <W25qxx_Spi>

	if(w25qxx.ID >= W25Q256)
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <W25qxx_ReadPage+0xe8>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b08      	cmp	r3, #8
 8000b42:	d905      	bls.n	8000b50 <W25qxx_ReadPage+0x90>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	0e1b      	lsrs	r3, r3, #24
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fe6a 	bl	8000824 <W25qxx_Spi>

	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	0c1b      	lsrs	r3, r3, #16
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fe64 	bl	8000824 <W25qxx_Spi>
	W25qxx_Spi((Page_Address& 0xFF00) >> 8);
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	0a1b      	lsrs	r3, r3, #8
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fe5e 	bl	8000824 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fe59 	bl	8000824 <W25qxx_Spi>

	W25qxx_Spi(0);
 8000b72:	2000      	movs	r0, #0
 8000b74:	f7ff fe56 	bl	8000824 <W25qxx_Spi>

	HAL_SPI_Receive(W25QXX_SPI_PTR, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	2364      	movs	r3, #100	; 0x64
 8000b7e:	68f9      	ldr	r1, [r7, #12]
 8000b80:	480b      	ldr	r0, [pc, #44]	; (8000bb0 <W25qxx_ReadPage+0xf0>)
 8000b82:	f001 facf 	bl	8002124 <HAL_SPI_Receive>
		while(!(W25QXX_SPI->SR & SPI_SR_RXNE));
		pBuffer[i++] = W25QXX_SPI->DR;
		NumByteToRead_up_to_PageSize--;
	}*/

	W25QFLASH_CS_UNSELECT;
 8000b86:	2201      	movs	r2, #1
 8000b88:	2101      	movs	r1, #1
 8000b8a:	4808      	ldr	r0, [pc, #32]	; (8000bac <W25qxx_ReadPage+0xec>)
 8000b8c:	f000 fdee 	bl	800176c <HAL_GPIO_WritePin>

	W25qxx_Delay(1);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f000 f897 	bl	8000cc4 <HAL_Delay>
	w25qxx.Lock=0;
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <W25qxx_ReadPage+0xe8>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200001d0 	.word	0x200001d0
 8000bac:	40010c00 	.word	0x40010c00
 8000bb0:	20000178 	.word	0x20000178

08000bb4 <Reset_Handler>:
 8000bb4:	480c      	ldr	r0, [pc, #48]	; (8000be8 <LoopFillZerobss+0x12>)
 8000bb6:	490d      	ldr	r1, [pc, #52]	; (8000bec <LoopFillZerobss+0x16>)
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <LoopFillZerobss+0x1a>)
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:
 8000bbe:	58d4      	ldr	r4, [r2, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:
 8000bc4:	18c4      	adds	r4, r0, r3
 8000bc6:	428c      	cmp	r4, r1
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <LoopFillZerobss+0x1e>)
 8000bcc:	4c0a      	ldr	r4, [pc, #40]	; (8000bf8 <LoopFillZerobss+0x22>)
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:
 8000bd6:	42a2      	cmp	r2, r4
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>
 8000bda:	f7ff fe1d 	bl	8000818 <SystemInit>
 8000bde:	f002 fce3 	bl	80035a8 <__libc_init_array>
 8000be2:	f7ff fab3 	bl	800014c <main>
 8000be6:	4770      	bx	lr
 8000be8:	20000000 	.word	0x20000000
 8000bec:	2000000c 	.word	0x2000000c
 8000bf0:	08003648 	.word	0x08003648
 8000bf4:	2000000c 	.word	0x2000000c
 8000bf8:	200001fc 	.word	0x200001fc

08000bfc <ADC1_2_IRQHandler>:
 8000bfc:	e7fe      	b.n	8000bfc <ADC1_2_IRQHandler>
	...

08000c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <HAL_Init+0x28>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a07      	ldr	r2, [pc, #28]	; (8000c28 <HAL_Init+0x28>)
 8000c0a:	f043 0310 	orr.w	r3, r3, #16
 8000c0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c10:	2003      	movs	r0, #3
 8000c12:	f000 f947 	bl	8000ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f000 f808 	bl	8000c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c1c:	f7ff fc8c 	bl	8000538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40022000 	.word	0x40022000

08000c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_InitTick+0x54>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_InitTick+0x58>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 f95f 	bl	8000f0e <HAL_SYSTICK_Config>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00e      	b.n	8000c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b0f      	cmp	r3, #15
 8000c5e:	d80a      	bhi.n	8000c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c60:	2200      	movs	r2, #0
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f000 f927 	bl	8000eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c6c:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <HAL_InitTick+0x5c>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	e000      	b.n	8000c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000000 	.word	0x20000000
 8000c84:	20000008 	.word	0x20000008
 8000c88:	20000004 	.word	0x20000004

08000c8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <HAL_IncTick+0x1c>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <HAL_IncTick+0x20>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a03      	ldr	r2, [pc, #12]	; (8000cac <HAL_IncTick+0x20>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	200001f8 	.word	0x200001f8

08000cb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb4:	4b02      	ldr	r3, [pc, #8]	; (8000cc0 <HAL_GetTick+0x10>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	200001f8 	.word	0x200001f8

08000cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ccc:	f7ff fff0 	bl	8000cb0 <HAL_GetTick>
 8000cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cdc:	d005      	beq.n	8000cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cde:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <HAL_Delay+0x44>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cea:	bf00      	nop
 8000cec:	f7ff ffe0 	bl	8000cb0 <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d8f7      	bhi.n	8000cec <HAL_Delay+0x28>
  {
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008

08000d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3e:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	60d3      	str	r3, [r2, #12]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <__NVIC_GetPriorityGrouping+0x18>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	f003 0307 	and.w	r3, r3, #7
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	db0b      	blt.n	8000d9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	f003 021f 	and.w	r2, r3, #31
 8000d88:	4906      	ldr	r1, [pc, #24]	; (8000da4 <__NVIC_EnableIRQ+0x34>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	095b      	lsrs	r3, r3, #5
 8000d90:	2001      	movs	r0, #1
 8000d92:	fa00 f202 	lsl.w	r2, r0, r2
 8000d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	e000e100 	.word	0xe000e100

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	; (8000df4 <__NVIC_SetPriority+0x4c>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd0:	e00a      	b.n	8000de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4908      	ldr	r1, [pc, #32]	; (8000df8 <__NVIC_SetPriority+0x50>)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	3b04      	subs	r3, #4
 8000de0:	0112      	lsls	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	761a      	strb	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f1c3 0307 	rsb	r3, r3, #7
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf28      	it	cs
 8000e1a:	2304      	movcs	r3, #4
 8000e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3304      	adds	r3, #4
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d902      	bls.n	8000e2c <NVIC_EncodePriority+0x30>
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3b03      	subs	r3, #3
 8000e2a:	e000      	b.n	8000e2e <NVIC_EncodePriority+0x32>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43d9      	mvns	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	4313      	orrs	r3, r2
         );
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3724      	adds	r7, #36	; 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e70:	d301      	bcc.n	8000e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e72:	2301      	movs	r3, #1
 8000e74:	e00f      	b.n	8000e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e76:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <SysTick_Config+0x40>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7e:	210f      	movs	r1, #15
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	f7ff ff90 	bl	8000da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <SysTick_Config+0x40>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8e:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <SysTick_Config+0x40>)
 8000e90:	2207      	movs	r2, #7
 8000e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	e000e010 	.word	0xe000e010

08000ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ff2d 	bl	8000d0c <__NVIC_SetPriorityGrouping>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ecc:	f7ff ff42 	bl	8000d54 <__NVIC_GetPriorityGrouping>
 8000ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	68b9      	ldr	r1, [r7, #8]
 8000ed6:	6978      	ldr	r0, [r7, #20]
 8000ed8:	f7ff ff90 	bl	8000dfc <NVIC_EncodePriority>
 8000edc:	4602      	mov	r2, r0
 8000ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff5f 	bl	8000da8 <__NVIC_SetPriority>
}
 8000eea:	bf00      	nop
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff35 	bl	8000d70 <__NVIC_EnableIRQ>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ffa2 	bl	8000e60 <SysTick_Config>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f30:	2300      	movs	r3, #0
 8000f32:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e043      	b.n	8000fc6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <HAL_DMA_Init+0xa8>)
 8000f46:	4413      	add	r3, r2
 8000f48:	4a22      	ldr	r2, [pc, #136]	; (8000fd4 <HAL_DMA_Init+0xac>)
 8000f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4e:	091b      	lsrs	r3, r3, #4
 8000f50:	009a      	lsls	r2, r3, #2
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a1f      	ldr	r2, [pc, #124]	; (8000fd8 <HAL_DMA_Init+0xb0>)
 8000f5a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2202      	movs	r2, #2
 8000f60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000f72:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	bffdfff8 	.word	0xbffdfff8
 8000fd4:	cccccccd 	.word	0xcccccccd
 8000fd8:	40020000 	.word	0x40020000

08000fdc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d101      	bne.n	8000ffc <HAL_DMA_Start_IT+0x20>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e04a      	b.n	8001092 <HAL_DMA_Start_IT+0xb6>
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2201      	movs	r2, #1
 8001000:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800100a:	2b01      	cmp	r3, #1
 800100c:	d13a      	bne.n	8001084 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2202      	movs	r2, #2
 8001012:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2200      	movs	r2, #0
 800101a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0201 	bic.w	r2, r2, #1
 800102a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f000 f9e8 	bl	8001408 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103c:	2b00      	cmp	r3, #0
 800103e:	d008      	beq.n	8001052 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 020e 	orr.w	r2, r2, #14
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	e00f      	b.n	8001072 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 0204 	bic.w	r2, r2, #4
 8001060:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f042 020a 	orr.w	r2, r2, #10
 8001070:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f042 0201 	orr.w	r2, r2, #1
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	e005      	b.n	8001090 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800108c:	2302      	movs	r3, #2
 800108e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001090:	7dfb      	ldrb	r3, [r7, #23]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800109a:	b480      	push	{r7}
 800109c:	b085      	sub	sp, #20
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d008      	beq.n	80010c2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2204      	movs	r2, #4
 80010b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e020      	b.n	8001104 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f022 020e 	bic.w	r2, r2, #14
 80010d0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 0201 	bic.w	r2, r2, #1
 80010e0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ea:	2101      	movs	r1, #1
 80010ec:	fa01 f202 	lsl.w	r2, r1, r2
 80010f0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2201      	movs	r2, #1
 80010f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001102:	7bfb      	ldrb	r3, [r7, #15]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr
	...

08001110 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001118:	2300      	movs	r3, #0
 800111a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001122:	2b02      	cmp	r3, #2
 8001124:	d005      	beq.n	8001132 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2204      	movs	r2, #4
 800112a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	73fb      	strb	r3, [r7, #15]
 8001130:	e051      	b.n	80011d6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f022 020e 	bic.w	r2, r2, #14
 8001140:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f022 0201 	bic.w	r2, r2, #1
 8001150:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a22      	ldr	r2, [pc, #136]	; (80011e0 <HAL_DMA_Abort_IT+0xd0>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d029      	beq.n	80011b0 <HAL_DMA_Abort_IT+0xa0>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a20      	ldr	r2, [pc, #128]	; (80011e4 <HAL_DMA_Abort_IT+0xd4>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d022      	beq.n	80011ac <HAL_DMA_Abort_IT+0x9c>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a1f      	ldr	r2, [pc, #124]	; (80011e8 <HAL_DMA_Abort_IT+0xd8>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d01a      	beq.n	80011a6 <HAL_DMA_Abort_IT+0x96>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a1d      	ldr	r2, [pc, #116]	; (80011ec <HAL_DMA_Abort_IT+0xdc>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d012      	beq.n	80011a0 <HAL_DMA_Abort_IT+0x90>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a1c      	ldr	r2, [pc, #112]	; (80011f0 <HAL_DMA_Abort_IT+0xe0>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d00a      	beq.n	800119a <HAL_DMA_Abort_IT+0x8a>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a1a      	ldr	r2, [pc, #104]	; (80011f4 <HAL_DMA_Abort_IT+0xe4>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d102      	bne.n	8001194 <HAL_DMA_Abort_IT+0x84>
 800118e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001192:	e00e      	b.n	80011b2 <HAL_DMA_Abort_IT+0xa2>
 8001194:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001198:	e00b      	b.n	80011b2 <HAL_DMA_Abort_IT+0xa2>
 800119a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800119e:	e008      	b.n	80011b2 <HAL_DMA_Abort_IT+0xa2>
 80011a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a4:	e005      	b.n	80011b2 <HAL_DMA_Abort_IT+0xa2>
 80011a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011aa:	e002      	b.n	80011b2 <HAL_DMA_Abort_IT+0xa2>
 80011ac:	2310      	movs	r3, #16
 80011ae:	e000      	b.n	80011b2 <HAL_DMA_Abort_IT+0xa2>
 80011b0:	2301      	movs	r3, #1
 80011b2:	4a11      	ldr	r2, [pc, #68]	; (80011f8 <HAL_DMA_Abort_IT+0xe8>)
 80011b4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	4798      	blx	r3
    } 
  }
  return status;
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40020008 	.word	0x40020008
 80011e4:	4002001c 	.word	0x4002001c
 80011e8:	40020030 	.word	0x40020030
 80011ec:	40020044 	.word	0x40020044
 80011f0:	40020058 	.word	0x40020058
 80011f4:	4002006c 	.word	0x4002006c
 80011f8:	40020000 	.word	0x40020000

080011fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	2204      	movs	r2, #4
 800121a:	409a      	lsls	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4013      	ands	r3, r2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d04f      	beq.n	80012c4 <HAL_DMA_IRQHandler+0xc8>
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	2b00      	cmp	r3, #0
 800122c:	d04a      	beq.n	80012c4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0320 	and.w	r3, r3, #32
 8001238:	2b00      	cmp	r3, #0
 800123a:	d107      	bne.n	800124c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 0204 	bic.w	r2, r2, #4
 800124a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a66      	ldr	r2, [pc, #408]	; (80013ec <HAL_DMA_IRQHandler+0x1f0>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d029      	beq.n	80012aa <HAL_DMA_IRQHandler+0xae>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a65      	ldr	r2, [pc, #404]	; (80013f0 <HAL_DMA_IRQHandler+0x1f4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d022      	beq.n	80012a6 <HAL_DMA_IRQHandler+0xaa>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a63      	ldr	r2, [pc, #396]	; (80013f4 <HAL_DMA_IRQHandler+0x1f8>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d01a      	beq.n	80012a0 <HAL_DMA_IRQHandler+0xa4>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a62      	ldr	r2, [pc, #392]	; (80013f8 <HAL_DMA_IRQHandler+0x1fc>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d012      	beq.n	800129a <HAL_DMA_IRQHandler+0x9e>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a60      	ldr	r2, [pc, #384]	; (80013fc <HAL_DMA_IRQHandler+0x200>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d00a      	beq.n	8001294 <HAL_DMA_IRQHandler+0x98>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a5f      	ldr	r2, [pc, #380]	; (8001400 <HAL_DMA_IRQHandler+0x204>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d102      	bne.n	800128e <HAL_DMA_IRQHandler+0x92>
 8001288:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800128c:	e00e      	b.n	80012ac <HAL_DMA_IRQHandler+0xb0>
 800128e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001292:	e00b      	b.n	80012ac <HAL_DMA_IRQHandler+0xb0>
 8001294:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001298:	e008      	b.n	80012ac <HAL_DMA_IRQHandler+0xb0>
 800129a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800129e:	e005      	b.n	80012ac <HAL_DMA_IRQHandler+0xb0>
 80012a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012a4:	e002      	b.n	80012ac <HAL_DMA_IRQHandler+0xb0>
 80012a6:	2340      	movs	r3, #64	; 0x40
 80012a8:	e000      	b.n	80012ac <HAL_DMA_IRQHandler+0xb0>
 80012aa:	2304      	movs	r3, #4
 80012ac:	4a55      	ldr	r2, [pc, #340]	; (8001404 <HAL_DMA_IRQHandler+0x208>)
 80012ae:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f000 8094 	beq.w	80013e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80012c2:	e08e      	b.n	80013e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	2202      	movs	r2, #2
 80012ca:	409a      	lsls	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4013      	ands	r3, r2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d056      	beq.n	8001382 <HAL_DMA_IRQHandler+0x186>
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d051      	beq.n	8001382 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0320 	and.w	r3, r3, #32
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d10b      	bne.n	8001304 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 020a 	bic.w	r2, r2, #10
 80012fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2201      	movs	r2, #1
 8001300:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a38      	ldr	r2, [pc, #224]	; (80013ec <HAL_DMA_IRQHandler+0x1f0>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d029      	beq.n	8001362 <HAL_DMA_IRQHandler+0x166>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a37      	ldr	r2, [pc, #220]	; (80013f0 <HAL_DMA_IRQHandler+0x1f4>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d022      	beq.n	800135e <HAL_DMA_IRQHandler+0x162>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a35      	ldr	r2, [pc, #212]	; (80013f4 <HAL_DMA_IRQHandler+0x1f8>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d01a      	beq.n	8001358 <HAL_DMA_IRQHandler+0x15c>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a34      	ldr	r2, [pc, #208]	; (80013f8 <HAL_DMA_IRQHandler+0x1fc>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d012      	beq.n	8001352 <HAL_DMA_IRQHandler+0x156>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a32      	ldr	r2, [pc, #200]	; (80013fc <HAL_DMA_IRQHandler+0x200>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d00a      	beq.n	800134c <HAL_DMA_IRQHandler+0x150>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a31      	ldr	r2, [pc, #196]	; (8001400 <HAL_DMA_IRQHandler+0x204>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d102      	bne.n	8001346 <HAL_DMA_IRQHandler+0x14a>
 8001340:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001344:	e00e      	b.n	8001364 <HAL_DMA_IRQHandler+0x168>
 8001346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800134a:	e00b      	b.n	8001364 <HAL_DMA_IRQHandler+0x168>
 800134c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001350:	e008      	b.n	8001364 <HAL_DMA_IRQHandler+0x168>
 8001352:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001356:	e005      	b.n	8001364 <HAL_DMA_IRQHandler+0x168>
 8001358:	f44f 7300 	mov.w	r3, #512	; 0x200
 800135c:	e002      	b.n	8001364 <HAL_DMA_IRQHandler+0x168>
 800135e:	2320      	movs	r3, #32
 8001360:	e000      	b.n	8001364 <HAL_DMA_IRQHandler+0x168>
 8001362:	2302      	movs	r3, #2
 8001364:	4a27      	ldr	r2, [pc, #156]	; (8001404 <HAL_DMA_IRQHandler+0x208>)
 8001366:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001374:	2b00      	cmp	r3, #0
 8001376:	d034      	beq.n	80013e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001380:	e02f      	b.n	80013e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	2208      	movs	r2, #8
 8001388:	409a      	lsls	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4013      	ands	r3, r2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d028      	beq.n	80013e4 <HAL_DMA_IRQHandler+0x1e8>
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	2b00      	cmp	r3, #0
 800139a:	d023      	beq.n	80013e4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 020e 	bic.w	r2, r2, #14
 80013aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b4:	2101      	movs	r1, #1
 80013b6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d004      	beq.n	80013e4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	4798      	blx	r3
    }
  }
  return;
 80013e2:	bf00      	nop
 80013e4:	bf00      	nop
}
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40020008 	.word	0x40020008
 80013f0:	4002001c 	.word	0x4002001c
 80013f4:	40020030 	.word	0x40020030
 80013f8:	40020044 	.word	0x40020044
 80013fc:	40020058 	.word	0x40020058
 8001400:	4002006c 	.word	0x4002006c
 8001404:	40020000 	.word	0x40020000

08001408 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
 8001414:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800141e:	2101      	movs	r1, #1
 8001420:	fa01 f202 	lsl.w	r2, r1, r2
 8001424:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b10      	cmp	r3, #16
 8001434:	d108      	bne.n	8001448 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001446:	e007      	b.n	8001458 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68ba      	ldr	r2, [r7, #8]
 800144e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	60da      	str	r2, [r3, #12]
}
 8001458:	bf00      	nop
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
	...

08001464 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001464:	b480      	push	{r7}
 8001466:	b08b      	sub	sp, #44	; 0x2c
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001476:	e169      	b.n	800174c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001478:	2201      	movs	r2, #1
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	69fa      	ldr	r2, [r7, #28]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	429a      	cmp	r2, r3
 8001492:	f040 8158 	bne.w	8001746 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	4a9a      	ldr	r2, [pc, #616]	; (8001704 <HAL_GPIO_Init+0x2a0>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d05e      	beq.n	800155e <HAL_GPIO_Init+0xfa>
 80014a0:	4a98      	ldr	r2, [pc, #608]	; (8001704 <HAL_GPIO_Init+0x2a0>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d875      	bhi.n	8001592 <HAL_GPIO_Init+0x12e>
 80014a6:	4a98      	ldr	r2, [pc, #608]	; (8001708 <HAL_GPIO_Init+0x2a4>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d058      	beq.n	800155e <HAL_GPIO_Init+0xfa>
 80014ac:	4a96      	ldr	r2, [pc, #600]	; (8001708 <HAL_GPIO_Init+0x2a4>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d86f      	bhi.n	8001592 <HAL_GPIO_Init+0x12e>
 80014b2:	4a96      	ldr	r2, [pc, #600]	; (800170c <HAL_GPIO_Init+0x2a8>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d052      	beq.n	800155e <HAL_GPIO_Init+0xfa>
 80014b8:	4a94      	ldr	r2, [pc, #592]	; (800170c <HAL_GPIO_Init+0x2a8>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d869      	bhi.n	8001592 <HAL_GPIO_Init+0x12e>
 80014be:	4a94      	ldr	r2, [pc, #592]	; (8001710 <HAL_GPIO_Init+0x2ac>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d04c      	beq.n	800155e <HAL_GPIO_Init+0xfa>
 80014c4:	4a92      	ldr	r2, [pc, #584]	; (8001710 <HAL_GPIO_Init+0x2ac>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d863      	bhi.n	8001592 <HAL_GPIO_Init+0x12e>
 80014ca:	4a92      	ldr	r2, [pc, #584]	; (8001714 <HAL_GPIO_Init+0x2b0>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d046      	beq.n	800155e <HAL_GPIO_Init+0xfa>
 80014d0:	4a90      	ldr	r2, [pc, #576]	; (8001714 <HAL_GPIO_Init+0x2b0>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d85d      	bhi.n	8001592 <HAL_GPIO_Init+0x12e>
 80014d6:	2b12      	cmp	r3, #18
 80014d8:	d82a      	bhi.n	8001530 <HAL_GPIO_Init+0xcc>
 80014da:	2b12      	cmp	r3, #18
 80014dc:	d859      	bhi.n	8001592 <HAL_GPIO_Init+0x12e>
 80014de:	a201      	add	r2, pc, #4	; (adr r2, 80014e4 <HAL_GPIO_Init+0x80>)
 80014e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e4:	0800155f 	.word	0x0800155f
 80014e8:	08001539 	.word	0x08001539
 80014ec:	0800154b 	.word	0x0800154b
 80014f0:	0800158d 	.word	0x0800158d
 80014f4:	08001593 	.word	0x08001593
 80014f8:	08001593 	.word	0x08001593
 80014fc:	08001593 	.word	0x08001593
 8001500:	08001593 	.word	0x08001593
 8001504:	08001593 	.word	0x08001593
 8001508:	08001593 	.word	0x08001593
 800150c:	08001593 	.word	0x08001593
 8001510:	08001593 	.word	0x08001593
 8001514:	08001593 	.word	0x08001593
 8001518:	08001593 	.word	0x08001593
 800151c:	08001593 	.word	0x08001593
 8001520:	08001593 	.word	0x08001593
 8001524:	08001593 	.word	0x08001593
 8001528:	08001541 	.word	0x08001541
 800152c:	08001555 	.word	0x08001555
 8001530:	4a79      	ldr	r2, [pc, #484]	; (8001718 <HAL_GPIO_Init+0x2b4>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d013      	beq.n	800155e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001536:	e02c      	b.n	8001592 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	623b      	str	r3, [r7, #32]
          break;
 800153e:	e029      	b.n	8001594 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	3304      	adds	r3, #4
 8001546:	623b      	str	r3, [r7, #32]
          break;
 8001548:	e024      	b.n	8001594 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	3308      	adds	r3, #8
 8001550:	623b      	str	r3, [r7, #32]
          break;
 8001552:	e01f      	b.n	8001594 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	330c      	adds	r3, #12
 800155a:	623b      	str	r3, [r7, #32]
          break;
 800155c:	e01a      	b.n	8001594 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d102      	bne.n	800156c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001566:	2304      	movs	r3, #4
 8001568:	623b      	str	r3, [r7, #32]
          break;
 800156a:	e013      	b.n	8001594 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d105      	bne.n	8001580 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001574:	2308      	movs	r3, #8
 8001576:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69fa      	ldr	r2, [r7, #28]
 800157c:	611a      	str	r2, [r3, #16]
          break;
 800157e:	e009      	b.n	8001594 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001580:	2308      	movs	r3, #8
 8001582:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69fa      	ldr	r2, [r7, #28]
 8001588:	615a      	str	r2, [r3, #20]
          break;
 800158a:	e003      	b.n	8001594 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800158c:	2300      	movs	r3, #0
 800158e:	623b      	str	r3, [r7, #32]
          break;
 8001590:	e000      	b.n	8001594 <HAL_GPIO_Init+0x130>
          break;
 8001592:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	2bff      	cmp	r3, #255	; 0xff
 8001598:	d801      	bhi.n	800159e <HAL_GPIO_Init+0x13a>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	e001      	b.n	80015a2 <HAL_GPIO_Init+0x13e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3304      	adds	r3, #4
 80015a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2bff      	cmp	r3, #255	; 0xff
 80015a8:	d802      	bhi.n	80015b0 <HAL_GPIO_Init+0x14c>
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	e002      	b.n	80015b6 <HAL_GPIO_Init+0x152>
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	3b08      	subs	r3, #8
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	210f      	movs	r1, #15
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	fa01 f303 	lsl.w	r3, r1, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	401a      	ands	r2, r3
 80015c8:	6a39      	ldr	r1, [r7, #32]
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	fa01 f303 	lsl.w	r3, r1, r3
 80015d0:	431a      	orrs	r2, r3
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 80b1 	beq.w	8001746 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015e4:	4b4d      	ldr	r3, [pc, #308]	; (800171c <HAL_GPIO_Init+0x2b8>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	4a4c      	ldr	r2, [pc, #304]	; (800171c <HAL_GPIO_Init+0x2b8>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6193      	str	r3, [r2, #24]
 80015f0:	4b4a      	ldr	r3, [pc, #296]	; (800171c <HAL_GPIO_Init+0x2b8>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015fc:	4a48      	ldr	r2, [pc, #288]	; (8001720 <HAL_GPIO_Init+0x2bc>)
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	089b      	lsrs	r3, r3, #2
 8001602:	3302      	adds	r3, #2
 8001604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001608:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	220f      	movs	r2, #15
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	4013      	ands	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a40      	ldr	r2, [pc, #256]	; (8001724 <HAL_GPIO_Init+0x2c0>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d013      	beq.n	8001650 <HAL_GPIO_Init+0x1ec>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a3f      	ldr	r2, [pc, #252]	; (8001728 <HAL_GPIO_Init+0x2c4>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d00d      	beq.n	800164c <HAL_GPIO_Init+0x1e8>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a3e      	ldr	r2, [pc, #248]	; (800172c <HAL_GPIO_Init+0x2c8>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d007      	beq.n	8001648 <HAL_GPIO_Init+0x1e4>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a3d      	ldr	r2, [pc, #244]	; (8001730 <HAL_GPIO_Init+0x2cc>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d101      	bne.n	8001644 <HAL_GPIO_Init+0x1e0>
 8001640:	2303      	movs	r3, #3
 8001642:	e006      	b.n	8001652 <HAL_GPIO_Init+0x1ee>
 8001644:	2304      	movs	r3, #4
 8001646:	e004      	b.n	8001652 <HAL_GPIO_Init+0x1ee>
 8001648:	2302      	movs	r3, #2
 800164a:	e002      	b.n	8001652 <HAL_GPIO_Init+0x1ee>
 800164c:	2301      	movs	r3, #1
 800164e:	e000      	b.n	8001652 <HAL_GPIO_Init+0x1ee>
 8001650:	2300      	movs	r3, #0
 8001652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001654:	f002 0203 	and.w	r2, r2, #3
 8001658:	0092      	lsls	r2, r2, #2
 800165a:	4093      	lsls	r3, r2
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	4313      	orrs	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001662:	492f      	ldr	r1, [pc, #188]	; (8001720 <HAL_GPIO_Init+0x2bc>)
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	3302      	adds	r3, #2
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d006      	beq.n	800168a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800167c:	4b2d      	ldr	r3, [pc, #180]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	492c      	ldr	r1, [pc, #176]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	4313      	orrs	r3, r2
 8001686:	600b      	str	r3, [r1, #0]
 8001688:	e006      	b.n	8001698 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800168a:	4b2a      	ldr	r3, [pc, #168]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	43db      	mvns	r3, r3
 8001692:	4928      	ldr	r1, [pc, #160]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 8001694:	4013      	ands	r3, r2
 8001696:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d006      	beq.n	80016b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016a4:	4b23      	ldr	r3, [pc, #140]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	4922      	ldr	r1, [pc, #136]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]
 80016b0:	e006      	b.n	80016c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016b2:	4b20      	ldr	r3, [pc, #128]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	491e      	ldr	r1, [pc, #120]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016bc:	4013      	ands	r3, r2
 80016be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d006      	beq.n	80016da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016cc:	4b19      	ldr	r3, [pc, #100]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	4918      	ldr	r1, [pc, #96]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	608b      	str	r3, [r1, #8]
 80016d8:	e006      	b.n	80016e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016da:	4b16      	ldr	r3, [pc, #88]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	4914      	ldr	r1, [pc, #80]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d021      	beq.n	8001738 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016f4:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016f6:	68da      	ldr	r2, [r3, #12]
 80016f8:	490e      	ldr	r1, [pc, #56]	; (8001734 <HAL_GPIO_Init+0x2d0>)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	60cb      	str	r3, [r1, #12]
 8001700:	e021      	b.n	8001746 <HAL_GPIO_Init+0x2e2>
 8001702:	bf00      	nop
 8001704:	10320000 	.word	0x10320000
 8001708:	10310000 	.word	0x10310000
 800170c:	10220000 	.word	0x10220000
 8001710:	10210000 	.word	0x10210000
 8001714:	10120000 	.word	0x10120000
 8001718:	10110000 	.word	0x10110000
 800171c:	40021000 	.word	0x40021000
 8001720:	40010000 	.word	0x40010000
 8001724:	40010800 	.word	0x40010800
 8001728:	40010c00 	.word	0x40010c00
 800172c:	40011000 	.word	0x40011000
 8001730:	40011400 	.word	0x40011400
 8001734:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_GPIO_Init+0x304>)
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	43db      	mvns	r3, r3
 8001740:	4909      	ldr	r1, [pc, #36]	; (8001768 <HAL_GPIO_Init+0x304>)
 8001742:	4013      	ands	r3, r2
 8001744:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	3301      	adds	r3, #1
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	fa22 f303 	lsr.w	r3, r2, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	f47f ae8e 	bne.w	8001478 <HAL_GPIO_Init+0x14>
  }
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	372c      	adds	r7, #44	; 0x2c
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	40010400 	.word	0x40010400

0800176c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	807b      	strh	r3, [r7, #2]
 8001778:	4613      	mov	r3, r2
 800177a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800177c:	787b      	ldrb	r3, [r7, #1]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001782:	887a      	ldrh	r2, [r7, #2]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001788:	e003      	b.n	8001792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800178a:	887b      	ldrh	r3, [r7, #2]
 800178c:	041a      	lsls	r2, r3, #16
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	611a      	str	r2, [r3, #16]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e26c      	b.n	8001c88 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 8087 	beq.w	80018ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017bc:	4b92      	ldr	r3, [pc, #584]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	d00c      	beq.n	80017e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017c8:	4b8f      	ldr	r3, [pc, #572]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 030c 	and.w	r3, r3, #12
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d112      	bne.n	80017fa <HAL_RCC_OscConfig+0x5e>
 80017d4:	4b8c      	ldr	r3, [pc, #560]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e0:	d10b      	bne.n	80017fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e2:	4b89      	ldr	r3, [pc, #548]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d06c      	beq.n	80018c8 <HAL_RCC_OscConfig+0x12c>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d168      	bne.n	80018c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e246      	b.n	8001c88 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001802:	d106      	bne.n	8001812 <HAL_RCC_OscConfig+0x76>
 8001804:	4b80      	ldr	r3, [pc, #512]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a7f      	ldr	r2, [pc, #508]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 800180a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	e02e      	b.n	8001870 <HAL_RCC_OscConfig+0xd4>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10c      	bne.n	8001834 <HAL_RCC_OscConfig+0x98>
 800181a:	4b7b      	ldr	r3, [pc, #492]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a7a      	ldr	r2, [pc, #488]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 8001820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	4b78      	ldr	r3, [pc, #480]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a77      	ldr	r2, [pc, #476]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 800182c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e01d      	b.n	8001870 <HAL_RCC_OscConfig+0xd4>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0xbc>
 800183e:	4b72      	ldr	r3, [pc, #456]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a71      	ldr	r2, [pc, #452]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 8001844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	4b6f      	ldr	r3, [pc, #444]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a6e      	ldr	r2, [pc, #440]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 8001850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	e00b      	b.n	8001870 <HAL_RCC_OscConfig+0xd4>
 8001858:	4b6b      	ldr	r3, [pc, #428]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a6a      	ldr	r2, [pc, #424]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 800185e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	4b68      	ldr	r3, [pc, #416]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a67      	ldr	r2, [pc, #412]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 800186a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800186e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d013      	beq.n	80018a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001878:	f7ff fa1a 	bl	8000cb0 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001880:	f7ff fa16 	bl	8000cb0 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	; 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e1fa      	b.n	8001c88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001892:	4b5d      	ldr	r3, [pc, #372]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0xe4>
 800189e:	e014      	b.n	80018ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a0:	f7ff fa06 	bl	8000cb0 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a8:	f7ff fa02 	bl	8000cb0 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b64      	cmp	r3, #100	; 0x64
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e1e6      	b.n	8001c88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ba:	4b53      	ldr	r3, [pc, #332]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0x10c>
 80018c6:	e000      	b.n	80018ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d063      	beq.n	800199e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018d6:	4b4c      	ldr	r3, [pc, #304]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00b      	beq.n	80018fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018e2:	4b49      	ldr	r3, [pc, #292]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d11c      	bne.n	8001928 <HAL_RCC_OscConfig+0x18c>
 80018ee:	4b46      	ldr	r3, [pc, #280]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d116      	bne.n	8001928 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fa:	4b43      	ldr	r3, [pc, #268]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d005      	beq.n	8001912 <HAL_RCC_OscConfig+0x176>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d001      	beq.n	8001912 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e1ba      	b.n	8001c88 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001912:	4b3d      	ldr	r3, [pc, #244]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	4939      	ldr	r1, [pc, #228]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 8001922:	4313      	orrs	r3, r2
 8001924:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001926:	e03a      	b.n	800199e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d020      	beq.n	8001972 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001930:	4b36      	ldr	r3, [pc, #216]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001932:	2201      	movs	r2, #1
 8001934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001936:	f7ff f9bb 	bl	8000cb0 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800193e:	f7ff f9b7 	bl	8000cb0 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e19b      	b.n	8001c88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001950:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0f0      	beq.n	800193e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195c:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	4927      	ldr	r1, [pc, #156]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 800196c:	4313      	orrs	r3, r2
 800196e:	600b      	str	r3, [r1, #0]
 8001970:	e015      	b.n	800199e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001972:	4b26      	ldr	r3, [pc, #152]	; (8001a0c <HAL_RCC_OscConfig+0x270>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7ff f99a 	bl	8000cb0 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001980:	f7ff f996 	bl	8000cb0 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e17a      	b.n	8001c88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001992:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d03a      	beq.n	8001a20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d019      	beq.n	80019e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b2:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <HAL_RCC_OscConfig+0x274>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b8:	f7ff f97a 	bl	8000cb0 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c0:	f7ff f976 	bl	8000cb0 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e15a      	b.n	8001c88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019de:	2001      	movs	r0, #1
 80019e0:	f000 faf8 	bl	8001fd4 <RCC_Delay>
 80019e4:	e01c      	b.n	8001a20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019e6:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <HAL_RCC_OscConfig+0x274>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ec:	f7ff f960 	bl	8000cb0 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f2:	e00f      	b.n	8001a14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f4:	f7ff f95c 	bl	8000cb0 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d908      	bls.n	8001a14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e140      	b.n	8001c88 <HAL_RCC_OscConfig+0x4ec>
 8001a06:	bf00      	nop
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	42420000 	.word	0x42420000
 8001a10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a14:	4b9e      	ldr	r3, [pc, #632]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1e9      	bne.n	80019f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 80a6 	beq.w	8001b7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a32:	4b97      	ldr	r3, [pc, #604]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10d      	bne.n	8001a5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a3e:	4b94      	ldr	r3, [pc, #592]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	4a93      	ldr	r2, [pc, #588]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a48:	61d3      	str	r3, [r2, #28]
 8001a4a:	4b91      	ldr	r3, [pc, #580]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a56:	2301      	movs	r3, #1
 8001a58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5a:	4b8e      	ldr	r3, [pc, #568]	; (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d118      	bne.n	8001a98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a66:	4b8b      	ldr	r3, [pc, #556]	; (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a8a      	ldr	r2, [pc, #552]	; (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a72:	f7ff f91d 	bl	8000cb0 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7a:	f7ff f919 	bl	8000cb0 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b64      	cmp	r3, #100	; 0x64
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e0fd      	b.n	8001c88 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8c:	4b81      	ldr	r3, [pc, #516]	; (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d106      	bne.n	8001aae <HAL_RCC_OscConfig+0x312>
 8001aa0:	4b7b      	ldr	r3, [pc, #492]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	4a7a      	ldr	r2, [pc, #488]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6213      	str	r3, [r2, #32]
 8001aac:	e02d      	b.n	8001b0a <HAL_RCC_OscConfig+0x36e>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x334>
 8001ab6:	4b76      	ldr	r3, [pc, #472]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	4a75      	ldr	r2, [pc, #468]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001abc:	f023 0301 	bic.w	r3, r3, #1
 8001ac0:	6213      	str	r3, [r2, #32]
 8001ac2:	4b73      	ldr	r3, [pc, #460]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	4a72      	ldr	r2, [pc, #456]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001ac8:	f023 0304 	bic.w	r3, r3, #4
 8001acc:	6213      	str	r3, [r2, #32]
 8001ace:	e01c      	b.n	8001b0a <HAL_RCC_OscConfig+0x36e>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	2b05      	cmp	r3, #5
 8001ad6:	d10c      	bne.n	8001af2 <HAL_RCC_OscConfig+0x356>
 8001ad8:	4b6d      	ldr	r3, [pc, #436]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	4a6c      	ldr	r2, [pc, #432]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001ade:	f043 0304 	orr.w	r3, r3, #4
 8001ae2:	6213      	str	r3, [r2, #32]
 8001ae4:	4b6a      	ldr	r3, [pc, #424]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	4a69      	ldr	r2, [pc, #420]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	6213      	str	r3, [r2, #32]
 8001af0:	e00b      	b.n	8001b0a <HAL_RCC_OscConfig+0x36e>
 8001af2:	4b67      	ldr	r3, [pc, #412]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	4a66      	ldr	r2, [pc, #408]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001af8:	f023 0301 	bic.w	r3, r3, #1
 8001afc:	6213      	str	r3, [r2, #32]
 8001afe:	4b64      	ldr	r3, [pc, #400]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	4a63      	ldr	r2, [pc, #396]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001b04:	f023 0304 	bic.w	r3, r3, #4
 8001b08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d015      	beq.n	8001b3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b12:	f7ff f8cd 	bl	8000cb0 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b18:	e00a      	b.n	8001b30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1a:	f7ff f8c9 	bl	8000cb0 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e0ab      	b.n	8001c88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b30:	4b57      	ldr	r3, [pc, #348]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0ee      	beq.n	8001b1a <HAL_RCC_OscConfig+0x37e>
 8001b3c:	e014      	b.n	8001b68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b3e:	f7ff f8b7 	bl	8000cb0 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b44:	e00a      	b.n	8001b5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b46:	f7ff f8b3 	bl	8000cb0 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e095      	b.n	8001c88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b5c:	4b4c      	ldr	r3, [pc, #304]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1ee      	bne.n	8001b46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b68:	7dfb      	ldrb	r3, [r7, #23]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d105      	bne.n	8001b7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b6e:	4b48      	ldr	r3, [pc, #288]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	4a47      	ldr	r2, [pc, #284]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 8081 	beq.w	8001c86 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b84:	4b42      	ldr	r3, [pc, #264]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d061      	beq.n	8001c54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d146      	bne.n	8001c26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b98:	4b3f      	ldr	r3, [pc, #252]	; (8001c98 <HAL_RCC_OscConfig+0x4fc>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9e:	f7ff f887 	bl	8000cb0 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba6:	f7ff f883 	bl	8000cb0 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e067      	b.n	8001c88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb8:	4b35      	ldr	r3, [pc, #212]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1f0      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bcc:	d108      	bne.n	8001be0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bce:	4b30      	ldr	r3, [pc, #192]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	492d      	ldr	r1, [pc, #180]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be0:	4b2b      	ldr	r3, [pc, #172]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a19      	ldr	r1, [r3, #32]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	4927      	ldr	r1, [pc, #156]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bf8:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <HAL_RCC_OscConfig+0x4fc>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7ff f857 	bl	8000cb0 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c06:	f7ff f853 	bl	8000cb0 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e037      	b.n	8001c88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c18:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x46a>
 8001c24:	e02f      	b.n	8001c86 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c26:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <HAL_RCC_OscConfig+0x4fc>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2c:	f7ff f840 	bl	8000cb0 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c34:	f7ff f83c 	bl	8000cb0 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e020      	b.n	8001c88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c46:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0x498>
 8001c52:	e018      	b.n	8001c86 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d101      	bne.n	8001c60 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e013      	b.n	8001c88 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <HAL_RCC_OscConfig+0x4f4>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d106      	bne.n	8001c82 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d001      	beq.n	8001c86 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40007000 	.word	0x40007000
 8001c98:	42420060 	.word	0x42420060

08001c9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e0d0      	b.n	8001e52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb0:	4b6a      	ldr	r3, [pc, #424]	; (8001e5c <HAL_RCC_ClockConfig+0x1c0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d910      	bls.n	8001ce0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cbe:	4b67      	ldr	r3, [pc, #412]	; (8001e5c <HAL_RCC_ClockConfig+0x1c0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f023 0207 	bic.w	r2, r3, #7
 8001cc6:	4965      	ldr	r1, [pc, #404]	; (8001e5c <HAL_RCC_ClockConfig+0x1c0>)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cce:	4b63      	ldr	r3, [pc, #396]	; (8001e5c <HAL_RCC_ClockConfig+0x1c0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d001      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e0b8      	b.n	8001e52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d020      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d005      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cf8:	4b59      	ldr	r3, [pc, #356]	; (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	4a58      	ldr	r2, [pc, #352]	; (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d10:	4b53      	ldr	r3, [pc, #332]	; (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	4a52      	ldr	r2, [pc, #328]	; (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d1c:	4b50      	ldr	r3, [pc, #320]	; (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	494d      	ldr	r1, [pc, #308]	; (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d040      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d107      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d42:	4b47      	ldr	r3, [pc, #284]	; (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d115      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e07f      	b.n	8001e52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d107      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d5a:	4b41      	ldr	r3, [pc, #260]	; (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d109      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e073      	b.n	8001e52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6a:	4b3d      	ldr	r3, [pc, #244]	; (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e06b      	b.n	8001e52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d7a:	4b39      	ldr	r3, [pc, #228]	; (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f023 0203 	bic.w	r2, r3, #3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	4936      	ldr	r1, [pc, #216]	; (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d8c:	f7fe ff90 	bl	8000cb0 <HAL_GetTick>
 8001d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d92:	e00a      	b.n	8001daa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d94:	f7fe ff8c 	bl	8000cb0 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e053      	b.n	8001e52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001daa:	4b2d      	ldr	r3, [pc, #180]	; (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 020c 	and.w	r2, r3, #12
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d1eb      	bne.n	8001d94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dbc:	4b27      	ldr	r3, [pc, #156]	; (8001e5c <HAL_RCC_ClockConfig+0x1c0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d210      	bcs.n	8001dec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dca:	4b24      	ldr	r3, [pc, #144]	; (8001e5c <HAL_RCC_ClockConfig+0x1c0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f023 0207 	bic.w	r2, r3, #7
 8001dd2:	4922      	ldr	r1, [pc, #136]	; (8001e5c <HAL_RCC_ClockConfig+0x1c0>)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dda:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d001      	beq.n	8001dec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e032      	b.n	8001e52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d008      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001df8:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	4916      	ldr	r1, [pc, #88]	; (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d009      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e16:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	490e      	ldr	r1, [pc, #56]	; (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e2a:	f000 f82d 	bl	8001e88 <HAL_RCC_GetSysClockFreq>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	091b      	lsrs	r3, r3, #4
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	490a      	ldr	r1, [pc, #40]	; (8001e64 <HAL_RCC_ClockConfig+0x1c8>)
 8001e3c:	5ccb      	ldrb	r3, [r1, r3]
 8001e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e42:	4a09      	ldr	r2, [pc, #36]	; (8001e68 <HAL_RCC_ClockConfig+0x1cc>)
 8001e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_RCC_ClockConfig+0x1d0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe feee 	bl	8000c2c <HAL_InitTick>

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40022000 	.word	0x40022000
 8001e60:	40021000 	.word	0x40021000
 8001e64:	08003628 	.word	0x08003628
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	20000004 	.word	0x20000004

08001e70 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <HAL_RCC_EnableCSS+0x14>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	601a      	str	r2, [r3, #0]
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	4242004c 	.word	0x4242004c

08001e88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e88:	b490      	push	{r4, r7}
 8001e8a:	b08a      	sub	sp, #40	; 0x28
 8001e8c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e8e:	4b2a      	ldr	r3, [pc, #168]	; (8001f38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e90:	1d3c      	adds	r4, r7, #4
 8001e92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e98:	f240 2301 	movw	r3, #513	; 0x201
 8001e9c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61bb      	str	r3, [r7, #24]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001eb2:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d002      	beq.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ec2:	2b08      	cmp	r3, #8
 8001ec4:	d003      	beq.n	8001ece <HAL_RCC_GetSysClockFreq+0x46>
 8001ec6:	e02d      	b.n	8001f24 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ec8:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eca:	623b      	str	r3, [r7, #32]
      break;
 8001ecc:	e02d      	b.n	8001f2a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	0c9b      	lsrs	r3, r3, #18
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001eda:	4413      	add	r3, r2
 8001edc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ee0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d013      	beq.n	8001f14 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eec:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	0c5b      	lsrs	r3, r3, #17
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001efa:	4413      	add	r3, r2
 8001efc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f00:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	4a0e      	ldr	r2, [pc, #56]	; (8001f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f06:	fb02 f203 	mul.w	r2, r2, r3
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
 8001f12:	e004      	b.n	8001f1e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	4a0b      	ldr	r2, [pc, #44]	; (8001f44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f18:	fb02 f303 	mul.w	r3, r2, r3
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	623b      	str	r3, [r7, #32]
      break;
 8001f22:	e002      	b.n	8001f2a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f26:	623b      	str	r3, [r7, #32]
      break;
 8001f28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3728      	adds	r7, #40	; 0x28
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc90      	pop	{r4, r7}
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	08003618 	.word	0x08003618
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	007a1200 	.word	0x007a1200
 8001f44:	003d0900 	.word	0x003d0900

08001f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f4c:	4b02      	ldr	r3, [pc, #8]	; (8001f58 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr
 8001f58:	20000000 	.word	0x20000000

08001f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f60:	f7ff fff2 	bl	8001f48 <HAL_RCC_GetHCLKFreq>
 8001f64:	4602      	mov	r2, r0
 8001f66:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	0a1b      	lsrs	r3, r3, #8
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	4903      	ldr	r1, [pc, #12]	; (8001f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f72:	5ccb      	ldrb	r3, [r1, r3]
 8001f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	08003638 	.word	0x08003638

08001f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f88:	f7ff ffde 	bl	8001f48 <HAL_RCC_GetHCLKFreq>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	0adb      	lsrs	r3, r3, #11
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	4903      	ldr	r1, [pc, #12]	; (8001fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f9a:	5ccb      	ldrb	r3, [r1, r3]
 8001f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	08003638 	.word	0x08003638

08001fac <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_RCC_NMI_IRQHandler+0x20>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb8:	2b80      	cmp	r3, #128	; 0x80
 8001fba:	d104      	bne.n	8001fc6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001fbc:	f000 f828 	bl	8002010 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001fc0:	4b03      	ldr	r3, [pc, #12]	; (8001fd0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8001fc2:	2280      	movs	r2, #128	; 0x80
 8001fc4:	701a      	strb	r2, [r3, #0]
  }
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	4002100a 	.word	0x4002100a

08001fd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <RCC_Delay+0x34>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a0a      	ldr	r2, [pc, #40]	; (800200c <RCC_Delay+0x38>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	0a5b      	lsrs	r3, r3, #9
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ff0:	bf00      	nop
  }
  while (Delay --);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	1e5a      	subs	r2, r3, #1
 8001ff6:	60fa      	str	r2, [r7, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f9      	bne.n	8001ff0 <RCC_Delay+0x1c>
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr
 8002008:	20000000 	.word	0x20000000
 800200c:	10624dd3 	.word	0x10624dd3

08002010 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr

0800201c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e076      	b.n	800211c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	2b00      	cmp	r3, #0
 8002034:	d108      	bne.n	8002048 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800203e:	d009      	beq.n	8002054 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	61da      	str	r2, [r3, #28]
 8002046:	e005      	b.n	8002054 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d106      	bne.n	8002074 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7fe fa94 	bl	800059c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2202      	movs	r2, #2
 8002078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800208a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800209c:	431a      	orrs	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	431a      	orrs	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d8:	ea42 0103 	orr.w	r1, r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	0c1a      	lsrs	r2, r3, #16
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f002 0204 	and.w	r2, r2, #4
 80020fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	69da      	ldr	r2, [r3, #28]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800210a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af02      	add	r7, sp, #8
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	603b      	str	r3, [r7, #0]
 8002130:	4613      	mov	r3, r2
 8002132:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002140:	d112      	bne.n	8002168 <HAL_SPI_Receive+0x44>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10e      	bne.n	8002168 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2204      	movs	r2, #4
 800214e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002152:	88fa      	ldrh	r2, [r7, #6]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	4613      	mov	r3, r2
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 f8f1 	bl	8002346 <HAL_SPI_TransmitReceive>
 8002164:	4603      	mov	r3, r0
 8002166:	e0ea      	b.n	800233e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_SPI_Receive+0x52>
 8002172:	2302      	movs	r3, #2
 8002174:	e0e3      	b.n	800233e <HAL_SPI_Receive+0x21a>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800217e:	f7fe fd97 	bl	8000cb0 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b01      	cmp	r3, #1
 800218e:	d002      	beq.n	8002196 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002190:	2302      	movs	r3, #2
 8002192:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002194:	e0ca      	b.n	800232c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d002      	beq.n	80021a2 <HAL_SPI_Receive+0x7e>
 800219c:	88fb      	ldrh	r3, [r7, #6]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d102      	bne.n	80021a8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80021a6:	e0c1      	b.n	800232c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2204      	movs	r2, #4
 80021ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	88fa      	ldrh	r2, [r7, #6]
 80021c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	88fa      	ldrh	r2, [r7, #6]
 80021c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021ee:	d10f      	bne.n	8002210 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800220e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800221a:	2b40      	cmp	r3, #64	; 0x40
 800221c:	d007      	beq.n	800222e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800222c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d162      	bne.n	80022fc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002236:	e02e      	b.n	8002296 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b01      	cmp	r3, #1
 8002244:	d115      	bne.n	8002272 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f103 020c 	add.w	r2, r3, #12
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002252:	7812      	ldrb	r2, [r2, #0]
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002266:	b29b      	uxth	r3, r3
 8002268:	3b01      	subs	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002270:	e011      	b.n	8002296 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002272:	f7fe fd1d 	bl	8000cb0 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d803      	bhi.n	800228a <HAL_SPI_Receive+0x166>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002288:	d102      	bne.n	8002290 <HAL_SPI_Receive+0x16c>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d102      	bne.n	8002296 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002294:	e04a      	b.n	800232c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800229a:	b29b      	uxth	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1cb      	bne.n	8002238 <HAL_SPI_Receive+0x114>
 80022a0:	e031      	b.n	8002306 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d113      	bne.n	80022d8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ba:	b292      	uxth	r2, r2
 80022bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c2:	1c9a      	adds	r2, r3, #2
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022d6:	e011      	b.n	80022fc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022d8:	f7fe fcea 	bl	8000cb0 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d803      	bhi.n	80022f0 <HAL_SPI_Receive+0x1cc>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ee:	d102      	bne.n	80022f6 <HAL_SPI_Receive+0x1d2>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d102      	bne.n	80022fc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80022fa:	e017      	b.n	800232c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002300:	b29b      	uxth	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1cd      	bne.n	80022a2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	6839      	ldr	r1, [r7, #0]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 fa46 	bl	800279c <SPI_EndRxTransaction>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2220      	movs	r2, #32
 800231a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	75fb      	strb	r3, [r7, #23]
 8002328:	e000      	b.n	800232c <HAL_SPI_Receive+0x208>
  }

error :
 800232a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800233c:	7dfb      	ldrb	r3, [r7, #23]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b08c      	sub	sp, #48	; 0x30
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002354:	2301      	movs	r3, #1
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <HAL_SPI_TransmitReceive+0x26>
 8002368:	2302      	movs	r3, #2
 800236a:	e18a      	b.n	8002682 <HAL_SPI_TransmitReceive+0x33c>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002374:	f7fe fc9c 	bl	8000cb0 <HAL_GetTick>
 8002378:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002380:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800238a:	887b      	ldrh	r3, [r7, #2]
 800238c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800238e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002392:	2b01      	cmp	r3, #1
 8002394:	d00f      	beq.n	80023b6 <HAL_SPI_TransmitReceive+0x70>
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800239c:	d107      	bne.n	80023ae <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d103      	bne.n	80023ae <HAL_SPI_TransmitReceive+0x68>
 80023a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d003      	beq.n	80023b6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80023ae:	2302      	movs	r3, #2
 80023b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80023b4:	e15b      	b.n	800266e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_SPI_TransmitReceive+0x82>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <HAL_SPI_TransmitReceive+0x82>
 80023c2:	887b      	ldrh	r3, [r7, #2]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d103      	bne.n	80023d0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80023ce:	e14e      	b.n	800266e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d003      	beq.n	80023e4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2205      	movs	r2, #5
 80023e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	887a      	ldrh	r2, [r7, #2]
 80023f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	887a      	ldrh	r2, [r7, #2]
 80023fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	887a      	ldrh	r2, [r7, #2]
 8002406:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	887a      	ldrh	r2, [r7, #2]
 800240c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002424:	2b40      	cmp	r3, #64	; 0x40
 8002426:	d007      	beq.n	8002438 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002436:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002440:	d178      	bne.n	8002534 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d002      	beq.n	8002450 <HAL_SPI_TransmitReceive+0x10a>
 800244a:	8b7b      	ldrh	r3, [r7, #26]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d166      	bne.n	800251e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	881a      	ldrh	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	1c9a      	adds	r2, r3, #2
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800246a:	b29b      	uxth	r3, r3
 800246c:	3b01      	subs	r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002474:	e053      	b.n	800251e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b02      	cmp	r3, #2
 8002482:	d11b      	bne.n	80024bc <HAL_SPI_TransmitReceive+0x176>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002488:	b29b      	uxth	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d016      	beq.n	80024bc <HAL_SPI_TransmitReceive+0x176>
 800248e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002490:	2b01      	cmp	r3, #1
 8002492:	d113      	bne.n	80024bc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002498:	881a      	ldrh	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a4:	1c9a      	adds	r2, r3, #2
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d119      	bne.n	80024fe <HAL_SPI_TransmitReceive+0x1b8>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d014      	beq.n	80024fe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024de:	b292      	uxth	r2, r2
 80024e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e6:	1c9a      	adds	r2, r3, #2
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024fa:	2301      	movs	r3, #1
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80024fe:	f7fe fbd7 	bl	8000cb0 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800250a:	429a      	cmp	r2, r3
 800250c:	d807      	bhi.n	800251e <HAL_SPI_TransmitReceive+0x1d8>
 800250e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002514:	d003      	beq.n	800251e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800251c:	e0a7      	b.n	800266e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002522:	b29b      	uxth	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1a6      	bne.n	8002476 <HAL_SPI_TransmitReceive+0x130>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800252c:	b29b      	uxth	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1a1      	bne.n	8002476 <HAL_SPI_TransmitReceive+0x130>
 8002532:	e07c      	b.n	800262e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <HAL_SPI_TransmitReceive+0x1fc>
 800253c:	8b7b      	ldrh	r3, [r7, #26]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d16b      	bne.n	800261a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	330c      	adds	r3, #12
 800254c:	7812      	ldrb	r2, [r2, #0]
 800254e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800255e:	b29b      	uxth	r3, r3
 8002560:	3b01      	subs	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002568:	e057      	b.n	800261a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b02      	cmp	r3, #2
 8002576:	d11c      	bne.n	80025b2 <HAL_SPI_TransmitReceive+0x26c>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800257c:	b29b      	uxth	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d017      	beq.n	80025b2 <HAL_SPI_TransmitReceive+0x26c>
 8002582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002584:	2b01      	cmp	r3, #1
 8002586:	d114      	bne.n	80025b2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	330c      	adds	r3, #12
 8002592:	7812      	ldrb	r2, [r2, #0]
 8002594:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d119      	bne.n	80025f4 <HAL_SPI_TransmitReceive+0x2ae>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d014      	beq.n	80025f4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025f0:	2301      	movs	r3, #1
 80025f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80025f4:	f7fe fb5c 	bl	8000cb0 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002600:	429a      	cmp	r2, r3
 8002602:	d803      	bhi.n	800260c <HAL_SPI_TransmitReceive+0x2c6>
 8002604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260a:	d102      	bne.n	8002612 <HAL_SPI_TransmitReceive+0x2cc>
 800260c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260e:	2b00      	cmp	r3, #0
 8002610:	d103      	bne.n	800261a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002618:	e029      	b.n	800266e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800261e:	b29b      	uxth	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1a2      	bne.n	800256a <HAL_SPI_TransmitReceive+0x224>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d19d      	bne.n	800256a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800262e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002630:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f904 	bl	8002840 <SPI_EndRxTxTransaction>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d006      	beq.n	800264c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2220      	movs	r2, #32
 8002648:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800264a:	e010      	b.n	800266e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10b      	bne.n	800266c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	e000      	b.n	800266e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800266c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800267e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002682:	4618      	mov	r0, r3
 8002684:	3730      	adds	r7, #48	; 0x30
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	603b      	str	r3, [r7, #0]
 8002698:	4613      	mov	r3, r2
 800269a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800269c:	f7fe fb08 	bl	8000cb0 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	4413      	add	r3, r2
 80026aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026ac:	f7fe fb00 	bl	8000cb0 <HAL_GetTick>
 80026b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026b2:	4b39      	ldr	r3, [pc, #228]	; (8002798 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	015b      	lsls	r3, r3, #5
 80026b8:	0d1b      	lsrs	r3, r3, #20
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	fb02 f303 	mul.w	r3, r2, r3
 80026c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026c2:	e054      	b.n	800276e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ca:	d050      	beq.n	800276e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80026cc:	f7fe faf0 	bl	8000cb0 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	69fa      	ldr	r2, [r7, #28]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d902      	bls.n	80026e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d13d      	bne.n	800275e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80026f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026fa:	d111      	bne.n	8002720 <SPI_WaitFlagStateUntilTimeout+0x94>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002704:	d004      	beq.n	8002710 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270e:	d107      	bne.n	8002720 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800271e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002728:	d10f      	bne.n	800274a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002748:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e017      	b.n	800278e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002764:	2300      	movs	r3, #0
 8002766:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	3b01      	subs	r3, #1
 800276c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	4013      	ands	r3, r2
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	429a      	cmp	r2, r3
 800277c:	bf0c      	ite	eq
 800277e:	2301      	moveq	r3, #1
 8002780:	2300      	movne	r3, #0
 8002782:	b2db      	uxtb	r3, r3
 8002784:	461a      	mov	r2, r3
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	429a      	cmp	r2, r3
 800278a:	d19b      	bne.n	80026c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3720      	adds	r7, #32
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000000 	.word	0x20000000

0800279c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027b0:	d111      	bne.n	80027d6 <SPI_EndRxTransaction+0x3a>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027ba:	d004      	beq.n	80027c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c4:	d107      	bne.n	80027d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027d4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027de:	d117      	bne.n	8002810 <SPI_EndRxTransaction+0x74>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e8:	d112      	bne.n	8002810 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2200      	movs	r2, #0
 80027f2:	2101      	movs	r1, #1
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f7ff ff49 	bl	800268c <SPI_WaitFlagStateUntilTimeout>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d01a      	beq.n	8002836 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002804:	f043 0220 	orr.w	r2, r3, #32
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e013      	b.n	8002838 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2200      	movs	r2, #0
 8002818:	2180      	movs	r1, #128	; 0x80
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f7ff ff36 	bl	800268c <SPI_WaitFlagStateUntilTimeout>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d007      	beq.n	8002836 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282a:	f043 0220 	orr.w	r2, r3, #32
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e000      	b.n	8002838 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af02      	add	r7, sp, #8
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2200      	movs	r2, #0
 8002854:	2180      	movs	r1, #128	; 0x80
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f7ff ff18 	bl	800268c <SPI_WaitFlagStateUntilTimeout>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d007      	beq.n	8002872 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002866:	f043 0220 	orr.w	r2, r3, #32
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e000      	b.n	8002874 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e03f      	b.n	800290e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7fd fec4 	bl	8000630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2224      	movs	r2, #36	; 0x24
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 fde3 	bl	800348c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695a      	ldr	r2, [r3, #20]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b08a      	sub	sp, #40	; 0x28
 800291a:	af02      	add	r7, sp, #8
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	603b      	str	r3, [r7, #0]
 8002922:	4613      	mov	r3, r2
 8002924:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b20      	cmp	r3, #32
 8002934:	d17c      	bne.n	8002a30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d002      	beq.n	8002942 <HAL_UART_Transmit+0x2c>
 800293c:	88fb      	ldrh	r3, [r7, #6]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e075      	b.n	8002a32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_UART_Transmit+0x3e>
 8002950:	2302      	movs	r3, #2
 8002952:	e06e      	b.n	8002a32 <HAL_UART_Transmit+0x11c>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2221      	movs	r2, #33	; 0x21
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800296a:	f7fe f9a1 	bl	8000cb0 <HAL_GetTick>
 800296e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	88fa      	ldrh	r2, [r7, #6]
 8002974:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	88fa      	ldrh	r2, [r7, #6]
 800297a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002984:	d108      	bne.n	8002998 <HAL_UART_Transmit+0x82>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d104      	bne.n	8002998 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	61bb      	str	r3, [r7, #24]
 8002996:	e003      	b.n	80029a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800299c:	2300      	movs	r3, #0
 800299e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80029a8:	e02a      	b.n	8002a00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2200      	movs	r2, #0
 80029b2:	2180      	movs	r1, #128	; 0x80
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 fb54 	bl	8003062 <UART_WaitOnFlagUntilTimeout>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e036      	b.n	8002a32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10b      	bne.n	80029e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	3302      	adds	r3, #2
 80029de:	61bb      	str	r3, [r7, #24]
 80029e0:	e007      	b.n	80029f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	781a      	ldrb	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	3301      	adds	r3, #1
 80029f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1cf      	bne.n	80029aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2200      	movs	r2, #0
 8002a12:	2140      	movs	r1, #64	; 0x40
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 fb24 	bl	8003062 <UART_WaitOnFlagUntilTimeout>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e006      	b.n	8002a32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	e000      	b.n	8002a32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a30:	2302      	movs	r3, #2
  }
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3720      	adds	r7, #32
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b084      	sub	sp, #16
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	4613      	mov	r3, r2
 8002a46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b20      	cmp	r3, #32
 8002a52:	d11d      	bne.n	8002a90 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <HAL_UART_Receive_DMA+0x26>
 8002a5a:	88fb      	ldrh	r3, [r7, #6]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e016      	b.n	8002a92 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d101      	bne.n	8002a72 <HAL_UART_Receive_DMA+0x38>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e00f      	b.n	8002a92 <HAL_UART_Receive_DMA+0x58>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8002a80:	88fb      	ldrh	r3, [r7, #6]
 8002a82:	461a      	mov	r2, r3
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 fb36 	bl	80030f8 <UART_Start_Receive_DMA>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	e000      	b.n	8002a92 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002a90:	2302      	movs	r3, #2
  }
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b084      	sub	sp, #16
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	bf14      	ite	ne
 8002ab4:	2301      	movne	r3, #1
 8002ab6:	2300      	moveq	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b21      	cmp	r3, #33	; 0x21
 8002ac6:	d116      	bne.n	8002af6 <HAL_UART_DMAStop+0x5c>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d013      	beq.n	8002af6 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695a      	ldr	r2, [r3, #20]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002adc:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d004      	beq.n	8002af0 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe fad5 	bl	800109a <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 fb65 	bl	80031c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bf14      	ite	ne
 8002b04:	2301      	movne	r3, #1
 8002b06:	2300      	moveq	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b22      	cmp	r3, #34	; 0x22
 8002b16:	d116      	bne.n	8002b46 <HAL_UART_DMAStop+0xac>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d013      	beq.n	8002b46 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695a      	ldr	r2, [r3, #20]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b2c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d004      	beq.n	8002b40 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fe faad 	bl	800109a <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 fb52 	bl	80031ea <UART_EndRxTransfer>
  }

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	; 0x28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10d      	bne.n	8002ba2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	f003 0320 	and.w	r3, r3, #32
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_UART_IRQHandler+0x52>
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	f003 0320 	and.w	r3, r3, #32
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fbcc 	bl	8003338 <UART_Receive_IT>
      return;
 8002ba0:	e17b      	b.n	8002e9a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 80b1 	beq.w	8002d0c <HAL_UART_IRQHandler+0x1bc>
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d105      	bne.n	8002bc0 <HAL_UART_IRQHandler+0x70>
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 80a6 	beq.w	8002d0c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <HAL_UART_IRQHandler+0x90>
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	f043 0201 	orr.w	r2, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <HAL_UART_IRQHandler+0xb0>
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	f043 0202 	orr.w	r2, r3, #2
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <HAL_UART_IRQHandler+0xd0>
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	f043 0204 	orr.w	r2, r3, #4
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00f      	beq.n	8002c4a <HAL_UART_IRQHandler+0xfa>
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d104      	bne.n	8002c3e <HAL_UART_IRQHandler+0xee>
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f043 0208 	orr.w	r2, r3, #8
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 811e 	beq.w	8002e90 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	f003 0320 	and.w	r3, r3, #32
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d007      	beq.n	8002c6e <HAL_UART_IRQHandler+0x11e>
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	f003 0320 	and.w	r3, r3, #32
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d002      	beq.n	8002c6e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 fb65 	bl	8003338 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	bf14      	ite	ne
 8002c7c:	2301      	movne	r3, #1
 8002c7e:	2300      	moveq	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d102      	bne.n	8002c96 <HAL_UART_IRQHandler+0x146>
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d031      	beq.n	8002cfa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 faa7 	bl	80031ea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d023      	beq.n	8002cf2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695a      	ldr	r2, [r3, #20]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cb8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d013      	beq.n	8002cea <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	4a76      	ldr	r2, [pc, #472]	; (8002ea0 <HAL_UART_IRQHandler+0x350>)
 8002cc8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fe fa1e 	bl	8001110 <HAL_DMA_Abort_IT>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d016      	beq.n	8002d08 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce8:	e00e      	b.n	8002d08 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f8f5 	bl	8002eda <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf0:	e00a      	b.n	8002d08 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f8f1 	bl	8002eda <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf8:	e006      	b.n	8002d08 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f8ed 	bl	8002eda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d06:	e0c3      	b.n	8002e90 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d08:	bf00      	nop
    return;
 8002d0a:	e0c1      	b.n	8002e90 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	f040 80a1 	bne.w	8002e58 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 809b 	beq.w	8002e58 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 8095 	beq.w	8002e58 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d04e      	beq.n	8002df0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002d5c:	8a3b      	ldrh	r3, [r7, #16]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8098 	beq.w	8002e94 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d68:	8a3a      	ldrh	r2, [r7, #16]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	f080 8092 	bcs.w	8002e94 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	8a3a      	ldrh	r2, [r7, #16]
 8002d74:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	2b20      	cmp	r3, #32
 8002d7e:	d02b      	beq.n	8002dd8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d8e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695a      	ldr	r2, [r3, #20]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0201 	bic.w	r2, r2, #1
 8002d9e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695a      	ldr	r2, [r3, #20]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dae:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0210 	bic.w	r2, r2, #16
 8002dcc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fe f961 	bl	800109a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	4619      	mov	r1, r3
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f87f 	bl	8002eec <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002dee:	e051      	b.n	8002e94 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d047      	beq.n	8002e98 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002e08:	8a7b      	ldrh	r3, [r7, #18]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d044      	beq.n	8002e98 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e1c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0201 	bic.w	r2, r2, #1
 8002e2c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0210 	bic.w	r2, r2, #16
 8002e4a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e4c:	8a7b      	ldrh	r3, [r7, #18]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f84b 	bl	8002eec <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002e56:	e01f      	b.n	8002e98 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d008      	beq.n	8002e74 <HAL_UART_IRQHandler+0x324>
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f9fc 	bl	800326a <UART_Transmit_IT>
    return;
 8002e72:	e012      	b.n	8002e9a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00d      	beq.n	8002e9a <HAL_UART_IRQHandler+0x34a>
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 fa3d 	bl	8003308 <UART_EndTransmit_IT>
    return;
 8002e8e:	e004      	b.n	8002e9a <HAL_UART_IRQHandler+0x34a>
    return;
 8002e90:	bf00      	nop
 8002e92:	e002      	b.n	8002e9a <HAL_UART_IRQHandler+0x34a>
      return;
 8002e94:	bf00      	nop
 8002e96:	e000      	b.n	8002e9a <HAL_UART_IRQHandler+0x34a>
      return;
 8002e98:	bf00      	nop
  }
}
 8002e9a:	3728      	adds	r7, #40	; 0x28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	08003243 	.word	0x08003243

08002ea4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr

08002eda <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr

08002f02 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0320 	and.w	r3, r3, #32
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d12a      	bne.n	8002f74 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f32:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695a      	ldr	r2, [r3, #20]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0201 	bic.w	r2, r2, #1
 8002f42:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695a      	ldr	r2, [r3, #20]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f52:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d107      	bne.n	8002f74 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0210 	bic.w	r2, r2, #16
 8002f72:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d106      	bne.n	8002f8a <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f80:	4619      	mov	r1, r3
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f7ff ffb2 	bl	8002eec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f88:	e002      	b.n	8002f90 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f7ff ff93 	bl	8002eb6 <HAL_UART_RxCpltCallback>
}
 8002f90:	bf00      	nop
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d108      	bne.n	8002fc0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fb2:	085b      	lsrs	r3, r3, #1
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f7ff ff97 	bl	8002eec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002fbe:	e002      	b.n	8002fc6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f7ff ff81 	bl	8002ec8 <HAL_UART_RxHalfCpltCallback>
}
 8002fc6:	bf00      	nop
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	bf14      	ite	ne
 8002fee:	2301      	movne	r3, #1
 8002ff0:	2300      	moveq	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b21      	cmp	r3, #33	; 0x21
 8003000:	d108      	bne.n	8003014 <UART_DMAError+0x46>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2200      	movs	r2, #0
 800300c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800300e:	68b8      	ldr	r0, [r7, #8]
 8003010:	f000 f8d6 	bl	80031c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301e:	2b00      	cmp	r3, #0
 8003020:	bf14      	ite	ne
 8003022:	2301      	movne	r3, #1
 8003024:	2300      	moveq	r3, #0
 8003026:	b2db      	uxtb	r3, r3
 8003028:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b22      	cmp	r3, #34	; 0x22
 8003034:	d108      	bne.n	8003048 <UART_DMAError+0x7a>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2200      	movs	r2, #0
 8003040:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003042:	68b8      	ldr	r0, [r7, #8]
 8003044:	f000 f8d1 	bl	80031ea <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	f043 0210 	orr.w	r2, r3, #16
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003054:	68b8      	ldr	r0, [r7, #8]
 8003056:	f7ff ff40 	bl	8002eda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	603b      	str	r3, [r7, #0]
 800306e:	4613      	mov	r3, r2
 8003070:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003072:	e02c      	b.n	80030ce <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307a:	d028      	beq.n	80030ce <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d007      	beq.n	8003092 <UART_WaitOnFlagUntilTimeout+0x30>
 8003082:	f7fd fe15 	bl	8000cb0 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	429a      	cmp	r2, r3
 8003090:	d21d      	bcs.n	80030ce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80030a0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695a      	ldr	r2, [r3, #20]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0201 	bic.w	r2, r2, #1
 80030b0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e00f      	b.n	80030ee <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	4013      	ands	r3, r2
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	429a      	cmp	r2, r3
 80030dc:	bf0c      	ite	eq
 80030de:	2301      	moveq	r3, #1
 80030e0:	2300      	movne	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d0c3      	beq.n	8003074 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	4613      	mov	r3, r2
 8003104:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	88fa      	ldrh	r2, [r7, #6]
 8003110:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2222      	movs	r2, #34	; 0x22
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003124:	4a23      	ldr	r2, [pc, #140]	; (80031b4 <UART_Start_Receive_DMA+0xbc>)
 8003126:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	4a22      	ldr	r2, [pc, #136]	; (80031b8 <UART_Start_Receive_DMA+0xc0>)
 800312e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003134:	4a21      	ldr	r2, [pc, #132]	; (80031bc <UART_Start_Receive_DMA+0xc4>)
 8003136:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313c:	2200      	movs	r2, #0
 800313e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003140:	f107 0308 	add.w	r3, r7, #8
 8003144:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3304      	adds	r3, #4
 8003150:	4619      	mov	r1, r3
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	f7fd ff40 	bl	8000fdc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800315c:	2300      	movs	r3, #0
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003188:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695a      	ldr	r2, [r3, #20]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f042 0201 	orr.w	r2, r2, #1
 8003198:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031a8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	08002f03 	.word	0x08002f03
 80031b8:	08002f99 	.word	0x08002f99
 80031bc:	08002fcf 	.word	0x08002fcf

080031c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80031d6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr

080031ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003200:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0201 	bic.w	r2, r2, #1
 8003210:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	2b01      	cmp	r3, #1
 8003218:	d107      	bne.n	800322a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0210 	bic.w	r2, r2, #16
 8003228:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2220      	movs	r2, #32
 800322e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr

08003242 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b084      	sub	sp, #16
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f7ff fe3c 	bl	8002eda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003262:	bf00      	nop
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800326a:	b480      	push	{r7}
 800326c:	b085      	sub	sp, #20
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b21      	cmp	r3, #33	; 0x21
 800327c:	d13e      	bne.n	80032fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003286:	d114      	bne.n	80032b2 <UART_Transmit_IT+0x48>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d110      	bne.n	80032b2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	1c9a      	adds	r2, r3, #2
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	621a      	str	r2, [r3, #32]
 80032b0:	e008      	b.n	80032c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	1c59      	adds	r1, r3, #1
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6211      	str	r1, [r2, #32]
 80032bc:	781a      	ldrb	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	4619      	mov	r1, r3
 80032d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10f      	bne.n	80032f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	e000      	b.n	80032fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032fc:	2302      	movs	r3, #2
  }
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr

08003308 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800331e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7ff fdbb 	bl	8002ea4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b22      	cmp	r3, #34	; 0x22
 800334a:	f040 8099 	bne.w	8003480 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003356:	d117      	bne.n	8003388 <UART_Receive_IT+0x50>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d113      	bne.n	8003388 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003368:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	b29b      	uxth	r3, r3
 8003372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003376:	b29a      	uxth	r2, r3
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003380:	1c9a      	adds	r2, r3, #2
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	629a      	str	r2, [r3, #40]	; 0x28
 8003386:	e026      	b.n	80033d6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800338e:	2300      	movs	r3, #0
 8003390:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800339a:	d007      	beq.n	80033ac <UART_Receive_IT+0x74>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10a      	bne.n	80033ba <UART_Receive_IT+0x82>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d106      	bne.n	80033ba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	701a      	strb	r2, [r3, #0]
 80033b8:	e008      	b.n	80033cc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29b      	uxth	r3, r3
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	4619      	mov	r1, r3
 80033e4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d148      	bne.n	800347c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0220 	bic.w	r2, r2, #32
 80033f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003408:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695a      	ldr	r2, [r3, #20]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0201 	bic.w	r2, r2, #1
 8003418:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2220      	movs	r2, #32
 800341e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	2b01      	cmp	r3, #1
 8003428:	d123      	bne.n	8003472 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0210 	bic.w	r2, r2, #16
 800343e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0310 	and.w	r3, r3, #16
 800344a:	2b10      	cmp	r3, #16
 800344c:	d10a      	bne.n	8003464 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003468:	4619      	mov	r1, r3
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7ff fd3e 	bl	8002eec <HAL_UARTEx_RxEventCallback>
 8003470:	e002      	b.n	8003478 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7ff fd1f 	bl	8002eb6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003478:	2300      	movs	r3, #0
 800347a:	e002      	b.n	8003482 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	e000      	b.n	8003482 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003480:	2302      	movs	r3, #2
  }
}
 8003482:	4618      	mov	r0, r3
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80034c6:	f023 030c 	bic.w	r3, r3, #12
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	68b9      	ldr	r1, [r7, #8]
 80034d0:	430b      	orrs	r3, r1
 80034d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699a      	ldr	r2, [r3, #24]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a2c      	ldr	r2, [pc, #176]	; (80035a0 <UART_SetConfig+0x114>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d103      	bne.n	80034fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034f4:	f7fe fd46 	bl	8001f84 <HAL_RCC_GetPCLK2Freq>
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	e002      	b.n	8003502 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80034fc:	f7fe fd2e 	bl	8001f5c <HAL_RCC_GetPCLK1Freq>
 8003500:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	009a      	lsls	r2, r3, #2
 800350c:	441a      	add	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	fbb2 f3f3 	udiv	r3, r2, r3
 8003518:	4a22      	ldr	r2, [pc, #136]	; (80035a4 <UART_SetConfig+0x118>)
 800351a:	fba2 2303 	umull	r2, r3, r2, r3
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	0119      	lsls	r1, r3, #4
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	009a      	lsls	r2, r3, #2
 800352c:	441a      	add	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	fbb2 f2f3 	udiv	r2, r2, r3
 8003538:	4b1a      	ldr	r3, [pc, #104]	; (80035a4 <UART_SetConfig+0x118>)
 800353a:	fba3 0302 	umull	r0, r3, r3, r2
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	2064      	movs	r0, #100	; 0x64
 8003542:	fb00 f303 	mul.w	r3, r0, r3
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	3332      	adds	r3, #50	; 0x32
 800354c:	4a15      	ldr	r2, [pc, #84]	; (80035a4 <UART_SetConfig+0x118>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003558:	4419      	add	r1, r3
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	009a      	lsls	r2, r3, #2
 8003564:	441a      	add	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003570:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <UART_SetConfig+0x118>)
 8003572:	fba3 0302 	umull	r0, r3, r3, r2
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	2064      	movs	r0, #100	; 0x64
 800357a:	fb00 f303 	mul.w	r3, r0, r3
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	3332      	adds	r3, #50	; 0x32
 8003584:	4a07      	ldr	r2, [pc, #28]	; (80035a4 <UART_SetConfig+0x118>)
 8003586:	fba2 2303 	umull	r2, r3, r2, r3
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	f003 020f 	and.w	r2, r3, #15
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	440a      	add	r2, r1
 8003596:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003598:	bf00      	nop
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40013800 	.word	0x40013800
 80035a4:	51eb851f 	.word	0x51eb851f

080035a8 <__libc_init_array>:
 80035a8:	b570      	push	{r4, r5, r6, lr}
 80035aa:	2600      	movs	r6, #0
 80035ac:	4d0c      	ldr	r5, [pc, #48]	; (80035e0 <__libc_init_array+0x38>)
 80035ae:	4c0d      	ldr	r4, [pc, #52]	; (80035e4 <__libc_init_array+0x3c>)
 80035b0:	1b64      	subs	r4, r4, r5
 80035b2:	10a4      	asrs	r4, r4, #2
 80035b4:	42a6      	cmp	r6, r4
 80035b6:	d109      	bne.n	80035cc <__libc_init_array+0x24>
 80035b8:	f000 f822 	bl	8003600 <_init>
 80035bc:	2600      	movs	r6, #0
 80035be:	4d0a      	ldr	r5, [pc, #40]	; (80035e8 <__libc_init_array+0x40>)
 80035c0:	4c0a      	ldr	r4, [pc, #40]	; (80035ec <__libc_init_array+0x44>)
 80035c2:	1b64      	subs	r4, r4, r5
 80035c4:	10a4      	asrs	r4, r4, #2
 80035c6:	42a6      	cmp	r6, r4
 80035c8:	d105      	bne.n	80035d6 <__libc_init_array+0x2e>
 80035ca:	bd70      	pop	{r4, r5, r6, pc}
 80035cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80035d0:	4798      	blx	r3
 80035d2:	3601      	adds	r6, #1
 80035d4:	e7ee      	b.n	80035b4 <__libc_init_array+0xc>
 80035d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80035da:	4798      	blx	r3
 80035dc:	3601      	adds	r6, #1
 80035de:	e7f2      	b.n	80035c6 <__libc_init_array+0x1e>
 80035e0:	08003640 	.word	0x08003640
 80035e4:	08003640 	.word	0x08003640
 80035e8:	08003640 	.word	0x08003640
 80035ec:	08003644 	.word	0x08003644

080035f0 <memset>:
 80035f0:	4603      	mov	r3, r0
 80035f2:	4402      	add	r2, r0
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d100      	bne.n	80035fa <memset+0xa>
 80035f8:	4770      	bx	lr
 80035fa:	f803 1b01 	strb.w	r1, [r3], #1
 80035fe:	e7f9      	b.n	80035f4 <memset+0x4>

08003600 <_init>:
 8003600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003602:	bf00      	nop
 8003604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003606:	bc08      	pop	{r3}
 8003608:	469e      	mov	lr, r3
 800360a:	4770      	bx	lr

0800360c <_fini>:
 800360c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360e:	bf00      	nop
 8003610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003612:	bc08      	pop	{r3}
 8003614:	469e      	mov	lr, r3
 8003616:	4770      	bx	lr
