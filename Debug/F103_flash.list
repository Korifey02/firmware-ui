
F103_flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d08  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003e14  08003e14  00013e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e3c  08003e3c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003e3c  08003e3c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e3c  08003e3c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e3c  08003e3c  00013e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e40  08003e40  00013e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003e44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  20000010  08003e54  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  08003e54  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009bf0  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ad7  00000000  00000000  00029c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  0002b700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d8  00000000  00000000  0002c070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016de7  00000000  00000000  0002c948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f2c  00000000  00000000  0004372f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083844  00000000  00000000  0004d65b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0e9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025cc  00000000  00000000  000d0ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003dfc 	.word	0x08003dfc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003dfc 	.word	0x08003dfc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f001 f817 	bl	8001184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f965 	bl	8000424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fa5b 	bl	8000614 <MX_GPIO_Init>
  MX_DMA_Init();
 800015e:	f000 fa33 	bl	80005c8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f9dd 	bl	8000520 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000166:	f000 f9a5 	bl	80004b4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800016a:	f000 fa03 	bl	8000574 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 800016e:	4ba2      	ldr	r3, [pc, #648]	; (80003f8 <main+0x2ac>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	68da      	ldr	r2, [r3, #12]
 8000174:	4ba0      	ldr	r3, [pc, #640]	; (80003f8 <main+0x2ac>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	f042 0210 	orr.w	r2, r2, #16
 800017c:	60da      	str	r2, [r3, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RX = 0;
 800017e:	4b9f      	ldr	r3, [pc, #636]	; (80003fc <main+0x2b0>)
 8000180:	2200      	movs	r2, #0
 8000182:	701a      	strb	r2, [r3, #0]
	  memset(receive_buffer, 0, BUFFER_SIZE);
 8000184:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000188:	2100      	movs	r1, #0
 800018a:	489d      	ldr	r0, [pc, #628]	; (8000400 <main+0x2b4>)
 800018c:	f003 fe2e 	bl	8003dec <memset>
	  HAL_UART_Receive_DMA(&huart1, receive_buffer, 20);
 8000190:	2214      	movs	r2, #20
 8000192:	499b      	ldr	r1, [pc, #620]	; (8000400 <main+0x2b4>)
 8000194:	4898      	ldr	r0, [pc, #608]	; (80003f8 <main+0x2ac>)
 8000196:	f003 f84e 	bl	8003236 <HAL_UART_Receive_DMA>
	  while(!RX) {}
 800019a:	bf00      	nop
 800019c:	4b97      	ldr	r3, [pc, #604]	; (80003fc <main+0x2b0>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d0fb      	beq.n	800019c <main+0x50>
	  HAL_UART_DMAStop(&huart1);
 80001a4:	4894      	ldr	r0, [pc, #592]	; (80003f8 <main+0x2ac>)
 80001a6:	f003 f876 	bl	8003296 <HAL_UART_DMAStop>
	  //HAL_UART_Transmit(&huart1,receive_buffer,20,5000);

	  switch(receive_buffer[0])
 80001aa:	4b95      	ldr	r3, [pc, #596]	; (8000400 <main+0x2b4>)
 80001ac:	781b      	ldrb	r3, [r3, #0]
 80001ae:	2b1a      	cmp	r3, #26
 80001b0:	d003      	beq.n	80001ba <main+0x6e>
 80001b2:	2b1b      	cmp	r3, #27
 80001b4:	f000 809d 	beq.w	80002f2 <main+0x1a6>
 80001b8:	e11d      	b.n	80003f6 <main+0x2aa>
	  {
	  	  case 0x1A : // START_READ
	  		START_SECTOR_OF_FIRMWARE = receive_buffer[1];
 80001ba:	4b91      	ldr	r3, [pc, #580]	; (8000400 <main+0x2b4>)
 80001bc:	785a      	ldrb	r2, [r3, #1]
 80001be:	4b91      	ldr	r3, [pc, #580]	; (8000404 <main+0x2b8>)
 80001c0:	701a      	strb	r2, [r3, #0]
	  		W25qxx_Init(); // initial flash
 80001c2:	f000 fd11 	bl	8000be8 <W25qxx_Init>

	  		//page were locate size of firmware
	  		uint32_t adr_firmw_size = 16 * START_SECTOR_OF_FIRMWARE;
 80001c6:	4b8f      	ldr	r3, [pc, #572]	; (8000404 <main+0x2b8>)
 80001c8:	781b      	ldrb	r3, [r3, #0]
 80001ca:	011b      	lsls	r3, r3, #4
 80001cc:	60fb      	str	r3, [r7, #12]

	  		memset(receive_buffer, 0, 4);
 80001ce:	2204      	movs	r2, #4
 80001d0:	2100      	movs	r1, #0
 80001d2:	488b      	ldr	r0, [pc, #556]	; (8000400 <main+0x2b4>)
 80001d4:	f003 fe0a 	bl	8003dec <memset>
	  		// read size of firmware
	  		W25qxx_ReadPage(receive_buffer, adr_firmw_size, 0, 3);
 80001d8:	2303      	movs	r3, #3
 80001da:	2200      	movs	r2, #0
 80001dc:	68f9      	ldr	r1, [r7, #12]
 80001de:	4888      	ldr	r0, [pc, #544]	; (8000400 <main+0x2b4>)
 80001e0:	f000 ff30 	bl	8001044 <W25qxx_ReadPage>

	  		firmware_size = (uint32_t)receive_buffer[0];
 80001e4:	4b86      	ldr	r3, [pc, #536]	; (8000400 <main+0x2b4>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	461a      	mov	r2, r3
 80001ea:	4b87      	ldr	r3, [pc, #540]	; (8000408 <main+0x2bc>)
 80001ec:	601a      	str	r2, [r3, #0]
	  		firmware_size <<= 8;
 80001ee:	4b86      	ldr	r3, [pc, #536]	; (8000408 <main+0x2bc>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	021b      	lsls	r3, r3, #8
 80001f4:	4a84      	ldr	r2, [pc, #528]	; (8000408 <main+0x2bc>)
 80001f6:	6013      	str	r3, [r2, #0]
	  		firmware_size += (uint32_t)receive_buffer[1];
 80001f8:	4b81      	ldr	r3, [pc, #516]	; (8000400 <main+0x2b4>)
 80001fa:	785b      	ldrb	r3, [r3, #1]
 80001fc:	461a      	mov	r2, r3
 80001fe:	4b82      	ldr	r3, [pc, #520]	; (8000408 <main+0x2bc>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4413      	add	r3, r2
 8000204:	4a80      	ldr	r2, [pc, #512]	; (8000408 <main+0x2bc>)
 8000206:	6013      	str	r3, [r2, #0]
	  		firmware_size <<= 8;
 8000208:	4b7f      	ldr	r3, [pc, #508]	; (8000408 <main+0x2bc>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	021b      	lsls	r3, r3, #8
 800020e:	4a7e      	ldr	r2, [pc, #504]	; (8000408 <main+0x2bc>)
 8000210:	6013      	str	r3, [r2, #0]
	  		firmware_size += (uint32_t)receive_buffer[2];
 8000212:	4b7b      	ldr	r3, [pc, #492]	; (8000400 <main+0x2b4>)
 8000214:	789b      	ldrb	r3, [r3, #2]
 8000216:	461a      	mov	r2, r3
 8000218:	4b7b      	ldr	r3, [pc, #492]	; (8000408 <main+0x2bc>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4413      	add	r3, r2
 800021e:	4a7a      	ldr	r2, [pc, #488]	; (8000408 <main+0x2bc>)
 8000220:	6013      	str	r3, [r2, #0]

	  		// make FIRM_SIZE
	  		transmit_buffer[0] = 0x1C;
 8000222:	4b7a      	ldr	r3, [pc, #488]	; (800040c <main+0x2c0>)
 8000224:	221c      	movs	r2, #28
 8000226:	701a      	strb	r2, [r3, #0]
	  		transmit_buffer[1] = receive_buffer[0];
 8000228:	4b75      	ldr	r3, [pc, #468]	; (8000400 <main+0x2b4>)
 800022a:	781a      	ldrb	r2, [r3, #0]
 800022c:	4b77      	ldr	r3, [pc, #476]	; (800040c <main+0x2c0>)
 800022e:	705a      	strb	r2, [r3, #1]
	  		transmit_buffer[2] = receive_buffer[1];
 8000230:	4b73      	ldr	r3, [pc, #460]	; (8000400 <main+0x2b4>)
 8000232:	785a      	ldrb	r2, [r3, #1]
 8000234:	4b75      	ldr	r3, [pc, #468]	; (800040c <main+0x2c0>)
 8000236:	709a      	strb	r2, [r3, #2]
	  		transmit_buffer[3] = receive_buffer[2];
 8000238:	4b71      	ldr	r3, [pc, #452]	; (8000400 <main+0x2b4>)
 800023a:	789a      	ldrb	r2, [r3, #2]
 800023c:	4b73      	ldr	r3, [pc, #460]	; (800040c <main+0x2c0>)
 800023e:	70da      	strb	r2, [r3, #3]
	  		HAL_UART_Transmit(&huart1,transmit_buffer,4,5000); // send FIRM_SIZE
 8000240:	f241 3388 	movw	r3, #5000	; 0x1388
 8000244:	2204      	movs	r2, #4
 8000246:	4971      	ldr	r1, [pc, #452]	; (800040c <main+0x2c0>)
 8000248:	486b      	ldr	r0, [pc, #428]	; (80003f8 <main+0x2ac>)
 800024a:	f002 ff62 	bl	8003112 <HAL_UART_Transmit>

	  		HAL_Delay(5);
 800024e:	2005      	movs	r0, #5
 8000250:	f000 fffa 	bl	8001248 <HAL_Delay>

	  		SIZE_BLOCK = DEFAULT_SIZE_WRITE_STM;
 8000254:	4b6e      	ldr	r3, [pc, #440]	; (8000410 <main+0x2c4>)
 8000256:	2280      	movs	r2, #128	; 0x80
 8000258:	601a      	str	r2, [r3, #0]

	  		count_of_read = firmware_size / SIZE_BLOCK; // count of read from flash
 800025a:	4b6b      	ldr	r3, [pc, #428]	; (8000408 <main+0x2bc>)
 800025c:	681a      	ldr	r2, [r3, #0]
 800025e:	4b6c      	ldr	r3, [pc, #432]	; (8000410 <main+0x2c4>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	fbb2 f3f3 	udiv	r3, r2, r3
 8000266:	4a6b      	ldr	r2, [pc, #428]	; (8000414 <main+0x2c8>)
 8000268:	6013      	str	r3, [r2, #0]

	  		// ******* start read firmware ************
			for (uint32_t i = 0 ; i <= count_of_read; i++)
 800026a:	2300      	movs	r3, #0
 800026c:	61fb      	str	r3, [r7, #28]
 800026e:	e03a      	b.n	80002e6 <main+0x19a>
			{
			  // change SIZE_BLOCK if last block has less size
			  if (i == count_of_read)
 8000270:	4b68      	ldr	r3, [pc, #416]	; (8000414 <main+0x2c8>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	69fa      	ldr	r2, [r7, #28]
 8000276:	429a      	cmp	r2, r3
 8000278:	d105      	bne.n	8000286 <main+0x13a>
			  {
				  SIZE_BLOCK = firmware_size % (uint32_t)DEFAULT_SIZE_WRITE_STM;
 800027a:	4b63      	ldr	r3, [pc, #396]	; (8000408 <main+0x2bc>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000282:	4a63      	ldr	r2, [pc, #396]	; (8000410 <main+0x2c4>)
 8000284:	6013      	str	r3, [r2, #0]
			  }

			  memset(receive_buffer, 0, BUFFER_SIZE); //clear buffer for firmware
 8000286:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800028a:	2100      	movs	r1, #0
 800028c:	485c      	ldr	r0, [pc, #368]	; (8000400 <main+0x2b4>)
 800028e:	f003 fdad 	bl	8003dec <memset>
			  int32_t page_start =  DEFAULT_SIZE_WRITE_STM * i + 4096 * (START_SECTOR_OF_FIRMWARE + 1); // number of start page
 8000292:	69fb      	ldr	r3, [r7, #28]
 8000294:	01db      	lsls	r3, r3, #7
 8000296:	4a5b      	ldr	r2, [pc, #364]	; (8000404 <main+0x2b8>)
 8000298:	7812      	ldrb	r2, [r2, #0]
 800029a:	3201      	adds	r2, #1
 800029c:	0312      	lsls	r2, r2, #12
 800029e:	4413      	add	r3, r2
 80002a0:	60bb      	str	r3, [r7, #8]
			  //if (i >= 1)
				//  page_start += i;

			  W25qxx_ReadBytes(receive_buffer + 2, page_start, SIZE_BLOCK);
 80002a2:	485d      	ldr	r0, [pc, #372]	; (8000418 <main+0x2cc>)
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	4a5a      	ldr	r2, [pc, #360]	; (8000410 <main+0x2c4>)
 80002a8:	6812      	ldr	r2, [r2, #0]
 80002aa:	4619      	mov	r1, r3
 80002ac:	f000 fe72 	bl	8000f94 <W25qxx_ReadBytes>

			  receive_buffer[0] = 0x1F;
 80002b0:	4b53      	ldr	r3, [pc, #332]	; (8000400 <main+0x2b4>)
 80002b2:	221f      	movs	r2, #31
 80002b4:	701a      	strb	r2, [r3, #0]
			  receive_buffer[1] = SIZE_BLOCK;
 80002b6:	4b56      	ldr	r3, [pc, #344]	; (8000410 <main+0x2c4>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	4b50      	ldr	r3, [pc, #320]	; (8000400 <main+0x2b4>)
 80002be:	705a      	strb	r2, [r3, #1]

			  uint8_t rec_size = SIZE_BLOCK + 2;
 80002c0:	4b53      	ldr	r3, [pc, #332]	; (8000410 <main+0x2c4>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	3302      	adds	r3, #2
 80002c8:	71fb      	strb	r3, [r7, #7]

			  HAL_UART_Transmit(&huart1,receive_buffer,rec_size,5000); // send FIRM_DATA_READ
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	b29a      	uxth	r2, r3
 80002ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80002d2:	494b      	ldr	r1, [pc, #300]	; (8000400 <main+0x2b4>)
 80002d4:	4848      	ldr	r0, [pc, #288]	; (80003f8 <main+0x2ac>)
 80002d6:	f002 ff1c 	bl	8003112 <HAL_UART_Transmit>

			  HAL_Delay(2);
 80002da:	2002      	movs	r0, #2
 80002dc:	f000 ffb4 	bl	8001248 <HAL_Delay>
			for (uint32_t i = 0 ; i <= count_of_read; i++)
 80002e0:	69fb      	ldr	r3, [r7, #28]
 80002e2:	3301      	adds	r3, #1
 80002e4:	61fb      	str	r3, [r7, #28]
 80002e6:	4b4b      	ldr	r3, [pc, #300]	; (8000414 <main+0x2c8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	69fa      	ldr	r2, [r7, #28]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	d9bf      	bls.n	8000270 <main+0x124>
			}


	  	  break;
 80002f0:	e081      	b.n	80003f6 <main+0x2aa>

	  	  case 0x1B : // START_WRITE

	  		SIZE_BLOCK = 256;
 80002f2:	4b47      	ldr	r3, [pc, #284]	; (8000410 <main+0x2c4>)
 80002f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002f8:	601a      	str	r2, [r3, #0]
	  		START_SECTOR_OF_FIRMWARE = receive_buffer[1];
 80002fa:	4b41      	ldr	r3, [pc, #260]	; (8000400 <main+0x2b4>)
 80002fc:	785a      	ldrb	r2, [r3, #1]
 80002fe:	4b41      	ldr	r3, [pc, #260]	; (8000404 <main+0x2b8>)
 8000300:	701a      	strb	r2, [r3, #0]

	  		firmware_size = (uint32_t)receive_buffer[2];
 8000302:	4b3f      	ldr	r3, [pc, #252]	; (8000400 <main+0x2b4>)
 8000304:	789b      	ldrb	r3, [r3, #2]
 8000306:	461a      	mov	r2, r3
 8000308:	4b3f      	ldr	r3, [pc, #252]	; (8000408 <main+0x2bc>)
 800030a:	601a      	str	r2, [r3, #0]
			firmware_size <<= 8;
 800030c:	4b3e      	ldr	r3, [pc, #248]	; (8000408 <main+0x2bc>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	021b      	lsls	r3, r3, #8
 8000312:	4a3d      	ldr	r2, [pc, #244]	; (8000408 <main+0x2bc>)
 8000314:	6013      	str	r3, [r2, #0]
			firmware_size += (uint32_t)receive_buffer[3];
 8000316:	4b3a      	ldr	r3, [pc, #232]	; (8000400 <main+0x2b4>)
 8000318:	78db      	ldrb	r3, [r3, #3]
 800031a:	461a      	mov	r2, r3
 800031c:	4b3a      	ldr	r3, [pc, #232]	; (8000408 <main+0x2bc>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4413      	add	r3, r2
 8000322:	4a39      	ldr	r2, [pc, #228]	; (8000408 <main+0x2bc>)
 8000324:	6013      	str	r3, [r2, #0]
			firmware_size <<= 8;
 8000326:	4b38      	ldr	r3, [pc, #224]	; (8000408 <main+0x2bc>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	021b      	lsls	r3, r3, #8
 800032c:	4a36      	ldr	r2, [pc, #216]	; (8000408 <main+0x2bc>)
 800032e:	6013      	str	r3, [r2, #0]
			firmware_size += (uint32_t)receive_buffer[4];
 8000330:	4b33      	ldr	r3, [pc, #204]	; (8000400 <main+0x2b4>)
 8000332:	791b      	ldrb	r3, [r3, #4]
 8000334:	461a      	mov	r2, r3
 8000336:	4b34      	ldr	r3, [pc, #208]	; (8000408 <main+0x2bc>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	4413      	add	r3, r2
 800033c:	4a32      	ldr	r2, [pc, #200]	; (8000408 <main+0x2bc>)
 800033e:	6013      	str	r3, [r2, #0]

			W25qxx_Init(); // initial flash
 8000340:	f000 fc52 	bl	8000be8 <W25qxx_Init>

			// make WRITE_READY
			transmit_buffer[0] = 0x1D;
 8000344:	4b31      	ldr	r3, [pc, #196]	; (800040c <main+0x2c0>)
 8000346:	221d      	movs	r2, #29
 8000348:	701a      	strb	r2, [r3, #0]
			transmit_buffer[1] = 0x10;
 800034a:	4b30      	ldr	r3, [pc, #192]	; (800040c <main+0x2c0>)
 800034c:	2210      	movs	r2, #16
 800034e:	705a      	strb	r2, [r3, #1]

			//uint32_t count_of_pages = (firmware_size / 256) + ((firmware_size % 256) ? 1 : 0);
			uint32_t count_of_sectors = (firmware_size / 4096) + ((firmware_size % 4096) ? 1 : 0);
 8000350:	4b2d      	ldr	r3, [pc, #180]	; (8000408 <main+0x2bc>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	0b1b      	lsrs	r3, r3, #12
 8000356:	4a2c      	ldr	r2, [pc, #176]	; (8000408 <main+0x2bc>)
 8000358:	6812      	ldr	r2, [r2, #0]
 800035a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800035e:	2a00      	cmp	r2, #0
 8000360:	d001      	beq.n	8000366 <main+0x21a>
 8000362:	2201      	movs	r2, #1
 8000364:	e000      	b.n	8000368 <main+0x21c>
 8000366:	2200      	movs	r2, #0
 8000368:	4413      	add	r3, r2
 800036a:	603b      	str	r3, [r7, #0]
			count_of_sectors++;
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	3301      	adds	r3, #1
 8000370:	603b      	str	r3, [r7, #0]

			HAL_UART_Transmit(&huart2,&count_of_sectors,1,5000);
 8000372:	4639      	mov	r1, r7
 8000374:	f241 3388 	movw	r3, #5000	; 0x1388
 8000378:	2201      	movs	r2, #1
 800037a:	4828      	ldr	r0, [pc, #160]	; (800041c <main+0x2d0>)
 800037c:	f002 fec9 	bl	8003112 <HAL_UART_Transmit>
			// clear memory before writing
			for (uint32_t i = 0; i <= count_of_sectors; i++)
 8000380:	2300      	movs	r3, #0
 8000382:	61bb      	str	r3, [r7, #24]
 8000384:	e00b      	b.n	800039e <main+0x252>
			{
			  // sectors for clear
			  uint32_t tmp = i + START_SECTOR_OF_FIRMWARE;
 8000386:	4b1f      	ldr	r3, [pc, #124]	; (8000404 <main+0x2b8>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	461a      	mov	r2, r3
 800038c:	69bb      	ldr	r3, [r7, #24]
 800038e:	4413      	add	r3, r2
 8000390:	613b      	str	r3, [r7, #16]
			  W25qxx_EraseSector(tmp);
 8000392:	6938      	ldr	r0, [r7, #16]
 8000394:	f000 fd2a 	bl	8000dec <W25qxx_EraseSector>
			for (uint32_t i = 0; i <= count_of_sectors; i++)
 8000398:	69bb      	ldr	r3, [r7, #24]
 800039a:	3301      	adds	r3, #1
 800039c:	61bb      	str	r3, [r7, #24]
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	69ba      	ldr	r2, [r7, #24]
 80003a2:	429a      	cmp	r2, r3
 80003a4:	d9ef      	bls.n	8000386 <main+0x23a>
			}
			HAL_UART_Transmit(&huart2,&count_of_sectors,1,5000);
 80003a6:	4639      	mov	r1, r7
 80003a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80003ac:	2201      	movs	r2, #1
 80003ae:	481b      	ldr	r0, [pc, #108]	; (800041c <main+0x2d0>)
 80003b0:	f002 feaf 	bl	8003112 <HAL_UART_Transmit>


			Size_of_firmwware[0] = receive_buffer[2];
 80003b4:	4b12      	ldr	r3, [pc, #72]	; (8000400 <main+0x2b4>)
 80003b6:	789a      	ldrb	r2, [r3, #2]
 80003b8:	4b19      	ldr	r3, [pc, #100]	; (8000420 <main+0x2d4>)
 80003ba:	701a      	strb	r2, [r3, #0]
			Size_of_firmwware[1] = receive_buffer[3];
 80003bc:	4b10      	ldr	r3, [pc, #64]	; (8000400 <main+0x2b4>)
 80003be:	78da      	ldrb	r2, [r3, #3]
 80003c0:	4b17      	ldr	r3, [pc, #92]	; (8000420 <main+0x2d4>)
 80003c2:	705a      	strb	r2, [r3, #1]
			Size_of_firmwware[2] = receive_buffer[4];
 80003c4:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <main+0x2b4>)
 80003c6:	791a      	ldrb	r2, [r3, #4]
 80003c8:	4b15      	ldr	r3, [pc, #84]	; (8000420 <main+0x2d4>)
 80003ca:	709a      	strb	r2, [r3, #2]

			int32_t page_start1 = 16 * START_SECTOR_OF_FIRMWARE;
 80003cc:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <main+0x2b8>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	011b      	lsls	r3, r3, #4
 80003d2:	617b      	str	r3, [r7, #20]

			W25qxx_WritePage(Size_of_firmwware, page_start1, 0, 3);
 80003d4:	6979      	ldr	r1, [r7, #20]
 80003d6:	2303      	movs	r3, #3
 80003d8:	2200      	movs	r2, #0
 80003da:	4811      	ldr	r0, [pc, #68]	; (8000420 <main+0x2d4>)
 80003dc:	f000 fd5a 	bl	8000e94 <W25qxx_WritePage>
			HAL_Delay(100);
 80003e0:	2064      	movs	r0, #100	; 0x64
 80003e2:	f000 ff31 	bl	8001248 <HAL_Delay>

			HAL_UART_Transmit(&huart1,transmit_buffer,2,5000); // send WRITE_READY
 80003e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80003ea:	2202      	movs	r2, #2
 80003ec:	4907      	ldr	r1, [pc, #28]	; (800040c <main+0x2c0>)
 80003ee:	4802      	ldr	r0, [pc, #8]	; (80003f8 <main+0x2ac>)
 80003f0:	f002 fe8f 	bl	8003112 <HAL_UART_Transmit>
				int32_t page_start =  i + 16 * (START_SECTOR_OF_FIRMWARE + 1); // number of start page
				W25qxx_WritePage(receive_buffer + 2, page_start, 0, 256);
				HAL_Delay(5); //impotent!!!
			}
*/
	  	  break;
 80003f4:	bf00      	nop
	  RX = 0;
 80003f6:	e6c2      	b.n	800017e <main+0x32>
 80003f8:	200003e8 	.word	0x200003e8
 80003fc:	2000002c 	.word	0x2000002c
 8000400:	20000030 	.word	0x20000030
 8000404:	20000350 	.word	0x20000350
 8000408:	20000354 	.word	0x20000354
 800040c:	200001c0 	.word	0x200001c0
 8000410:	20000000 	.word	0x20000000
 8000414:	20000358 	.word	0x20000358
 8000418:	20000032 	.word	0x20000032
 800041c:	20000484 	.word	0x20000484
 8000420:	2000035c 	.word	0x2000035c

08000424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b090      	sub	sp, #64	; 0x40
 8000428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042a:	f107 0318 	add.w	r3, r7, #24
 800042e:	2228      	movs	r2, #40	; 0x28
 8000430:	2100      	movs	r1, #0
 8000432:	4618      	mov	r0, r3
 8000434:	f003 fcda 	bl	8003dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]
 8000444:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000446:	2301      	movs	r3, #1
 8000448:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800044a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800044e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000450:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000454:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000456:	2301      	movs	r3, #1
 8000458:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800045a:	2302      	movs	r3, #2
 800045c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800045e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000462:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000464:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000468:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046a:	f107 0318 	add.w	r3, r7, #24
 800046e:	4618      	mov	r0, r3
 8000470:	f001 fc56 	bl	8001d20 <HAL_RCC_OscConfig>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800047a:	f000 f963 	bl	8000744 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047e:	230f      	movs	r3, #15
 8000480:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000482:	2302      	movs	r3, #2
 8000484:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800048a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800048e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000490:	2300      	movs	r3, #0
 8000492:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	2101      	movs	r1, #1
 8000498:	4618      	mov	r0, r3
 800049a:	f001 fec1 	bl	8002220 <HAL_RCC_ClockConfig>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80004a4:	f000 f94e 	bl	8000744 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80004a8:	f001 ffa4 	bl	80023f4 <HAL_RCC_EnableCSS>
}
 80004ac:	bf00      	nop
 80004ae:	3740      	adds	r7, #64	; 0x40
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004b8:	4b17      	ldr	r3, [pc, #92]	; (8000518 <MX_SPI1_Init+0x64>)
 80004ba:	4a18      	ldr	r2, [pc, #96]	; (800051c <MX_SPI1_Init+0x68>)
 80004bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004be:	4b16      	ldr	r3, [pc, #88]	; (8000518 <MX_SPI1_Init+0x64>)
 80004c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004c6:	4b14      	ldr	r3, [pc, #80]	; (8000518 <MX_SPI1_Init+0x64>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004cc:	4b12      	ldr	r3, [pc, #72]	; (8000518 <MX_SPI1_Init+0x64>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004d2:	4b11      	ldr	r3, [pc, #68]	; (8000518 <MX_SPI1_Init+0x64>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004d8:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <MX_SPI1_Init+0x64>)
 80004da:	2200      	movs	r2, #0
 80004dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <MX_SPI1_Init+0x64>)
 80004e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004e6:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <MX_SPI1_Init+0x64>)
 80004e8:	2208      	movs	r2, #8
 80004ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004ec:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <MX_SPI1_Init+0x64>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <MX_SPI1_Init+0x64>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004f8:	4b07      	ldr	r3, [pc, #28]	; (8000518 <MX_SPI1_Init+0x64>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80004fe:	4b06      	ldr	r3, [pc, #24]	; (8000518 <MX_SPI1_Init+0x64>)
 8000500:	220a      	movs	r2, #10
 8000502:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000504:	4804      	ldr	r0, [pc, #16]	; (8000518 <MX_SPI1_Init+0x64>)
 8000506:	f002 f84b 	bl	80025a0 <HAL_SPI_Init>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000510:	f000 f918 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	2000042c 	.word	0x2000042c
 800051c:	40013000 	.word	0x40013000

08000520 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000524:	4b11      	ldr	r3, [pc, #68]	; (800056c <MX_USART1_UART_Init+0x4c>)
 8000526:	4a12      	ldr	r2, [pc, #72]	; (8000570 <MX_USART1_UART_Init+0x50>)
 8000528:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800052a:	4b10      	ldr	r3, [pc, #64]	; (800056c <MX_USART1_UART_Init+0x4c>)
 800052c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000530:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000532:	4b0e      	ldr	r3, [pc, #56]	; (800056c <MX_USART1_UART_Init+0x4c>)
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000538:	4b0c      	ldr	r3, [pc, #48]	; (800056c <MX_USART1_UART_Init+0x4c>)
 800053a:	2200      	movs	r2, #0
 800053c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800053e:	4b0b      	ldr	r3, [pc, #44]	; (800056c <MX_USART1_UART_Init+0x4c>)
 8000540:	2200      	movs	r2, #0
 8000542:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000544:	4b09      	ldr	r3, [pc, #36]	; (800056c <MX_USART1_UART_Init+0x4c>)
 8000546:	220c      	movs	r2, #12
 8000548:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <MX_USART1_UART_Init+0x4c>)
 800054c:	2200      	movs	r2, #0
 800054e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <MX_USART1_UART_Init+0x4c>)
 8000552:	2200      	movs	r2, #0
 8000554:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000556:	4805      	ldr	r0, [pc, #20]	; (800056c <MX_USART1_UART_Init+0x4c>)
 8000558:	f002 fd8e 	bl	8003078 <HAL_UART_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000562:	f000 f8ef 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	200003e8 	.word	0x200003e8
 8000570:	40013800 	.word	0x40013800

08000574 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <MX_USART2_UART_Init+0x4c>)
 800057a:	4a12      	ldr	r2, [pc, #72]	; (80005c4 <MX_USART2_UART_Init+0x50>)
 800057c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800057e:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <MX_USART2_UART_Init+0x4c>)
 8000580:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000584:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <MX_USART2_UART_Init+0x4c>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <MX_USART2_UART_Init+0x4c>)
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <MX_USART2_UART_Init+0x4c>)
 8000594:	2200      	movs	r2, #0
 8000596:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <MX_USART2_UART_Init+0x4c>)
 800059a:	220c      	movs	r2, #12
 800059c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <MX_USART2_UART_Init+0x4c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <MX_USART2_UART_Init+0x4c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005aa:	4805      	ldr	r0, [pc, #20]	; (80005c0 <MX_USART2_UART_Init+0x4c>)
 80005ac:	f002 fd64 	bl	8003078 <HAL_UART_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005b6:	f000 f8c5 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000484 	.word	0x20000484
 80005c4:	40004400 	.word	0x40004400

080005c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <MX_DMA_Init+0x48>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	4a0f      	ldr	r2, [pc, #60]	; (8000610 <MX_DMA_Init+0x48>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6153      	str	r3, [r2, #20]
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <MX_DMA_Init+0x48>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	200e      	movs	r0, #14
 80005ec:	f000 ff27 	bl	800143e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80005f0:	200e      	movs	r0, #14
 80005f2:	f000 ff40 	bl	8001476 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2100      	movs	r1, #0
 80005fa:	200f      	movs	r0, #15
 80005fc:	f000 ff1f 	bl	800143e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000600:	200f      	movs	r0, #15
 8000602:	f000 ff38 	bl	8001476 <HAL_NVIC_EnableIRQ>

}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40021000 	.word	0x40021000

08000614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <MX_GPIO_Init+0xcc>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	4a2c      	ldr	r2, [pc, #176]	; (80006e0 <MX_GPIO_Init+0xcc>)
 800062e:	f043 0310 	orr.w	r3, r3, #16
 8000632:	6193      	str	r3, [r2, #24]
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <MX_GPIO_Init+0xcc>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f003 0310 	and.w	r3, r3, #16
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <MX_GPIO_Init+0xcc>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <MX_GPIO_Init+0xcc>)
 8000646:	f043 0320 	orr.w	r3, r3, #32
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <MX_GPIO_Init+0xcc>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f003 0320 	and.w	r3, r3, #32
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <MX_GPIO_Init+0xcc>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <MX_GPIO_Init+0xcc>)
 800065e:	f043 0304 	orr.w	r3, r3, #4
 8000662:	6193      	str	r3, [r2, #24]
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <MX_GPIO_Init+0xcc>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	f003 0304 	and.w	r3, r3, #4
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <MX_GPIO_Init+0xcc>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <MX_GPIO_Init+0xcc>)
 8000676:	f043 0308 	orr.w	r3, r3, #8
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <MX_GPIO_Init+0xcc>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f003 0308 	and.w	r3, r3, #8
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800068e:	4815      	ldr	r0, [pc, #84]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000690:	f001 fb2e 	bl	8001cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2101      	movs	r1, #1
 8000698:	4813      	ldr	r0, [pc, #76]	; (80006e8 <MX_GPIO_Init+0xd4>)
 800069a:	f001 fb29 	bl	8001cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800069e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	2301      	movs	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ac:	2302      	movs	r3, #2
 80006ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b0:	f107 0310 	add.w	r3, r7, #16
 80006b4:	4619      	mov	r1, r3
 80006b6:	480b      	ldr	r0, [pc, #44]	; (80006e4 <MX_GPIO_Init+0xd0>)
 80006b8:	f001 f996 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 80006bc:	2301      	movs	r3, #1
 80006be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2302      	movs	r3, #2
 80006ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	4619      	mov	r1, r3
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_GPIO_Init+0xd4>)
 80006d4:	f001 f988 	bl	80019e8 <HAL_GPIO_Init>

}
 80006d8:	bf00      	nop
 80006da:	3720      	adds	r7, #32
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40021000 	.word	0x40021000
 80006e4:	40011000 	.word	0x40011000
 80006e8:	40010c00 	.word	0x40010c00

080006ec <USER_UART_IRQHandler>:

/* USER CODE BEGIN 4 */
void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 // file stm32f1xx_hal_uart.c
 // comment
 // Set the UART DMA Half transfer complete callback
 // huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt

 if(huart == &huart1) //Determine whether it is serial port 1
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a11      	ldr	r2, [pc, #68]	; (800073c <USER_UART_IRQHandler+0x50>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d11a      	bne.n	8000732 <USER_UART_IRQHandler+0x46>
 {
  if(RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))   //Judging whether it is idle interruption
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <USER_UART_IRQHandler+0x50>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f003 0310 	and.w	r3, r3, #16
 8000706:	2b10      	cmp	r3, #16
 8000708:	d113      	bne.n	8000732 <USER_UART_IRQHandler+0x46>
  {
   HAL_UART_DMAStop(&huart1);
 800070a:	480c      	ldr	r0, [pc, #48]	; (800073c <USER_UART_IRQHandler+0x50>)
 800070c:	f002 fdc3 	bl	8003296 <HAL_UART_DMAStop>
   __HAL_UART_CLEAR_IDLEFLAG(&huart1); //Clear idle interrupt sign (otherwise it will continue to enter interrupt)
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <USER_UART_IRQHandler+0x50>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <USER_UART_IRQHandler+0x50>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
   RX = 1;
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <USER_UART_IRQHandler+0x54>)
 8000728:	2201      	movs	r2, #1
 800072a:	701a      	strb	r2, [r3, #0]
   HAL_UART_DMAStop(&huart1);
 800072c:	4803      	ldr	r0, [pc, #12]	; (800073c <USER_UART_IRQHandler+0x50>)
 800072e:	f002 fdb2 	bl	8003296 <HAL_UART_DMAStop>
  }
 }
}
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200003e8 	.word	0x200003e8
 8000740:	2000002c 	.word	0x2000002c

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
}
 800074a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074c:	e7fe      	b.n	800074c <Error_Handler+0x8>
	...

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <HAL_MspInit+0x5c>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	4a14      	ldr	r2, [pc, #80]	; (80007ac <HAL_MspInit+0x5c>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6193      	str	r3, [r2, #24]
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <HAL_MspInit+0x5c>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <HAL_MspInit+0x5c>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	4a0e      	ldr	r2, [pc, #56]	; (80007ac <HAL_MspInit+0x5c>)
 8000774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000778:	61d3      	str	r3, [r2, #28]
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <HAL_MspInit+0x5c>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <HAL_MspInit+0x60>)
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <HAL_MspInit+0x60>)
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a2:	bf00      	nop
 80007a4:	3714      	adds	r7, #20
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	40021000 	.word	0x40021000
 80007b0:	40010000 	.word	0x40010000

080007b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 0310 	add.w	r3, r7, #16
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a1b      	ldr	r2, [pc, #108]	; (800083c <HAL_SPI_MspInit+0x88>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d12f      	bne.n	8000834 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <HAL_SPI_MspInit+0x8c>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a19      	ldr	r2, [pc, #100]	; (8000840 <HAL_SPI_MspInit+0x8c>)
 80007da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <HAL_SPI_MspInit+0x8c>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <HAL_SPI_MspInit+0x8c>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a13      	ldr	r2, [pc, #76]	; (8000840 <HAL_SPI_MspInit+0x8c>)
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <HAL_SPI_MspInit+0x8c>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0304 	and.w	r3, r3, #4
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000804:	23a0      	movs	r3, #160	; 0xa0
 8000806:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800080c:	2303      	movs	r3, #3
 800080e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	4619      	mov	r1, r3
 8000816:	480b      	ldr	r0, [pc, #44]	; (8000844 <HAL_SPI_MspInit+0x90>)
 8000818:	f001 f8e6 	bl	80019e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800081c:	2340      	movs	r3, #64	; 0x40
 800081e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	4619      	mov	r1, r3
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <HAL_SPI_MspInit+0x90>)
 8000830:	f001 f8da 	bl	80019e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000834:	bf00      	nop
 8000836:	3720      	adds	r7, #32
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40013000 	.word	0x40013000
 8000840:	40021000 	.word	0x40021000
 8000844:	40010800 	.word	0x40010800

08000848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0318 	add.w	r3, r7, #24
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a66      	ldr	r2, [pc, #408]	; (80009fc <HAL_UART_MspInit+0x1b4>)
 8000864:	4293      	cmp	r3, r2
 8000866:	f040 8087 	bne.w	8000978 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800086a:	4b65      	ldr	r3, [pc, #404]	; (8000a00 <HAL_UART_MspInit+0x1b8>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	4a64      	ldr	r2, [pc, #400]	; (8000a00 <HAL_UART_MspInit+0x1b8>)
 8000870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000874:	6193      	str	r3, [r2, #24]
 8000876:	4b62      	ldr	r3, [pc, #392]	; (8000a00 <HAL_UART_MspInit+0x1b8>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b5f      	ldr	r3, [pc, #380]	; (8000a00 <HAL_UART_MspInit+0x1b8>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	4a5e      	ldr	r2, [pc, #376]	; (8000a00 <HAL_UART_MspInit+0x1b8>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	6193      	str	r3, [r2, #24]
 800088e:	4b5c      	ldr	r3, [pc, #368]	; (8000a00 <HAL_UART_MspInit+0x1b8>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800089a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800089e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a4:	2303      	movs	r3, #3
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 0318 	add.w	r3, r7, #24
 80008ac:	4619      	mov	r1, r3
 80008ae:	4855      	ldr	r0, [pc, #340]	; (8000a04 <HAL_UART_MspInit+0x1bc>)
 80008b0:	f001 f89a 	bl	80019e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	f107 0318 	add.w	r3, r7, #24
 80008c6:	4619      	mov	r1, r3
 80008c8:	484e      	ldr	r0, [pc, #312]	; (8000a04 <HAL_UART_MspInit+0x1bc>)
 80008ca:	f001 f88d 	bl	80019e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80008ce:	4b4e      	ldr	r3, [pc, #312]	; (8000a08 <HAL_UART_MspInit+0x1c0>)
 80008d0:	4a4e      	ldr	r2, [pc, #312]	; (8000a0c <HAL_UART_MspInit+0x1c4>)
 80008d2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008d4:	4b4c      	ldr	r3, [pc, #304]	; (8000a08 <HAL_UART_MspInit+0x1c0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008da:	4b4b      	ldr	r3, [pc, #300]	; (8000a08 <HAL_UART_MspInit+0x1c0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008e0:	4b49      	ldr	r3, [pc, #292]	; (8000a08 <HAL_UART_MspInit+0x1c0>)
 80008e2:	2280      	movs	r2, #128	; 0x80
 80008e4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008e6:	4b48      	ldr	r3, [pc, #288]	; (8000a08 <HAL_UART_MspInit+0x1c0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008ec:	4b46      	ldr	r3, [pc, #280]	; (8000a08 <HAL_UART_MspInit+0x1c0>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80008f2:	4b45      	ldr	r3, [pc, #276]	; (8000a08 <HAL_UART_MspInit+0x1c0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008f8:	4b43      	ldr	r3, [pc, #268]	; (8000a08 <HAL_UART_MspInit+0x1c0>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80008fe:	4842      	ldr	r0, [pc, #264]	; (8000a08 <HAL_UART_MspInit+0x1c0>)
 8000900:	f000 fdd4 	bl	80014ac <HAL_DMA_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800090a:	f7ff ff1b 	bl	8000744 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a3d      	ldr	r2, [pc, #244]	; (8000a08 <HAL_UART_MspInit+0x1c0>)
 8000912:	639a      	str	r2, [r3, #56]	; 0x38
 8000914:	4a3c      	ldr	r2, [pc, #240]	; (8000a08 <HAL_UART_MspInit+0x1c0>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800091a:	4b3d      	ldr	r3, [pc, #244]	; (8000a10 <HAL_UART_MspInit+0x1c8>)
 800091c:	4a3d      	ldr	r2, [pc, #244]	; (8000a14 <HAL_UART_MspInit+0x1cc>)
 800091e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000920:	4b3b      	ldr	r3, [pc, #236]	; (8000a10 <HAL_UART_MspInit+0x1c8>)
 8000922:	2210      	movs	r2, #16
 8000924:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000926:	4b3a      	ldr	r3, [pc, #232]	; (8000a10 <HAL_UART_MspInit+0x1c8>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800092c:	4b38      	ldr	r3, [pc, #224]	; (8000a10 <HAL_UART_MspInit+0x1c8>)
 800092e:	2280      	movs	r2, #128	; 0x80
 8000930:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000932:	4b37      	ldr	r3, [pc, #220]	; (8000a10 <HAL_UART_MspInit+0x1c8>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000938:	4b35      	ldr	r3, [pc, #212]	; (8000a10 <HAL_UART_MspInit+0x1c8>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800093e:	4b34      	ldr	r3, [pc, #208]	; (8000a10 <HAL_UART_MspInit+0x1c8>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000944:	4b32      	ldr	r3, [pc, #200]	; (8000a10 <HAL_UART_MspInit+0x1c8>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800094a:	4831      	ldr	r0, [pc, #196]	; (8000a10 <HAL_UART_MspInit+0x1c8>)
 800094c:	f000 fdae 	bl	80014ac <HAL_DMA_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8000956:	f7ff fef5 	bl	8000744 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a2c      	ldr	r2, [pc, #176]	; (8000a10 <HAL_UART_MspInit+0x1c8>)
 800095e:	635a      	str	r2, [r3, #52]	; 0x34
 8000960:	4a2b      	ldr	r2, [pc, #172]	; (8000a10 <HAL_UART_MspInit+0x1c8>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	2025      	movs	r0, #37	; 0x25
 800096c:	f000 fd67 	bl	800143e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000970:	2025      	movs	r0, #37	; 0x25
 8000972:	f000 fd80 	bl	8001476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000976:	e03c      	b.n	80009f2 <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART2)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a26      	ldr	r2, [pc, #152]	; (8000a18 <HAL_UART_MspInit+0x1d0>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d137      	bne.n	80009f2 <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000982:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <HAL_UART_MspInit+0x1b8>)
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	4a1e      	ldr	r2, [pc, #120]	; (8000a00 <HAL_UART_MspInit+0x1b8>)
 8000988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800098c:	61d3      	str	r3, [r2, #28]
 800098e:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <HAL_UART_MspInit+0x1b8>)
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <HAL_UART_MspInit+0x1b8>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	4a18      	ldr	r2, [pc, #96]	; (8000a00 <HAL_UART_MspInit+0x1b8>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	6193      	str	r3, [r2, #24]
 80009a6:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <HAL_UART_MspInit+0x1b8>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009b2:	2304      	movs	r3, #4
 80009b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ba:	2303      	movs	r3, #3
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0318 	add.w	r3, r7, #24
 80009c2:	4619      	mov	r1, r3
 80009c4:	480f      	ldr	r0, [pc, #60]	; (8000a04 <HAL_UART_MspInit+0x1bc>)
 80009c6:	f001 f80f 	bl	80019e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009ca:	2308      	movs	r3, #8
 80009cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 0318 	add.w	r3, r7, #24
 80009da:	4619      	mov	r1, r3
 80009dc:	4809      	ldr	r0, [pc, #36]	; (8000a04 <HAL_UART_MspInit+0x1bc>)
 80009de:	f001 f803 	bl	80019e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	2026      	movs	r0, #38	; 0x26
 80009e8:	f000 fd29 	bl	800143e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009ec:	2026      	movs	r0, #38	; 0x26
 80009ee:	f000 fd42 	bl	8001476 <HAL_NVIC_EnableIRQ>
}
 80009f2:	bf00      	nop
 80009f4:	3728      	adds	r7, #40	; 0x28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40013800 	.word	0x40013800
 8000a00:	40021000 	.word	0x40021000
 8000a04:	40010800 	.word	0x40010800
 8000a08:	200003a4 	.word	0x200003a4
 8000a0c:	40020058 	.word	0x40020058
 8000a10:	20000360 	.word	0x20000360
 8000a14:	40020044 	.word	0x40020044
 8000a18:	40004400 	.word	0x40004400

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000a20:	f001 fd86 	bl	8002530 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <NMI_Handler+0x8>

08000a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <MemManage_Handler+0x4>

08000a32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr

08000a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr

08000a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr

08000a62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a66:	f000 fbd3 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <DMA1_Channel4_IRQHandler+0x10>)
 8000a76:	f000 fe83 	bl	8001780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000360 	.word	0x20000360

08000a84 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <DMA1_Channel5_IRQHandler+0x10>)
 8000a8a:	f000 fe79 	bl	8001780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200003a4 	.word	0x200003a4

08000a98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a9c:	4803      	ldr	r0, [pc, #12]	; (8000aac <USART1_IRQHandler+0x14>)
 8000a9e:	f002 fc55 	bl	800334c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USER_UART_IRQHandler(&huart1);
 8000aa2:	4802      	ldr	r0, [pc, #8]	; (8000aac <USART1_IRQHandler+0x14>)
 8000aa4:	f7ff fe22 	bl	80006ec <USER_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200003e8 	.word	0x200003e8

08000ab0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ab4:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <USART2_IRQHandler+0x10>)
 8000ab6:	f002 fc49 	bl	800334c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000484 	.word	0x20000484

08000ac4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <W25qxx_Spi>:



//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af02      	add	r7, sp, #8
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;

	HAL_SPI_TransmitReceive(W25QXX_SPI_PTR, &Data, &ret, 1, 100); // spi2
 8000ada:	f107 020f 	add.w	r2, r7, #15
 8000ade:	1df9      	adds	r1, r7, #7
 8000ae0:	2364      	movs	r3, #100	; 0x64
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	4804      	ldr	r0, [pc, #16]	; (8000af8 <W25qxx_Spi+0x28>)
 8000ae8:	f002 f82b 	bl	8002b42 <HAL_SPI_TransmitReceive>
	ret = W25QXX_SPI->DR;*/

	//while((W25QXX_SPI->SR & SPI_SR_BSY));
	//__HAL_SPI_CLEAR_OVRFLAG(&hspi2);

	return ret;
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	2000042c 	.word	0x2000042c

08000afc <W25qxx_ReadID>:

//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	2300      	movs	r3, #0
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]

	W25QFLASH_CS_SELECT;
 8000b12:	2200      	movs	r2, #0
 8000b14:	2101      	movs	r1, #1
 8000b16:	4813      	ldr	r0, [pc, #76]	; (8000b64 <W25qxx_ReadID+0x68>)
 8000b18:	f001 f8ea 	bl	8001cf0 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_GET_JEDEC_ID);
 8000b1c:	209f      	movs	r0, #159	; 0x9f
 8000b1e:	f7ff ffd7 	bl	8000ad0 <W25qxx_Spi>

	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000b22:	20a5      	movs	r0, #165	; 0xa5
 8000b24:	f7ff ffd4 	bl	8000ad0 <W25qxx_Spi>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000b2c:	20a5      	movs	r0, #165	; 0xa5
 8000b2e:	f7ff ffcf 	bl	8000ad0 <W25qxx_Spi>
 8000b32:	4603      	mov	r3, r0
 8000b34:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000b36:	20a5      	movs	r0, #165	; 0xa5
 8000b38:	f7ff ffca 	bl	8000ad0 <W25qxx_Spi>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	603b      	str	r3, [r7, #0]

	W25QFLASH_CS_UNSELECT;
 8000b40:	2201      	movs	r2, #1
 8000b42:	2101      	movs	r1, #1
 8000b44:	4807      	ldr	r0, [pc, #28]	; (8000b64 <W25qxx_ReadID+0x68>)
 8000b46:	f001 f8d3 	bl	8001cf0 <HAL_GPIO_WritePin>

	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	041a      	lsls	r2, r3, #16
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	4313      	orrs	r3, r2
 8000b54:	683a      	ldr	r2, [r7, #0]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	60fb      	str	r3, [r7, #12]

	return Temp;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40010c00 	.word	0x40010c00

08000b68 <W25qxx_WriteEnable>:
	W25QFLASH_CS_UNSELECT;
}*/

//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	W25QFLASH_CS_SELECT;
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2101      	movs	r1, #1
 8000b70:	4807      	ldr	r0, [pc, #28]	; (8000b90 <W25qxx_WriteEnable+0x28>)
 8000b72:	f001 f8bd 	bl	8001cf0 <HAL_GPIO_WritePin>
	W25qxx_Spi(W25_WRITE_ENABLE);
 8000b76:	2006      	movs	r0, #6
 8000b78:	f7ff ffaa 	bl	8000ad0 <W25qxx_Spi>
	W25QFLASH_CS_UNSELECT;
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2101      	movs	r1, #1
 8000b80:	4803      	ldr	r0, [pc, #12]	; (8000b90 <W25qxx_WriteEnable+0x28>)
 8000b82:	f001 f8b5 	bl	8001cf0 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8000b86:	2001      	movs	r0, #1
 8000b88:	f000 fb5e 	bl	8001248 <HAL_Delay>
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40010c00 	.word	0x40010c00

08000b94 <W25qxx_WaitForWriteEnd>:
	W25QFLASH_CS_UNSELECT;
}*/

//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f000 fb55 	bl	8001248 <HAL_Delay>
	W25QFLASH_CS_SELECT;
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	480f      	ldr	r0, [pc, #60]	; (8000be0 <W25qxx_WaitForWriteEnd+0x4c>)
 8000ba4:	f001 f8a4 	bl	8001cf0 <HAL_GPIO_WritePin>
	W25qxx_Spi(W25_READ_STATUS_1);
 8000ba8:	2005      	movs	r0, #5
 8000baa:	f7ff ff91 	bl	8000ad0 <W25qxx_Spi>

	do{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000bae:	20a5      	movs	r0, #165	; 0xa5
 8000bb0:	f7ff ff8e 	bl	8000ad0 <W25qxx_Spi>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <W25qxx_WaitForWriteEnd+0x50>)
 8000bba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f000 fb42 	bl	8001248 <HAL_Delay>
	}
	while((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <W25qxx_WaitForWriteEnd+0x50>)
 8000bc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d1ed      	bne.n	8000bae <W25qxx_WaitForWriteEnd+0x1a>

	W25QFLASH_CS_UNSELECT;
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	4802      	ldr	r0, [pc, #8]	; (8000be0 <W25qxx_WaitForWriteEnd+0x4c>)
 8000bd8:	f001 f88a 	bl	8001cf0 <HAL_GPIO_WritePin>
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40010c00 	.word	0x40010c00
 8000be4:	200004c8 	.word	0x200004c8

08000be8 <W25qxx_Init>:

//###################################################################################################################
uint8_t W25qxx_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8000bee:	4b7d      	ldr	r3, [pc, #500]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick() < 100)
 8000bf6:	e002      	b.n	8000bfe <W25qxx_Init+0x16>
	W25qxx_Delay(1);
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f000 fb25 	bl	8001248 <HAL_Delay>
	while(HAL_GetTick() < 100)
 8000bfe:	f000 fb19 	bl	8001234 <HAL_GetTick>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b63      	cmp	r3, #99	; 0x63
 8000c06:	d9f7      	bls.n	8000bf8 <W25qxx_Init+0x10>

	W25QFLASH_CS_UNSELECT;
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	4876      	ldr	r0, [pc, #472]	; (8000de8 <W25qxx_Init+0x200>)
 8000c0e:	f001 f86f 	bl	8001cf0 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8000c12:	2064      	movs	r0, #100	; 0x64
 8000c14:	f000 fb18 	bl	8001248 <HAL_Delay>

	#if (INIT_DEBUG == 1)
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Init Begin...\n", 14, 1000);
	#endif
	
	id = W25qxx_ReadID();
 8000c18:	f7ff ff70 	bl	8000afc <W25qxx_ReadID>
 8000c1c:	6078      	str	r0, [r7, #4]
	#if (INIT_DEBUG == 1)
	snprintf(buf, 64, "ID:0x%lX\n", id);
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);
	#endif

	switch(id & 0x0000FFFF)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	f243 0217 	movw	r2, #12311	; 0x3017
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d838      	bhi.n	8000c9c <W25qxx_Init+0xb4>
 8000c2a:	f243 0211 	movw	r2, #12305	; 0x3011
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d21e      	bcs.n	8000c70 <W25qxx_Init+0x88>
 8000c32:	e0a1      	b.n	8000d78 <W25qxx_Init+0x190>
 8000c34:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000c38:	3b11      	subs	r3, #17
 8000c3a:	2b09      	cmp	r3, #9
 8000c3c:	f200 809c 	bhi.w	8000d78 <W25qxx_Init+0x190>
 8000c40:	a201      	add	r2, pc, #4	; (adr r2, 8000c48 <W25qxx_Init+0x60>)
 8000c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c46:	bf00      	nop
 8000c48:	08000d33 	.word	0x08000d33
 8000c4c:	08000d25 	.word	0x08000d25
 8000c50:	08000d17 	.word	0x08000d17
 8000c54:	08000d09 	.word	0x08000d09
 8000c58:	08000cfb 	.word	0x08000cfb
 8000c5c:	08000ced 	.word	0x08000ced
 8000c60:	08000cdf 	.word	0x08000cdf
 8000c64:	08000ccf 	.word	0x08000ccf
 8000c68:	08000cbf 	.word	0x08000cbf
 8000c6c:	08000caf 	.word	0x08000caf
 8000c70:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 8000c74:	3b11      	subs	r3, #17
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d87e      	bhi.n	8000d78 <W25qxx_Init+0x190>
 8000c7a:	a201      	add	r2, pc, #4	; (adr r2, 8000c80 <W25qxx_Init+0x98>)
 8000c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c80:	08000d71 	.word	0x08000d71
 8000c84:	08000d69 	.word	0x08000d69
 8000c88:	08000d61 	.word	0x08000d61
 8000c8c:	08000d59 	.word	0x08000d59
 8000c90:	08000d51 	.word	0x08000d51
 8000c94:	08000d49 	.word	0x08000d49
 8000c98:	08000d41 	.word	0x08000d41
 8000c9c:	f244 021a 	movw	r2, #16410	; 0x401a
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d869      	bhi.n	8000d78 <W25qxx_Init+0x190>
 8000ca4:	f244 0211 	movw	r2, #16401	; 0x4011
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d2c3      	bcs.n	8000c34 <W25qxx_Init+0x4c>
 8000cac:	e064      	b.n	8000d78 <W25qxx_Init+0x190>
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID = W25Q512;
 8000cae:	4b4d      	ldr	r3, [pc, #308]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000cb0:	220a      	movs	r2, #10
 8000cb2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 1024;
 8000cb4:	4b4b      	ldr	r3, [pc, #300]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000cb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cba:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q512\n", 14, 1000);
			#endif
		break;
 8000cbc:	e062      	b.n	8000d84 <W25qxx_Init+0x19c>

		case 0x4019:	// 	w25q256
			w25qxx.ID = W25Q256;
 8000cbe:	4b49      	ldr	r3, [pc, #292]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000cc0:	2209      	movs	r2, #9
 8000cc2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 512;
 8000cc4:	4b47      	ldr	r3, [pc, #284]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000cc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cca:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q256\n", 14, 1000);
			#endif
		break;
 8000ccc:	e05a      	b.n	8000d84 <W25qxx_Init+0x19c>

		case 0x4018:	// 	w25q128
			w25qxx.ID = W25Q128;
 8000cce:	4b45      	ldr	r3, [pc, #276]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000cd0:	2208      	movs	r2, #8
 8000cd2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 256;
 8000cd4:	4b43      	ldr	r3, [pc, #268]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000cd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cda:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q128\n", 14, 1000);
			#endif
		break;
 8000cdc:	e052      	b.n	8000d84 <W25qxx_Init+0x19c>

		case 0x4017:	//	w25q64
			w25qxx.ID = W25Q64;
 8000cde:	4b41      	ldr	r3, [pc, #260]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 128;
 8000ce4:	4b3f      	ldr	r3, [pc, #252]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000ce6:	2280      	movs	r2, #128	; 0x80
 8000ce8:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q64\n", 13, 1000);
			#endif
		break;
 8000cea:	e04b      	b.n	8000d84 <W25qxx_Init+0x19c>

		case 0x4016:	//	w25q32
			w25qxx.ID = W25Q32;
 8000cec:	4b3d      	ldr	r3, [pc, #244]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000cee:	2206      	movs	r2, #6
 8000cf0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 64;
 8000cf2:	4b3c      	ldr	r3, [pc, #240]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000cf4:	2240      	movs	r2, #64	; 0x40
 8000cf6:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q32\n", 13, 1000);
			#endif
		break;
 8000cf8:	e044      	b.n	8000d84 <W25qxx_Init+0x19c>

		case 0x4015:	//	w25q16
			w25qxx.ID = W25Q16;
 8000cfa:	4b3a      	ldr	r3, [pc, #232]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000cfc:	2205      	movs	r2, #5
 8000cfe:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 32;
 8000d00:	4b38      	ldr	r3, [pc, #224]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000d02:	2220      	movs	r2, #32
 8000d04:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q16\n", 13, 1000);
			#endif
		break;
 8000d06:	e03d      	b.n	8000d84 <W25qxx_Init+0x19c>

		case 0x4014:	//	w25q80
			w25qxx.ID = W25Q80;
 8000d08:	4b36      	ldr	r3, [pc, #216]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000d0a:	2204      	movs	r2, #4
 8000d0c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 16;
 8000d0e:	4b35      	ldr	r3, [pc, #212]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000d10:	2210      	movs	r2, #16
 8000d12:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q80\n", 13, 1000);
			#endif
		break;
 8000d14:	e036      	b.n	8000d84 <W25qxx_Init+0x19c>

		case 0x4013:	//	w25q40
			w25qxx.ID = W25Q40;
 8000d16:	4b33      	ldr	r3, [pc, #204]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000d18:	2203      	movs	r2, #3
 8000d1a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 8;
 8000d1c:	4b31      	ldr	r3, [pc, #196]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000d1e:	2208      	movs	r2, #8
 8000d20:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q40\n", 13, 1000);
			#endif
		break;
 8000d22:	e02f      	b.n	8000d84 <W25qxx_Init+0x19c>

		case 0x4012:	//	w25q20
			w25qxx.ID = W25Q20;
 8000d24:	4b2f      	ldr	r3, [pc, #188]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000d26:	2202      	movs	r2, #2
 8000d28:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 4;
 8000d2a:	4b2e      	ldr	r3, [pc, #184]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000d2c:	2204      	movs	r2, #4
 8000d2e:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q20\n", 13, 1000);
			#endif
		break;
 8000d30:	e028      	b.n	8000d84 <W25qxx_Init+0x19c>

		case 0x4011:	//	w25q10
			w25qxx.ID = W25Q10;
 8000d32:	4b2c      	ldr	r3, [pc, #176]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount = 2;
 8000d38:	4b2a      	ldr	r3, [pc, #168]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25q10\n", 13, 1000);
			#endif
		break;
 8000d3e:	e021      	b.n	8000d84 <W25qxx_Init+0x19c>

		////////////////////////////////////////////////////////////////////////////////

		case 0x3017:	//	w25x64
			//w25qxx.ID = W25Q64;
			w25qxx.BlockCount = 128;
 8000d40:	4b28      	ldr	r3, [pc, #160]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000d42:	2280      	movs	r2, #128	; 0x80
 8000d44:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x64\n", 13, 1000);
			#endif
		break;
 8000d46:	e01d      	b.n	8000d84 <W25qxx_Init+0x19c>

		case 0x3016:	//	w25x32
			//w25qxx.ID = W25Q32;
			w25qxx.BlockCount = 64;
 8000d48:	4b26      	ldr	r3, [pc, #152]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000d4a:	2240      	movs	r2, #64	; 0x40
 8000d4c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x32\n", 13, 1000);
			#endif
		break;
 8000d4e:	e019      	b.n	8000d84 <W25qxx_Init+0x19c>

		case 0x3015:	//	w25q16
			//w25qxx.ID = W25Q16;
			w25qxx.BlockCount = 32;
 8000d50:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000d52:	2220      	movs	r2, #32
 8000d54:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x16\n", 13, 1000);
			#endif
		break;
 8000d56:	e015      	b.n	8000d84 <W25qxx_Init+0x19c>

		////////////////////////////////////////////////////////////////////////////////
		case 0x3014:	//	w25x80
			//w25qxx.ID = W25Q80;
			w25qxx.BlockCount = 16;
 8000d58:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000d5a:	2210      	movs	r2, #16
 8000d5c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x80\n", 13, 1000);
			#endif
		break;
 8000d5e:	e011      	b.n	8000d84 <W25qxx_Init+0x19c>

		case 0x3013:	//	w25x40
			//w25qxx.ID = W25Q40;
			w25qxx.BlockCount = 8;
 8000d60:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000d62:	2208      	movs	r2, #8
 8000d64:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x40\n", 13, 1000);
			#endif
		break;
 8000d66:	e00d      	b.n	8000d84 <W25qxx_Init+0x19c>

		case 0x3012:	//	w25x20
			//w25qxx.ID = W25Q20;
			w25qxx.BlockCount = 4;
 8000d68:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000d6a:	2204      	movs	r2, #4
 8000d6c:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x20\n", 13, 1000);
			#endif
		break;
 8000d6e:	e009      	b.n	8000d84 <W25qxx_Init+0x19c>

		case 0x3011:	//	w25x10
			//w25qxx.ID = W25Q10;
			w25qxx.BlockCount = 2;
 8000d70:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000d72:	2202      	movs	r2, #2
 8000d74:	61da      	str	r2, [r3, #28]
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Chip: w25x10\n", 13, 1000);
			#endif
		break;
 8000d76:	e005      	b.n	8000d84 <W25qxx_Init+0x19c>
		default:
			#if (INIT_DEBUG == 1)
			HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Unknown ID\n", 11, 1000);
			#endif

			w25qxx.Lock = 0;
 8000d78:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	e02b      	b.n	8000ddc <W25qxx_Init+0x1f4>
	}


	w25qxx.PageSize = 256;
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000d86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d8a:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8000d8c:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000d8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d92:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000d96:	69db      	ldr	r3, [r3, #28]
 8000d98:	011b      	lsls	r3, r3, #4
 8000d9a:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000d9c:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	4a10      	ldr	r2, [pc, #64]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000da4:	6912      	ldr	r2, [r2, #16]
 8000da6:	fb02 f303 	mul.w	r3, r2, r3
 8000daa:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000dac:	8952      	ldrh	r2, [r2, #10]
 8000dae:	fbb3 f3f2 	udiv	r3, r3, r2
 8000db2:	4a0c      	ldr	r2, [pc, #48]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000db4:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	011b      	lsls	r3, r3, #4
 8000dbc:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000dbe:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000dc2:	695b      	ldr	r3, [r3, #20]
 8000dc4:	4a07      	ldr	r2, [pc, #28]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000dc6:	6912      	ldr	r2, [r2, #16]
 8000dc8:	fb02 f303 	mul.w	r3, r2, r3
 8000dcc:	0a9b      	lsrs	r3, r3, #10
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000dd0:	6213      	str	r3, [r2, #32]
	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)buf, strlen(buf), 1000);

	HAL_UART_Transmit(DEBUG_UART, (uint8_t*)"Init Done\n", 10, 1000);
	#endif

	w25qxx.Lock = 0;
 8000dd2:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <W25qxx_Init+0x1fc>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return 1;
 8000dda:	2301      	movs	r3, #1
}	
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	200004c8 	.word	0x200004c8
 8000de8:	40010c00 	.word	0x40010c00

08000dec <W25qxx_EraseSector>:
	w25qxx.Lock = 0;
}

//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock == 1)
 8000df4:	e002      	b.n	8000dfc <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8000df6:	2001      	movs	r0, #1
 8000df8:	f000 fa26 	bl	8001248 <HAL_Delay>
	while(w25qxx.Lock == 1)
 8000dfc:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <W25qxx_EraseSector+0xa0>)
 8000dfe:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d0f7      	beq.n	8000df6 <W25qxx_EraseSector+0xa>

	w25qxx.Lock = 1;
 8000e06:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <W25qxx_EraseSector+0xa0>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	W25qxx_WaitForWriteEnd();
 8000e0e:	f7ff fec1 	bl	8000b94 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8000e12:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <W25qxx_EraseSector+0xa0>)
 8000e14:	691a      	ldr	r2, [r3, #16]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	fb02 f303 	mul.w	r3, r2, r3
 8000e1c:	607b      	str	r3, [r7, #4]

	W25qxx_WriteEnable();
 8000e1e:	f7ff fea3 	bl	8000b68 <W25qxx_WriteEnable>

	W25QFLASH_CS_SELECT;
 8000e22:	2200      	movs	r2, #0
 8000e24:	2101      	movs	r1, #1
 8000e26:	481a      	ldr	r0, [pc, #104]	; (8000e90 <W25qxx_EraseSector+0xa4>)
 8000e28:	f000 ff62 	bl	8001cf0 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_SECTOR_ERASE);
 8000e2c:	2020      	movs	r0, #32
 8000e2e:	f7ff fe4f 	bl	8000ad0 <W25qxx_Spi>

	if(w25qxx.ID >= W25Q256)
 8000e32:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <W25qxx_EraseSector+0xa0>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b08      	cmp	r3, #8
 8000e38:	d905      	bls.n	8000e46 <W25qxx_EraseSector+0x5a>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	0e1b      	lsrs	r3, r3, #24
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fe45 	bl	8000ad0 <W25qxx_Spi>

	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	0c1b      	lsrs	r3, r3, #16
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fe3f 	bl	8000ad0 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fe39 	bl	8000ad0 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fe34 	bl	8000ad0 <W25qxx_Spi>

	W25QFLASH_CS_UNSELECT;
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	4808      	ldr	r0, [pc, #32]	; (8000e90 <W25qxx_EraseSector+0xa4>)
 8000e6e:	f000 ff3f 	bl	8001cf0 <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 8000e72:	f7ff fe8f 	bl	8000b94 <W25qxx_WaitForWriteEnd>

	W25qxx_Delay(1);
 8000e76:	2001      	movs	r0, #1
 8000e78:	f000 f9e6 	bl	8001248 <HAL_Delay>
	w25qxx.Lock = 0;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <W25qxx_EraseSector+0xa0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	200004c8 	.word	0x200004c8
 8000e90:	40010c00 	.word	0x40010c00

08000e94 <W25qxx_WritePage>:
	w25qxx.Lock = 0;
}

//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
 8000ea0:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock == 1)
 8000ea2:	e002      	b.n	8000eaa <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f000 f9cf 	bl	8001248 <HAL_Delay>
	while(w25qxx.Lock == 1)
 8000eaa:	4b37      	ldr	r3, [pc, #220]	; (8000f88 <W25qxx_WritePage+0xf4>)
 8000eac:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d0f7      	beq.n	8000ea4 <W25qxx_WritePage+0x10>

	w25qxx.Lock = 1;
 8000eb4:	4b34      	ldr	r3, [pc, #208]	; (8000f88 <W25qxx_WritePage+0xf4>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	if(((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8000ebc:	683a      	ldr	r2, [r7, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	4a31      	ldr	r2, [pc, #196]	; (8000f88 <W25qxx_WritePage+0xf4>)
 8000ec4:	8952      	ldrh	r2, [r2, #10]
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d802      	bhi.n	8000ed0 <W25qxx_WritePage+0x3c>
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d105      	bne.n	8000edc <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8000ed0:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <W25qxx_WritePage+0xf4>)
 8000ed2:	895b      	ldrh	r3, [r3, #10]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	603b      	str	r3, [r7, #0]

	if((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4a29      	ldr	r2, [pc, #164]	; (8000f88 <W25qxx_WritePage+0xf4>)
 8000ee4:	8952      	ldrh	r2, [r2, #10]
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d905      	bls.n	8000ef6 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8000eea:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <W25qxx_WritePage+0xf4>)
 8000eec:	895b      	ldrh	r3, [r3, #10]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	603b      	str	r3, [r7, #0]


	W25qxx_WaitForWriteEnd();
 8000ef6:	f7ff fe4d 	bl	8000b94 <W25qxx_WaitForWriteEnd>

	W25qxx_WriteEnable();
 8000efa:	f7ff fe35 	bl	8000b68 <W25qxx_WriteEnable>

	W25QFLASH_CS_SELECT;
 8000efe:	2200      	movs	r2, #0
 8000f00:	2101      	movs	r1, #1
 8000f02:	4822      	ldr	r0, [pc, #136]	; (8000f8c <W25qxx_WritePage+0xf8>)
 8000f04:	f000 fef4 	bl	8001cf0 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_PAGE_PROGRAMM);
 8000f08:	2002      	movs	r0, #2
 8000f0a:	f7ff fde1 	bl	8000ad0 <W25qxx_Spi>

	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <W25qxx_WritePage+0xf4>)
 8000f10:	895b      	ldrh	r3, [r3, #10]
 8000f12:	461a      	mov	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	fb03 f302 	mul.w	r3, r3, r2
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]

	if(w25qxx.ID >= W25Q256)
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <W25qxx_WritePage+0xf4>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d905      	bls.n	8000f34 <W25qxx_WritePage+0xa0>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	0e1b      	lsrs	r3, r3, #24
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fdce 	bl	8000ad0 <W25qxx_Spi>

	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	0c1b      	lsrs	r3, r3, #16
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fdc8 	bl	8000ad0 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	0a1b      	lsrs	r3, r3, #8
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fdc2 	bl	8000ad0 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fdbd 	bl	8000ad0 <W25qxx_Spi>

	HAL_SPI_Transmit(W25QXX_SPI_PTR, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	2364      	movs	r3, #100	; 0x64
 8000f5c:	68f9      	ldr	r1, [r7, #12]
 8000f5e:	480c      	ldr	r0, [pc, #48]	; (8000f90 <W25qxx_WritePage+0xfc>)
 8000f60:	f001 fba2 	bl	80026a8 <HAL_SPI_Transmit>

	W25QFLASH_CS_UNSELECT;
 8000f64:	2201      	movs	r2, #1
 8000f66:	2101      	movs	r1, #1
 8000f68:	4808      	ldr	r0, [pc, #32]	; (8000f8c <W25qxx_WritePage+0xf8>)
 8000f6a:	f000 fec1 	bl	8001cf0 <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 8000f6e:	f7ff fe11 	bl	8000b94 <W25qxx_WaitForWriteEnd>

	W25qxx_Delay(1);
 8000f72:	2001      	movs	r0, #1
 8000f74:	f000 f968 	bl	8001248 <HAL_Delay>
	w25qxx.Lock = 0;
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <W25qxx_WritePage+0xf4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	200004c8 	.word	0x200004c8
 8000f8c:	40010c00 	.word	0x40010c00
 8000f90:	2000042c 	.word	0x2000042c

08000f94 <W25qxx_ReadBytes>:
	w25qxx.Lock = 0;
}

//###################################################################################################################
void W25qxx_ReadBytes(uint8_t* pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock == 1)
 8000fa0:	e002      	b.n	8000fa8 <W25qxx_ReadBytes+0x14>
	W25qxx_Delay(1);
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f000 f950 	bl	8001248 <HAL_Delay>
	while(w25qxx.Lock == 1)
 8000fa8:	4b23      	ldr	r3, [pc, #140]	; (8001038 <W25qxx_ReadBytes+0xa4>)
 8000faa:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d0f7      	beq.n	8000fa2 <W25qxx_ReadBytes+0xe>

	w25qxx.Lock = 1;
 8000fb2:	4b21      	ldr	r3, [pc, #132]	; (8001038 <W25qxx_ReadBytes+0xa4>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	W25QFLASH_CS_SELECT;
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	481f      	ldr	r0, [pc, #124]	; (800103c <W25qxx_ReadBytes+0xa8>)
 8000fc0:	f000 fe96 	bl	8001cf0 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_FAST_READ);
 8000fc4:	200b      	movs	r0, #11
 8000fc6:	f7ff fd83 	bl	8000ad0 <W25qxx_Spi>

	if(w25qxx.ID >= W25Q256)
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <W25qxx_ReadBytes+0xa4>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b08      	cmp	r3, #8
 8000fd0:	d905      	bls.n	8000fde <W25qxx_ReadBytes+0x4a>
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	0e1b      	lsrs	r3, r3, #24
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fd79 	bl	8000ad0 <W25qxx_Spi>

	W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	0c1b      	lsrs	r3, r3, #16
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fd73 	bl	8000ad0 <W25qxx_Spi>
	W25qxx_Spi((ReadAddr& 0xFF00) >> 8);
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	0a1b      	lsrs	r3, r3, #8
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fd6d 	bl	8000ad0 <W25qxx_Spi>
	W25qxx_Spi(ReadAddr & 0xFF);
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fd68 	bl	8000ad0 <W25qxx_Spi>
	W25qxx_Spi(0);
 8001000:	2000      	movs	r0, #0
 8001002:	f7ff fd65 	bl	8000ad0 <W25qxx_Spi>

	HAL_SPI_Receive(W25QXX_SPI_PTR, pBuffer, NumByteToRead, 2000);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	b29a      	uxth	r2, r3
 800100a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800100e:	68f9      	ldr	r1, [r7, #12]
 8001010:	480b      	ldr	r0, [pc, #44]	; (8001040 <W25qxx_ReadBytes+0xac>)
 8001012:	f001 fc85 	bl	8002920 <HAL_SPI_Receive>
		while(!(W25QXX_SPI->SR & SPI_SR_RXNE));
		pBuffer[i++] = W25QXX_SPI->DR;
		NumByteToRead--;
	}*/

	W25QFLASH_CS_UNSELECT;
 8001016:	2201      	movs	r2, #1
 8001018:	2101      	movs	r1, #1
 800101a:	4808      	ldr	r0, [pc, #32]	; (800103c <W25qxx_ReadBytes+0xa8>)
 800101c:	f000 fe68 	bl	8001cf0 <HAL_GPIO_WritePin>

	W25qxx_Delay(1);
 8001020:	2001      	movs	r0, #1
 8001022:	f000 f911 	bl	8001248 <HAL_Delay>
	w25qxx.Lock = 0;
 8001026:	4b04      	ldr	r3, [pc, #16]	; (8001038 <W25qxx_ReadBytes+0xa4>)
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200004c8 	.word	0x200004c8
 800103c:	40010c00 	.word	0x40010c00
 8001040:	2000042c 	.word	0x2000042c

08001044 <W25qxx_ReadPage>:

//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 8001052:	e002      	b.n	800105a <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8001054:	2001      	movs	r0, #1
 8001056:	f000 f8f7 	bl	8001248 <HAL_Delay>
	while(w25qxx.Lock==1)
 800105a:	4b34      	ldr	r3, [pc, #208]	; (800112c <W25qxx_ReadPage+0xe8>)
 800105c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001060:	2b01      	cmp	r3, #1
 8001062:	d0f7      	beq.n	8001054 <W25qxx_ReadPage+0x10>

	w25qxx.Lock = 1;
 8001064:	4b31      	ldr	r3, [pc, #196]	; (800112c <W25qxx_ReadPage+0xe8>)
 8001066:	2201      	movs	r2, #1
 8001068:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	if((NumByteToRead_up_to_PageSize>w25qxx.PageSize) || (NumByteToRead_up_to_PageSize==0))
 800106c:	4b2f      	ldr	r3, [pc, #188]	; (800112c <W25qxx_ReadPage+0xe8>)
 800106e:	895b      	ldrh	r3, [r3, #10]
 8001070:	461a      	mov	r2, r3
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	4293      	cmp	r3, r2
 8001076:	d802      	bhi.n	800107e <W25qxx_ReadPage+0x3a>
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d102      	bne.n	8001084 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize=w25qxx.PageSize;
 800107e:	4b2b      	ldr	r3, [pc, #172]	; (800112c <W25qxx_ReadPage+0xe8>)
 8001080:	895b      	ldrh	r3, [r3, #10]
 8001082:	603b      	str	r3, [r7, #0]

	if((OffsetInByte+NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	4413      	add	r3, r2
 800108a:	4a28      	ldr	r2, [pc, #160]	; (800112c <W25qxx_ReadPage+0xe8>)
 800108c:	8952      	ldrh	r2, [r2, #10]
 800108e:	4293      	cmp	r3, r2
 8001090:	d905      	bls.n	800109e <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8001092:	4b26      	ldr	r3, [pc, #152]	; (800112c <W25qxx_ReadPage+0xe8>)
 8001094:	895b      	ldrh	r3, [r3, #10]
 8001096:	461a      	mov	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	603b      	str	r3, [r7, #0]

	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800109e:	4b23      	ldr	r3, [pc, #140]	; (800112c <W25qxx_ReadPage+0xe8>)
 80010a0:	895b      	ldrh	r3, [r3, #10]
 80010a2:	461a      	mov	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	fb03 f302 	mul.w	r3, r3, r2
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	60bb      	str	r3, [r7, #8]
	W25QFLASH_CS_SELECT;
 80010b0:	2200      	movs	r2, #0
 80010b2:	2101      	movs	r1, #1
 80010b4:	481e      	ldr	r0, [pc, #120]	; (8001130 <W25qxx_ReadPage+0xec>)
 80010b6:	f000 fe1b 	bl	8001cf0 <HAL_GPIO_WritePin>

	W25qxx_Spi(W25_FAST_READ);
 80010ba:	200b      	movs	r0, #11
 80010bc:	f7ff fd08 	bl	8000ad0 <W25qxx_Spi>

	if(w25qxx.ID >= W25Q256)
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <W25qxx_ReadPage+0xe8>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b08      	cmp	r3, #8
 80010c6:	d905      	bls.n	80010d4 <W25qxx_ReadPage+0x90>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	0e1b      	lsrs	r3, r3, #24
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fcfe 	bl	8000ad0 <W25qxx_Spi>

	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	0c1b      	lsrs	r3, r3, #16
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fcf8 	bl	8000ad0 <W25qxx_Spi>
	W25qxx_Spi((Page_Address& 0xFF00) >> 8);
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	0a1b      	lsrs	r3, r3, #8
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fcf2 	bl	8000ad0 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fced 	bl	8000ad0 <W25qxx_Spi>

	W25qxx_Spi(0);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f7ff fcea 	bl	8000ad0 <W25qxx_Spi>

	HAL_SPI_Receive(W25QXX_SPI_PTR, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b29a      	uxth	r2, r3
 8001100:	2364      	movs	r3, #100	; 0x64
 8001102:	68f9      	ldr	r1, [r7, #12]
 8001104:	480b      	ldr	r0, [pc, #44]	; (8001134 <W25qxx_ReadPage+0xf0>)
 8001106:	f001 fc0b 	bl	8002920 <HAL_SPI_Receive>
		while(!(W25QXX_SPI->SR & SPI_SR_RXNE));
		pBuffer[i++] = W25QXX_SPI->DR;
		NumByteToRead_up_to_PageSize--;
	}*/

	W25QFLASH_CS_UNSELECT;
 800110a:	2201      	movs	r2, #1
 800110c:	2101      	movs	r1, #1
 800110e:	4808      	ldr	r0, [pc, #32]	; (8001130 <W25qxx_ReadPage+0xec>)
 8001110:	f000 fdee 	bl	8001cf0 <HAL_GPIO_WritePin>

	W25qxx_Delay(1);
 8001114:	2001      	movs	r0, #1
 8001116:	f000 f897 	bl	8001248 <HAL_Delay>
	w25qxx.Lock=0;
 800111a:	4b04      	ldr	r3, [pc, #16]	; (800112c <W25qxx_ReadPage+0xe8>)
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200004c8 	.word	0x200004c8
 8001130:	40010c00 	.word	0x40010c00
 8001134:	2000042c 	.word	0x2000042c

08001138 <Reset_Handler>:
 8001138:	480c      	ldr	r0, [pc, #48]	; (800116c <LoopFillZerobss+0x12>)
 800113a:	490d      	ldr	r1, [pc, #52]	; (8001170 <LoopFillZerobss+0x16>)
 800113c:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <LoopFillZerobss+0x1a>)
 800113e:	2300      	movs	r3, #0
 8001140:	e002      	b.n	8001148 <LoopCopyDataInit>

08001142 <CopyDataInit>:
 8001142:	58d4      	ldr	r4, [r2, r3]
 8001144:	50c4      	str	r4, [r0, r3]
 8001146:	3304      	adds	r3, #4

08001148 <LoopCopyDataInit>:
 8001148:	18c4      	adds	r4, r0, r3
 800114a:	428c      	cmp	r4, r1
 800114c:	d3f9      	bcc.n	8001142 <CopyDataInit>
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <LoopFillZerobss+0x1e>)
 8001150:	4c0a      	ldr	r4, [pc, #40]	; (800117c <LoopFillZerobss+0x22>)
 8001152:	2300      	movs	r3, #0
 8001154:	e001      	b.n	800115a <LoopFillZerobss>

08001156 <FillZerobss>:
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	3204      	adds	r2, #4

0800115a <LoopFillZerobss>:
 800115a:	42a2      	cmp	r2, r4
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>
 800115e:	f7ff fcb1 	bl	8000ac4 <SystemInit>
 8001162:	f002 fe1f 	bl	8003da4 <__libc_init_array>
 8001166:	f7fe fff1 	bl	800014c <main>
 800116a:	4770      	bx	lr
 800116c:	20000000 	.word	0x20000000
 8001170:	20000010 	.word	0x20000010
 8001174:	08003e44 	.word	0x08003e44
 8001178:	20000010 	.word	0x20000010
 800117c:	200004f4 	.word	0x200004f4

08001180 <ADC1_2_IRQHandler>:
 8001180:	e7fe      	b.n	8001180 <ADC1_2_IRQHandler>
	...

08001184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <HAL_Init+0x28>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a07      	ldr	r2, [pc, #28]	; (80011ac <HAL_Init+0x28>)
 800118e:	f043 0310 	orr.w	r3, r3, #16
 8001192:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001194:	2003      	movs	r0, #3
 8001196:	f000 f947 	bl	8001428 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800119a:	2000      	movs	r0, #0
 800119c:	f000 f808 	bl	80011b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a0:	f7ff fad6 	bl	8000750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40022000 	.word	0x40022000

080011b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_InitTick+0x54>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_InitTick+0x58>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f95f 	bl	8001492 <HAL_SYSTICK_Config>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e00e      	b.n	80011fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b0f      	cmp	r3, #15
 80011e2:	d80a      	bhi.n	80011fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e4:	2200      	movs	r2, #0
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f000 f927 	bl	800143e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f0:	4a06      	ldr	r2, [pc, #24]	; (800120c <HAL_InitTick+0x5c>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e000      	b.n	80011fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000004 	.word	0x20000004
 8001208:	2000000c 	.word	0x2000000c
 800120c:	20000008 	.word	0x20000008

08001210 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <HAL_IncTick+0x1c>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <HAL_IncTick+0x20>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a03      	ldr	r2, [pc, #12]	; (8001230 <HAL_IncTick+0x20>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	2000000c 	.word	0x2000000c
 8001230:	200004f0 	.word	0x200004f0

08001234 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return uwTick;
 8001238:	4b02      	ldr	r3, [pc, #8]	; (8001244 <HAL_GetTick+0x10>)
 800123a:	681b      	ldr	r3, [r3, #0]
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr
 8001244:	200004f0 	.word	0x200004f0

08001248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001250:	f7ff fff0 	bl	8001234 <HAL_GetTick>
 8001254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001260:	d005      	beq.n	800126e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001262:	4b0a      	ldr	r3, [pc, #40]	; (800128c <HAL_Delay+0x44>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4413      	add	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800126e:	bf00      	nop
 8001270:	f7ff ffe0 	bl	8001234 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	429a      	cmp	r2, r3
 800127e:	d8f7      	bhi.n	8001270 <HAL_Delay+0x28>
  {
  }
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	2000000c 	.word	0x2000000c

08001290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <__NVIC_SetPriorityGrouping+0x44>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012ac:	4013      	ands	r3, r2
 80012ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c2:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <__NVIC_SetPriorityGrouping+0x44>)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	60d3      	str	r3, [r2, #12]
}
 80012c8:	bf00      	nop
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012dc:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <__NVIC_GetPriorityGrouping+0x18>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	0a1b      	lsrs	r3, r3, #8
 80012e2:	f003 0307 	and.w	r3, r3, #7
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	2b00      	cmp	r3, #0
 8001304:	db0b      	blt.n	800131e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	f003 021f 	and.w	r2, r3, #31
 800130c:	4906      	ldr	r1, [pc, #24]	; (8001328 <__NVIC_EnableIRQ+0x34>)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	095b      	lsrs	r3, r3, #5
 8001314:	2001      	movs	r0, #1
 8001316:	fa00 f202 	lsl.w	r2, r0, r2
 800131a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	e000e100 	.word	0xe000e100

0800132c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	2b00      	cmp	r3, #0
 800133e:	db0a      	blt.n	8001356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	b2da      	uxtb	r2, r3
 8001344:	490c      	ldr	r1, [pc, #48]	; (8001378 <__NVIC_SetPriority+0x4c>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	0112      	lsls	r2, r2, #4
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	440b      	add	r3, r1
 8001350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001354:	e00a      	b.n	800136c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4908      	ldr	r1, [pc, #32]	; (800137c <__NVIC_SetPriority+0x50>)
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	3b04      	subs	r3, #4
 8001364:	0112      	lsls	r2, r2, #4
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	440b      	add	r3, r1
 800136a:	761a      	strb	r2, [r3, #24]
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000e100 	.word	0xe000e100
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001380:	b480      	push	{r7}
 8001382:	b089      	sub	sp, #36	; 0x24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f1c3 0307 	rsb	r3, r3, #7
 800139a:	2b04      	cmp	r3, #4
 800139c:	bf28      	it	cs
 800139e:	2304      	movcs	r3, #4
 80013a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3304      	adds	r3, #4
 80013a6:	2b06      	cmp	r3, #6
 80013a8:	d902      	bls.n	80013b0 <NVIC_EncodePriority+0x30>
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3b03      	subs	r3, #3
 80013ae:	e000      	b.n	80013b2 <NVIC_EncodePriority+0x32>
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	f04f 32ff 	mov.w	r2, #4294967295
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43da      	mvns	r2, r3
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	401a      	ands	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c8:	f04f 31ff 	mov.w	r1, #4294967295
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	fa01 f303 	lsl.w	r3, r1, r3
 80013d2:	43d9      	mvns	r1, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	4313      	orrs	r3, r2
         );
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3724      	adds	r7, #36	; 0x24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f4:	d301      	bcc.n	80013fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00f      	b.n	800141a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <SysTick_Config+0x40>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001402:	210f      	movs	r1, #15
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	f7ff ff90 	bl	800132c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <SysTick_Config+0x40>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001412:	4b04      	ldr	r3, [pc, #16]	; (8001424 <SysTick_Config+0x40>)
 8001414:	2207      	movs	r2, #7
 8001416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	e000e010 	.word	0xe000e010

08001428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ff2d 	bl	8001290 <__NVIC_SetPriorityGrouping>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800143e:	b580      	push	{r7, lr}
 8001440:	b086      	sub	sp, #24
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001450:	f7ff ff42 	bl	80012d8 <__NVIC_GetPriorityGrouping>
 8001454:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	6978      	ldr	r0, [r7, #20]
 800145c:	f7ff ff90 	bl	8001380 <NVIC_EncodePriority>
 8001460:	4602      	mov	r2, r0
 8001462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff5f 	bl	800132c <__NVIC_SetPriority>
}
 800146e:	bf00      	nop
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff35 	bl	80012f4 <__NVIC_EnableIRQ>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ffa2 	bl	80013e4 <SysTick_Config>
 80014a0:	4603      	mov	r3, r0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e043      	b.n	800154a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b22      	ldr	r3, [pc, #136]	; (8001554 <HAL_DMA_Init+0xa8>)
 80014ca:	4413      	add	r3, r2
 80014cc:	4a22      	ldr	r2, [pc, #136]	; (8001558 <HAL_DMA_Init+0xac>)
 80014ce:	fba2 2303 	umull	r2, r3, r2, r3
 80014d2:	091b      	lsrs	r3, r3, #4
 80014d4:	009a      	lsls	r2, r3, #2
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a1f      	ldr	r2, [pc, #124]	; (800155c <HAL_DMA_Init+0xb0>)
 80014de:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2202      	movs	r2, #2
 80014e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80014f6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80014fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001504:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001510:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800151c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	4313      	orrs	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2201      	movs	r2, #1
 800153c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	bffdfff8 	.word	0xbffdfff8
 8001558:	cccccccd 	.word	0xcccccccd
 800155c:	40020000 	.word	0x40020000

08001560 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d101      	bne.n	8001580 <HAL_DMA_Start_IT+0x20>
 800157c:	2302      	movs	r3, #2
 800157e:	e04a      	b.n	8001616 <HAL_DMA_Start_IT+0xb6>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800158e:	2b01      	cmp	r3, #1
 8001590:	d13a      	bne.n	8001608 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2202      	movs	r2, #2
 8001596:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2200      	movs	r2, #0
 800159e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0201 	bic.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	f000 f9e8 	bl	800198c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d008      	beq.n	80015d6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 020e 	orr.w	r2, r2, #14
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	e00f      	b.n	80015f6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 0204 	bic.w	r2, r2, #4
 80015e4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f042 020a 	orr.w	r2, r2, #10
 80015f4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f042 0201 	orr.w	r2, r2, #1
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	e005      	b.n	8001614 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001610:	2302      	movs	r3, #2
 8001612:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001614:	7dfb      	ldrb	r3, [r7, #23]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800161e:	b480      	push	{r7}
 8001620:	b085      	sub	sp, #20
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001630:	2b02      	cmp	r3, #2
 8001632:	d008      	beq.n	8001646 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2204      	movs	r2, #4
 8001638:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e020      	b.n	8001688 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 020e 	bic.w	r2, r2, #14
 8001654:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 0201 	bic.w	r2, r2, #1
 8001664:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800166e:	2101      	movs	r1, #1
 8001670:	fa01 f202 	lsl.w	r2, r1, r2
 8001674:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001686:	7bfb      	ldrb	r3, [r7, #15]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
	...

08001694 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d005      	beq.n	80016b6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2204      	movs	r2, #4
 80016ae:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	73fb      	strb	r3, [r7, #15]
 80016b4:	e051      	b.n	800175a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 020e 	bic.w	r2, r2, #14
 80016c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 0201 	bic.w	r2, r2, #1
 80016d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a22      	ldr	r2, [pc, #136]	; (8001764 <HAL_DMA_Abort_IT+0xd0>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d029      	beq.n	8001734 <HAL_DMA_Abort_IT+0xa0>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a20      	ldr	r2, [pc, #128]	; (8001768 <HAL_DMA_Abort_IT+0xd4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d022      	beq.n	8001730 <HAL_DMA_Abort_IT+0x9c>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a1f      	ldr	r2, [pc, #124]	; (800176c <HAL_DMA_Abort_IT+0xd8>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d01a      	beq.n	800172a <HAL_DMA_Abort_IT+0x96>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a1d      	ldr	r2, [pc, #116]	; (8001770 <HAL_DMA_Abort_IT+0xdc>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d012      	beq.n	8001724 <HAL_DMA_Abort_IT+0x90>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a1c      	ldr	r2, [pc, #112]	; (8001774 <HAL_DMA_Abort_IT+0xe0>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d00a      	beq.n	800171e <HAL_DMA_Abort_IT+0x8a>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a1a      	ldr	r2, [pc, #104]	; (8001778 <HAL_DMA_Abort_IT+0xe4>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d102      	bne.n	8001718 <HAL_DMA_Abort_IT+0x84>
 8001712:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001716:	e00e      	b.n	8001736 <HAL_DMA_Abort_IT+0xa2>
 8001718:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800171c:	e00b      	b.n	8001736 <HAL_DMA_Abort_IT+0xa2>
 800171e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001722:	e008      	b.n	8001736 <HAL_DMA_Abort_IT+0xa2>
 8001724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001728:	e005      	b.n	8001736 <HAL_DMA_Abort_IT+0xa2>
 800172a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800172e:	e002      	b.n	8001736 <HAL_DMA_Abort_IT+0xa2>
 8001730:	2310      	movs	r3, #16
 8001732:	e000      	b.n	8001736 <HAL_DMA_Abort_IT+0xa2>
 8001734:	2301      	movs	r3, #1
 8001736:	4a11      	ldr	r2, [pc, #68]	; (800177c <HAL_DMA_Abort_IT+0xe8>)
 8001738:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	4798      	blx	r3
    } 
  }
  return status;
 800175a:	7bfb      	ldrb	r3, [r7, #15]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40020008 	.word	0x40020008
 8001768:	4002001c 	.word	0x4002001c
 800176c:	40020030 	.word	0x40020030
 8001770:	40020044 	.word	0x40020044
 8001774:	40020058 	.word	0x40020058
 8001778:	4002006c 	.word	0x4002006c
 800177c:	40020000 	.word	0x40020000

08001780 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	2204      	movs	r2, #4
 800179e:	409a      	lsls	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d04f      	beq.n	8001848 <HAL_DMA_IRQHandler+0xc8>
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d04a      	beq.n	8001848 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0320 	and.w	r3, r3, #32
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d107      	bne.n	80017d0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0204 	bic.w	r2, r2, #4
 80017ce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a66      	ldr	r2, [pc, #408]	; (8001970 <HAL_DMA_IRQHandler+0x1f0>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d029      	beq.n	800182e <HAL_DMA_IRQHandler+0xae>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a65      	ldr	r2, [pc, #404]	; (8001974 <HAL_DMA_IRQHandler+0x1f4>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d022      	beq.n	800182a <HAL_DMA_IRQHandler+0xaa>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a63      	ldr	r2, [pc, #396]	; (8001978 <HAL_DMA_IRQHandler+0x1f8>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d01a      	beq.n	8001824 <HAL_DMA_IRQHandler+0xa4>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a62      	ldr	r2, [pc, #392]	; (800197c <HAL_DMA_IRQHandler+0x1fc>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d012      	beq.n	800181e <HAL_DMA_IRQHandler+0x9e>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a60      	ldr	r2, [pc, #384]	; (8001980 <HAL_DMA_IRQHandler+0x200>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d00a      	beq.n	8001818 <HAL_DMA_IRQHandler+0x98>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a5f      	ldr	r2, [pc, #380]	; (8001984 <HAL_DMA_IRQHandler+0x204>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d102      	bne.n	8001812 <HAL_DMA_IRQHandler+0x92>
 800180c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001810:	e00e      	b.n	8001830 <HAL_DMA_IRQHandler+0xb0>
 8001812:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001816:	e00b      	b.n	8001830 <HAL_DMA_IRQHandler+0xb0>
 8001818:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800181c:	e008      	b.n	8001830 <HAL_DMA_IRQHandler+0xb0>
 800181e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001822:	e005      	b.n	8001830 <HAL_DMA_IRQHandler+0xb0>
 8001824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001828:	e002      	b.n	8001830 <HAL_DMA_IRQHandler+0xb0>
 800182a:	2340      	movs	r3, #64	; 0x40
 800182c:	e000      	b.n	8001830 <HAL_DMA_IRQHandler+0xb0>
 800182e:	2304      	movs	r3, #4
 8001830:	4a55      	ldr	r2, [pc, #340]	; (8001988 <HAL_DMA_IRQHandler+0x208>)
 8001832:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 8094 	beq.w	8001966 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001846:	e08e      	b.n	8001966 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	2202      	movs	r2, #2
 800184e:	409a      	lsls	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4013      	ands	r3, r2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d056      	beq.n	8001906 <HAL_DMA_IRQHandler+0x186>
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d051      	beq.n	8001906 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0320 	and.w	r3, r3, #32
 800186c:	2b00      	cmp	r3, #0
 800186e:	d10b      	bne.n	8001888 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 020a 	bic.w	r2, r2, #10
 800187e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a38      	ldr	r2, [pc, #224]	; (8001970 <HAL_DMA_IRQHandler+0x1f0>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d029      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x166>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a37      	ldr	r2, [pc, #220]	; (8001974 <HAL_DMA_IRQHandler+0x1f4>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d022      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x162>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a35      	ldr	r2, [pc, #212]	; (8001978 <HAL_DMA_IRQHandler+0x1f8>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d01a      	beq.n	80018dc <HAL_DMA_IRQHandler+0x15c>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a34      	ldr	r2, [pc, #208]	; (800197c <HAL_DMA_IRQHandler+0x1fc>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d012      	beq.n	80018d6 <HAL_DMA_IRQHandler+0x156>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a32      	ldr	r2, [pc, #200]	; (8001980 <HAL_DMA_IRQHandler+0x200>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d00a      	beq.n	80018d0 <HAL_DMA_IRQHandler+0x150>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a31      	ldr	r2, [pc, #196]	; (8001984 <HAL_DMA_IRQHandler+0x204>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d102      	bne.n	80018ca <HAL_DMA_IRQHandler+0x14a>
 80018c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018c8:	e00e      	b.n	80018e8 <HAL_DMA_IRQHandler+0x168>
 80018ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018ce:	e00b      	b.n	80018e8 <HAL_DMA_IRQHandler+0x168>
 80018d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018d4:	e008      	b.n	80018e8 <HAL_DMA_IRQHandler+0x168>
 80018d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018da:	e005      	b.n	80018e8 <HAL_DMA_IRQHandler+0x168>
 80018dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018e0:	e002      	b.n	80018e8 <HAL_DMA_IRQHandler+0x168>
 80018e2:	2320      	movs	r3, #32
 80018e4:	e000      	b.n	80018e8 <HAL_DMA_IRQHandler+0x168>
 80018e6:	2302      	movs	r3, #2
 80018e8:	4a27      	ldr	r2, [pc, #156]	; (8001988 <HAL_DMA_IRQHandler+0x208>)
 80018ea:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d034      	beq.n	8001966 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001904:	e02f      	b.n	8001966 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	2208      	movs	r2, #8
 800190c:	409a      	lsls	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	4013      	ands	r3, r2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d028      	beq.n	8001968 <HAL_DMA_IRQHandler+0x1e8>
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d023      	beq.n	8001968 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 020e 	bic.w	r2, r2, #14
 800192e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001938:	2101      	movs	r1, #1
 800193a:	fa01 f202 	lsl.w	r2, r1, r2
 800193e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	2b00      	cmp	r3, #0
 800195c:	d004      	beq.n	8001968 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	4798      	blx	r3
    }
  }
  return;
 8001966:	bf00      	nop
 8001968:	bf00      	nop
}
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40020008 	.word	0x40020008
 8001974:	4002001c 	.word	0x4002001c
 8001978:	40020030 	.word	0x40020030
 800197c:	40020044 	.word	0x40020044
 8001980:	40020058 	.word	0x40020058
 8001984:	4002006c 	.word	0x4002006c
 8001988:	40020000 	.word	0x40020000

0800198c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a2:	2101      	movs	r1, #1
 80019a4:	fa01 f202 	lsl.w	r2, r1, r2
 80019a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b10      	cmp	r3, #16
 80019b8:	d108      	bne.n	80019cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019ca:	e007      	b.n	80019dc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	60da      	str	r2, [r3, #12]
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
	...

080019e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b08b      	sub	sp, #44	; 0x2c
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019f2:	2300      	movs	r3, #0
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019f6:	2300      	movs	r3, #0
 80019f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019fa:	e169      	b.n	8001cd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019fc:	2201      	movs	r2, #1
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	f040 8158 	bne.w	8001cca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	4a9a      	ldr	r2, [pc, #616]	; (8001c88 <HAL_GPIO_Init+0x2a0>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d05e      	beq.n	8001ae2 <HAL_GPIO_Init+0xfa>
 8001a24:	4a98      	ldr	r2, [pc, #608]	; (8001c88 <HAL_GPIO_Init+0x2a0>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d875      	bhi.n	8001b16 <HAL_GPIO_Init+0x12e>
 8001a2a:	4a98      	ldr	r2, [pc, #608]	; (8001c8c <HAL_GPIO_Init+0x2a4>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d058      	beq.n	8001ae2 <HAL_GPIO_Init+0xfa>
 8001a30:	4a96      	ldr	r2, [pc, #600]	; (8001c8c <HAL_GPIO_Init+0x2a4>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d86f      	bhi.n	8001b16 <HAL_GPIO_Init+0x12e>
 8001a36:	4a96      	ldr	r2, [pc, #600]	; (8001c90 <HAL_GPIO_Init+0x2a8>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d052      	beq.n	8001ae2 <HAL_GPIO_Init+0xfa>
 8001a3c:	4a94      	ldr	r2, [pc, #592]	; (8001c90 <HAL_GPIO_Init+0x2a8>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d869      	bhi.n	8001b16 <HAL_GPIO_Init+0x12e>
 8001a42:	4a94      	ldr	r2, [pc, #592]	; (8001c94 <HAL_GPIO_Init+0x2ac>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d04c      	beq.n	8001ae2 <HAL_GPIO_Init+0xfa>
 8001a48:	4a92      	ldr	r2, [pc, #584]	; (8001c94 <HAL_GPIO_Init+0x2ac>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d863      	bhi.n	8001b16 <HAL_GPIO_Init+0x12e>
 8001a4e:	4a92      	ldr	r2, [pc, #584]	; (8001c98 <HAL_GPIO_Init+0x2b0>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d046      	beq.n	8001ae2 <HAL_GPIO_Init+0xfa>
 8001a54:	4a90      	ldr	r2, [pc, #576]	; (8001c98 <HAL_GPIO_Init+0x2b0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d85d      	bhi.n	8001b16 <HAL_GPIO_Init+0x12e>
 8001a5a:	2b12      	cmp	r3, #18
 8001a5c:	d82a      	bhi.n	8001ab4 <HAL_GPIO_Init+0xcc>
 8001a5e:	2b12      	cmp	r3, #18
 8001a60:	d859      	bhi.n	8001b16 <HAL_GPIO_Init+0x12e>
 8001a62:	a201      	add	r2, pc, #4	; (adr r2, 8001a68 <HAL_GPIO_Init+0x80>)
 8001a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a68:	08001ae3 	.word	0x08001ae3
 8001a6c:	08001abd 	.word	0x08001abd
 8001a70:	08001acf 	.word	0x08001acf
 8001a74:	08001b11 	.word	0x08001b11
 8001a78:	08001b17 	.word	0x08001b17
 8001a7c:	08001b17 	.word	0x08001b17
 8001a80:	08001b17 	.word	0x08001b17
 8001a84:	08001b17 	.word	0x08001b17
 8001a88:	08001b17 	.word	0x08001b17
 8001a8c:	08001b17 	.word	0x08001b17
 8001a90:	08001b17 	.word	0x08001b17
 8001a94:	08001b17 	.word	0x08001b17
 8001a98:	08001b17 	.word	0x08001b17
 8001a9c:	08001b17 	.word	0x08001b17
 8001aa0:	08001b17 	.word	0x08001b17
 8001aa4:	08001b17 	.word	0x08001b17
 8001aa8:	08001b17 	.word	0x08001b17
 8001aac:	08001ac5 	.word	0x08001ac5
 8001ab0:	08001ad9 	.word	0x08001ad9
 8001ab4:	4a79      	ldr	r2, [pc, #484]	; (8001c9c <HAL_GPIO_Init+0x2b4>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d013      	beq.n	8001ae2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001aba:	e02c      	b.n	8001b16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	623b      	str	r3, [r7, #32]
          break;
 8001ac2:	e029      	b.n	8001b18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	3304      	adds	r3, #4
 8001aca:	623b      	str	r3, [r7, #32]
          break;
 8001acc:	e024      	b.n	8001b18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	3308      	adds	r3, #8
 8001ad4:	623b      	str	r3, [r7, #32]
          break;
 8001ad6:	e01f      	b.n	8001b18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	330c      	adds	r3, #12
 8001ade:	623b      	str	r3, [r7, #32]
          break;
 8001ae0:	e01a      	b.n	8001b18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d102      	bne.n	8001af0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001aea:	2304      	movs	r3, #4
 8001aec:	623b      	str	r3, [r7, #32]
          break;
 8001aee:	e013      	b.n	8001b18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d105      	bne.n	8001b04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001af8:	2308      	movs	r3, #8
 8001afa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69fa      	ldr	r2, [r7, #28]
 8001b00:	611a      	str	r2, [r3, #16]
          break;
 8001b02:	e009      	b.n	8001b18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b04:	2308      	movs	r3, #8
 8001b06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69fa      	ldr	r2, [r7, #28]
 8001b0c:	615a      	str	r2, [r3, #20]
          break;
 8001b0e:	e003      	b.n	8001b18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b10:	2300      	movs	r3, #0
 8001b12:	623b      	str	r3, [r7, #32]
          break;
 8001b14:	e000      	b.n	8001b18 <HAL_GPIO_Init+0x130>
          break;
 8001b16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	2bff      	cmp	r3, #255	; 0xff
 8001b1c:	d801      	bhi.n	8001b22 <HAL_GPIO_Init+0x13a>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	e001      	b.n	8001b26 <HAL_GPIO_Init+0x13e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3304      	adds	r3, #4
 8001b26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	2bff      	cmp	r3, #255	; 0xff
 8001b2c:	d802      	bhi.n	8001b34 <HAL_GPIO_Init+0x14c>
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	e002      	b.n	8001b3a <HAL_GPIO_Init+0x152>
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	3b08      	subs	r3, #8
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	210f      	movs	r1, #15
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	fa01 f303 	lsl.w	r3, r1, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	6a39      	ldr	r1, [r7, #32]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	fa01 f303 	lsl.w	r3, r1, r3
 8001b54:	431a      	orrs	r2, r3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 80b1 	beq.w	8001cca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b68:	4b4d      	ldr	r3, [pc, #308]	; (8001ca0 <HAL_GPIO_Init+0x2b8>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	4a4c      	ldr	r2, [pc, #304]	; (8001ca0 <HAL_GPIO_Init+0x2b8>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	6193      	str	r3, [r2, #24]
 8001b74:	4b4a      	ldr	r3, [pc, #296]	; (8001ca0 <HAL_GPIO_Init+0x2b8>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b80:	4a48      	ldr	r2, [pc, #288]	; (8001ca4 <HAL_GPIO_Init+0x2bc>)
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	089b      	lsrs	r3, r3, #2
 8001b86:	3302      	adds	r3, #2
 8001b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	220f      	movs	r2, #15
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a40      	ldr	r2, [pc, #256]	; (8001ca8 <HAL_GPIO_Init+0x2c0>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d013      	beq.n	8001bd4 <HAL_GPIO_Init+0x1ec>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a3f      	ldr	r2, [pc, #252]	; (8001cac <HAL_GPIO_Init+0x2c4>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d00d      	beq.n	8001bd0 <HAL_GPIO_Init+0x1e8>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a3e      	ldr	r2, [pc, #248]	; (8001cb0 <HAL_GPIO_Init+0x2c8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d007      	beq.n	8001bcc <HAL_GPIO_Init+0x1e4>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a3d      	ldr	r2, [pc, #244]	; (8001cb4 <HAL_GPIO_Init+0x2cc>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d101      	bne.n	8001bc8 <HAL_GPIO_Init+0x1e0>
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e006      	b.n	8001bd6 <HAL_GPIO_Init+0x1ee>
 8001bc8:	2304      	movs	r3, #4
 8001bca:	e004      	b.n	8001bd6 <HAL_GPIO_Init+0x1ee>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	e002      	b.n	8001bd6 <HAL_GPIO_Init+0x1ee>
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e000      	b.n	8001bd6 <HAL_GPIO_Init+0x1ee>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd8:	f002 0203 	and.w	r2, r2, #3
 8001bdc:	0092      	lsls	r2, r2, #2
 8001bde:	4093      	lsls	r3, r2
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001be6:	492f      	ldr	r1, [pc, #188]	; (8001ca4 <HAL_GPIO_Init+0x2bc>)
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	089b      	lsrs	r3, r3, #2
 8001bec:	3302      	adds	r3, #2
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d006      	beq.n	8001c0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c00:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	492c      	ldr	r1, [pc, #176]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	600b      	str	r3, [r1, #0]
 8001c0c:	e006      	b.n	8001c1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c0e:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	4928      	ldr	r1, [pc, #160]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001c18:	4013      	ands	r3, r2
 8001c1a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d006      	beq.n	8001c36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c28:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	4922      	ldr	r1, [pc, #136]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
 8001c34:	e006      	b.n	8001c44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c36:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	491e      	ldr	r1, [pc, #120]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d006      	beq.n	8001c5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c50:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	4918      	ldr	r1, [pc, #96]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	608b      	str	r3, [r1, #8]
 8001c5c:	e006      	b.n	8001c6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c5e:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	4914      	ldr	r1, [pc, #80]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d021      	beq.n	8001cbc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c78:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	490e      	ldr	r1, [pc, #56]	; (8001cb8 <HAL_GPIO_Init+0x2d0>)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	60cb      	str	r3, [r1, #12]
 8001c84:	e021      	b.n	8001cca <HAL_GPIO_Init+0x2e2>
 8001c86:	bf00      	nop
 8001c88:	10320000 	.word	0x10320000
 8001c8c:	10310000 	.word	0x10310000
 8001c90:	10220000 	.word	0x10220000
 8001c94:	10210000 	.word	0x10210000
 8001c98:	10120000 	.word	0x10120000
 8001c9c:	10110000 	.word	0x10110000
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40010000 	.word	0x40010000
 8001ca8:	40010800 	.word	0x40010800
 8001cac:	40010c00 	.word	0x40010c00
 8001cb0:	40011000 	.word	0x40011000
 8001cb4:	40011400 	.word	0x40011400
 8001cb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_GPIO_Init+0x304>)
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	4909      	ldr	r1, [pc, #36]	; (8001cec <HAL_GPIO_Init+0x304>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	3301      	adds	r3, #1
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f47f ae8e 	bne.w	80019fc <HAL_GPIO_Init+0x14>
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	372c      	adds	r7, #44	; 0x2c
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr
 8001cec:	40010400 	.word	0x40010400

08001cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	807b      	strh	r3, [r7, #2]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d00:	787b      	ldrb	r3, [r7, #1]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d06:	887a      	ldrh	r2, [r7, #2]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d0c:	e003      	b.n	8001d16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d0e:	887b      	ldrh	r3, [r7, #2]
 8001d10:	041a      	lsls	r2, r3, #16
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	611a      	str	r2, [r3, #16]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e26c      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 8087 	beq.w	8001e4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d40:	4b92      	ldr	r3, [pc, #584]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 030c 	and.w	r3, r3, #12
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d00c      	beq.n	8001d66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d4c:	4b8f      	ldr	r3, [pc, #572]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 030c 	and.w	r3, r3, #12
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d112      	bne.n	8001d7e <HAL_RCC_OscConfig+0x5e>
 8001d58:	4b8c      	ldr	r3, [pc, #560]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d64:	d10b      	bne.n	8001d7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d66:	4b89      	ldr	r3, [pc, #548]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d06c      	beq.n	8001e4c <HAL_RCC_OscConfig+0x12c>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d168      	bne.n	8001e4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e246      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d86:	d106      	bne.n	8001d96 <HAL_RCC_OscConfig+0x76>
 8001d88:	4b80      	ldr	r3, [pc, #512]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a7f      	ldr	r2, [pc, #508]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	e02e      	b.n	8001df4 <HAL_RCC_OscConfig+0xd4>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x98>
 8001d9e:	4b7b      	ldr	r3, [pc, #492]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a7a      	ldr	r2, [pc, #488]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	4b78      	ldr	r3, [pc, #480]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a77      	ldr	r2, [pc, #476]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001db0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	e01d      	b.n	8001df4 <HAL_RCC_OscConfig+0xd4>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dc0:	d10c      	bne.n	8001ddc <HAL_RCC_OscConfig+0xbc>
 8001dc2:	4b72      	ldr	r3, [pc, #456]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a71      	ldr	r2, [pc, #452]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	4b6f      	ldr	r3, [pc, #444]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a6e      	ldr	r2, [pc, #440]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	e00b      	b.n	8001df4 <HAL_RCC_OscConfig+0xd4>
 8001ddc:	4b6b      	ldr	r3, [pc, #428]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a6a      	ldr	r2, [pc, #424]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	4b68      	ldr	r3, [pc, #416]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a67      	ldr	r2, [pc, #412]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001df2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d013      	beq.n	8001e24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fa1a 	bl	8001234 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e04:	f7ff fa16 	bl	8001234 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b64      	cmp	r3, #100	; 0x64
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e1fa      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e16:	4b5d      	ldr	r3, [pc, #372]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0xe4>
 8001e22:	e014      	b.n	8001e4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7ff fa06 	bl	8001234 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e2c:	f7ff fa02 	bl	8001234 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b64      	cmp	r3, #100	; 0x64
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e1e6      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3e:	4b53      	ldr	r3, [pc, #332]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x10c>
 8001e4a:	e000      	b.n	8001e4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d063      	beq.n	8001f22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e5a:	4b4c      	ldr	r3, [pc, #304]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00b      	beq.n	8001e7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e66:	4b49      	ldr	r3, [pc, #292]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d11c      	bne.n	8001eac <HAL_RCC_OscConfig+0x18c>
 8001e72:	4b46      	ldr	r3, [pc, #280]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d116      	bne.n	8001eac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7e:	4b43      	ldr	r3, [pc, #268]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d005      	beq.n	8001e96 <HAL_RCC_OscConfig+0x176>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d001      	beq.n	8001e96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e1ba      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e96:	4b3d      	ldr	r3, [pc, #244]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4939      	ldr	r1, [pc, #228]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eaa:	e03a      	b.n	8001f22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d020      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb4:	4b36      	ldr	r3, [pc, #216]	; (8001f90 <HAL_RCC_OscConfig+0x270>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eba:	f7ff f9bb 	bl	8001234 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec2:	f7ff f9b7 	bl	8001234 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e19b      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed4:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee0:	4b2a      	ldr	r3, [pc, #168]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4927      	ldr	r1, [pc, #156]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	600b      	str	r3, [r1, #0]
 8001ef4:	e015      	b.n	8001f22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ef6:	4b26      	ldr	r3, [pc, #152]	; (8001f90 <HAL_RCC_OscConfig+0x270>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff f99a 	bl	8001234 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f04:	f7ff f996 	bl	8001234 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e17a      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f16:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d03a      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d019      	beq.n	8001f6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f36:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <HAL_RCC_OscConfig+0x274>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3c:	f7ff f97a 	bl	8001234 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f44:	f7ff f976 	bl	8001234 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e15a      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f56:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f62:	2001      	movs	r0, #1
 8001f64:	f000 faf8 	bl	8002558 <RCC_Delay>
 8001f68:	e01c      	b.n	8001fa4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <HAL_RCC_OscConfig+0x274>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f70:	f7ff f960 	bl	8001234 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f76:	e00f      	b.n	8001f98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f78:	f7ff f95c 	bl	8001234 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d908      	bls.n	8001f98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e140      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	42420000 	.word	0x42420000
 8001f94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f98:	4b9e      	ldr	r3, [pc, #632]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1e9      	bne.n	8001f78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 80a6 	beq.w	80020fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fb6:	4b97      	ldr	r3, [pc, #604]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10d      	bne.n	8001fde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc2:	4b94      	ldr	r3, [pc, #592]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	4a93      	ldr	r2, [pc, #588]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8001fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	61d3      	str	r3, [r2, #28]
 8001fce:	4b91      	ldr	r3, [pc, #580]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fde:	4b8e      	ldr	r3, [pc, #568]	; (8002218 <HAL_RCC_OscConfig+0x4f8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d118      	bne.n	800201c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fea:	4b8b      	ldr	r3, [pc, #556]	; (8002218 <HAL_RCC_OscConfig+0x4f8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a8a      	ldr	r2, [pc, #552]	; (8002218 <HAL_RCC_OscConfig+0x4f8>)
 8001ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff6:	f7ff f91d 	bl	8001234 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffe:	f7ff f919 	bl	8001234 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b64      	cmp	r3, #100	; 0x64
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e0fd      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002010:	4b81      	ldr	r3, [pc, #516]	; (8002218 <HAL_RCC_OscConfig+0x4f8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d106      	bne.n	8002032 <HAL_RCC_OscConfig+0x312>
 8002024:	4b7b      	ldr	r3, [pc, #492]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	4a7a      	ldr	r2, [pc, #488]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6213      	str	r3, [r2, #32]
 8002030:	e02d      	b.n	800208e <HAL_RCC_OscConfig+0x36e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10c      	bne.n	8002054 <HAL_RCC_OscConfig+0x334>
 800203a:	4b76      	ldr	r3, [pc, #472]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	4a75      	ldr	r2, [pc, #468]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	6213      	str	r3, [r2, #32]
 8002046:	4b73      	ldr	r3, [pc, #460]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	4a72      	ldr	r2, [pc, #456]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 800204c:	f023 0304 	bic.w	r3, r3, #4
 8002050:	6213      	str	r3, [r2, #32]
 8002052:	e01c      	b.n	800208e <HAL_RCC_OscConfig+0x36e>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	2b05      	cmp	r3, #5
 800205a:	d10c      	bne.n	8002076 <HAL_RCC_OscConfig+0x356>
 800205c:	4b6d      	ldr	r3, [pc, #436]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	4a6c      	ldr	r2, [pc, #432]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8002062:	f043 0304 	orr.w	r3, r3, #4
 8002066:	6213      	str	r3, [r2, #32]
 8002068:	4b6a      	ldr	r3, [pc, #424]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	4a69      	ldr	r2, [pc, #420]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	6213      	str	r3, [r2, #32]
 8002074:	e00b      	b.n	800208e <HAL_RCC_OscConfig+0x36e>
 8002076:	4b67      	ldr	r3, [pc, #412]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	4a66      	ldr	r2, [pc, #408]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 800207c:	f023 0301 	bic.w	r3, r3, #1
 8002080:	6213      	str	r3, [r2, #32]
 8002082:	4b64      	ldr	r3, [pc, #400]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	4a63      	ldr	r2, [pc, #396]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8002088:	f023 0304 	bic.w	r3, r3, #4
 800208c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d015      	beq.n	80020c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002096:	f7ff f8cd 	bl	8001234 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800209c:	e00a      	b.n	80020b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209e:	f7ff f8c9 	bl	8001234 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e0ab      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b4:	4b57      	ldr	r3, [pc, #348]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0ee      	beq.n	800209e <HAL_RCC_OscConfig+0x37e>
 80020c0:	e014      	b.n	80020ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c2:	f7ff f8b7 	bl	8001234 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c8:	e00a      	b.n	80020e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ca:	f7ff f8b3 	bl	8001234 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d8:	4293      	cmp	r3, r2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e095      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e0:	4b4c      	ldr	r3, [pc, #304]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1ee      	bne.n	80020ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020ec:	7dfb      	ldrb	r3, [r7, #23]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d105      	bne.n	80020fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f2:	4b48      	ldr	r3, [pc, #288]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	4a47      	ldr	r2, [pc, #284]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 80020f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 8081 	beq.w	800220a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002108:	4b42      	ldr	r3, [pc, #264]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 030c 	and.w	r3, r3, #12
 8002110:	2b08      	cmp	r3, #8
 8002112:	d061      	beq.n	80021d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	2b02      	cmp	r3, #2
 800211a:	d146      	bne.n	80021aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800211c:	4b3f      	ldr	r3, [pc, #252]	; (800221c <HAL_RCC_OscConfig+0x4fc>)
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002122:	f7ff f887 	bl	8001234 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212a:	f7ff f883 	bl	8001234 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e067      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800213c:	4b35      	ldr	r3, [pc, #212]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1f0      	bne.n	800212a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002150:	d108      	bne.n	8002164 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002152:	4b30      	ldr	r3, [pc, #192]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	492d      	ldr	r1, [pc, #180]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8002160:	4313      	orrs	r3, r2
 8002162:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002164:	4b2b      	ldr	r3, [pc, #172]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a19      	ldr	r1, [r3, #32]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	430b      	orrs	r3, r1
 8002176:	4927      	ldr	r1, [pc, #156]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8002178:	4313      	orrs	r3, r2
 800217a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800217c:	4b27      	ldr	r3, [pc, #156]	; (800221c <HAL_RCC_OscConfig+0x4fc>)
 800217e:	2201      	movs	r2, #1
 8002180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002182:	f7ff f857 	bl	8001234 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218a:	f7ff f853 	bl	8001234 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e037      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800219c:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x46a>
 80021a8:	e02f      	b.n	800220a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021aa:	4b1c      	ldr	r3, [pc, #112]	; (800221c <HAL_RCC_OscConfig+0x4fc>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b0:	f7ff f840 	bl	8001234 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b8:	f7ff f83c 	bl	8001234 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e020      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ca:	4b12      	ldr	r3, [pc, #72]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x498>
 80021d6:	e018      	b.n	800220a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e013      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d106      	bne.n	8002206 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002202:	429a      	cmp	r2, r3
 8002204:	d001      	beq.n	800220a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40021000 	.word	0x40021000
 8002218:	40007000 	.word	0x40007000
 800221c:	42420060 	.word	0x42420060

08002220 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0d0      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002234:	4b6a      	ldr	r3, [pc, #424]	; (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d910      	bls.n	8002264 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002242:	4b67      	ldr	r3, [pc, #412]	; (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 0207 	bic.w	r2, r3, #7
 800224a:	4965      	ldr	r1, [pc, #404]	; (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002252:	4b63      	ldr	r3, [pc, #396]	; (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d001      	beq.n	8002264 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0b8      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d020      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800227c:	4b59      	ldr	r3, [pc, #356]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	4a58      	ldr	r2, [pc, #352]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002286:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002294:	4b53      	ldr	r3, [pc, #332]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	4a52      	ldr	r2, [pc, #328]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 800229a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800229e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a0:	4b50      	ldr	r3, [pc, #320]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	494d      	ldr	r1, [pc, #308]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d040      	beq.n	8002340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d107      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c6:	4b47      	ldr	r3, [pc, #284]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d115      	bne.n	80022fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e07f      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d107      	bne.n	80022ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022de:	4b41      	ldr	r3, [pc, #260]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d109      	bne.n	80022fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e073      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ee:	4b3d      	ldr	r3, [pc, #244]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e06b      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022fe:	4b39      	ldr	r3, [pc, #228]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f023 0203 	bic.w	r2, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	4936      	ldr	r1, [pc, #216]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	4313      	orrs	r3, r2
 800230e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002310:	f7fe ff90 	bl	8001234 <HAL_GetTick>
 8002314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002316:	e00a      	b.n	800232e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002318:	f7fe ff8c 	bl	8001234 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	f241 3288 	movw	r2, #5000	; 0x1388
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e053      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232e:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 020c 	and.w	r2, r3, #12
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	429a      	cmp	r2, r3
 800233e:	d1eb      	bne.n	8002318 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002340:	4b27      	ldr	r3, [pc, #156]	; (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d210      	bcs.n	8002370 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234e:	4b24      	ldr	r3, [pc, #144]	; (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 0207 	bic.w	r2, r3, #7
 8002356:	4922      	ldr	r1, [pc, #136]	; (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e032      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800237c:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4916      	ldr	r1, [pc, #88]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 800238a:	4313      	orrs	r3, r2
 800238c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d009      	beq.n	80023ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800239a:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	490e      	ldr	r1, [pc, #56]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023ae:	f000 f82d 	bl	800240c <HAL_RCC_GetSysClockFreq>
 80023b2:	4602      	mov	r2, r0
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	490a      	ldr	r1, [pc, #40]	; (80023e8 <HAL_RCC_ClockConfig+0x1c8>)
 80023c0:	5ccb      	ldrb	r3, [r1, r3]
 80023c2:	fa22 f303 	lsr.w	r3, r2, r3
 80023c6:	4a09      	ldr	r2, [pc, #36]	; (80023ec <HAL_RCC_ClockConfig+0x1cc>)
 80023c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023ca:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_RCC_ClockConfig+0x1d0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe feee 	bl	80011b0 <HAL_InitTick>

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40022000 	.word	0x40022000
 80023e4:	40021000 	.word	0x40021000
 80023e8:	08003e24 	.word	0x08003e24
 80023ec:	20000004 	.word	0x20000004
 80023f0:	20000008 	.word	0x20000008

080023f4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <HAL_RCC_EnableCSS+0x14>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	601a      	str	r2, [r3, #0]
}
 80023fe:	bf00      	nop
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	4242004c 	.word	0x4242004c

0800240c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800240c:	b490      	push	{r4, r7}
 800240e:	b08a      	sub	sp, #40	; 0x28
 8002410:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002412:	4b2a      	ldr	r3, [pc, #168]	; (80024bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002414:	1d3c      	adds	r4, r7, #4
 8002416:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002418:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800241c:	f240 2301 	movw	r3, #513	; 0x201
 8002420:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
 8002426:	2300      	movs	r3, #0
 8002428:	61bb      	str	r3, [r7, #24]
 800242a:	2300      	movs	r3, #0
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002432:	2300      	movs	r3, #0
 8002434:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002436:	4b22      	ldr	r3, [pc, #136]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b04      	cmp	r3, #4
 8002444:	d002      	beq.n	800244c <HAL_RCC_GetSysClockFreq+0x40>
 8002446:	2b08      	cmp	r3, #8
 8002448:	d003      	beq.n	8002452 <HAL_RCC_GetSysClockFreq+0x46>
 800244a:	e02d      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800244c:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800244e:	623b      	str	r3, [r7, #32]
      break;
 8002450:	e02d      	b.n	80024ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	0c9b      	lsrs	r3, r3, #18
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800245e:	4413      	add	r3, r2
 8002460:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002464:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d013      	beq.n	8002498 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002470:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	0c5b      	lsrs	r3, r3, #17
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800247e:	4413      	add	r3, r2
 8002480:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002484:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	4a0e      	ldr	r2, [pc, #56]	; (80024c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800248a:	fb02 f203 	mul.w	r2, r2, r3
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	fbb2 f3f3 	udiv	r3, r2, r3
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
 8002496:	e004      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	4a0b      	ldr	r2, [pc, #44]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800249c:	fb02 f303 	mul.w	r3, r2, r3
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	623b      	str	r3, [r7, #32]
      break;
 80024a6:	e002      	b.n	80024ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024a8:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024aa:	623b      	str	r3, [r7, #32]
      break;
 80024ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ae:	6a3b      	ldr	r3, [r7, #32]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3728      	adds	r7, #40	; 0x28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc90      	pop	{r4, r7}
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	08003e14 	.word	0x08003e14
 80024c0:	40021000 	.word	0x40021000
 80024c4:	007a1200 	.word	0x007a1200
 80024c8:	003d0900 	.word	0x003d0900

080024cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d0:	4b02      	ldr	r3, [pc, #8]	; (80024dc <HAL_RCC_GetHCLKFreq+0x10>)
 80024d2:	681b      	ldr	r3, [r3, #0]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	20000004 	.word	0x20000004

080024e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024e4:	f7ff fff2 	bl	80024cc <HAL_RCC_GetHCLKFreq>
 80024e8:	4602      	mov	r2, r0
 80024ea:	4b05      	ldr	r3, [pc, #20]	; (8002500 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	0a1b      	lsrs	r3, r3, #8
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	4903      	ldr	r1, [pc, #12]	; (8002504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024f6:	5ccb      	ldrb	r3, [r1, r3]
 80024f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40021000 	.word	0x40021000
 8002504:	08003e34 	.word	0x08003e34

08002508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800250c:	f7ff ffde 	bl	80024cc <HAL_RCC_GetHCLKFreq>
 8002510:	4602      	mov	r2, r0
 8002512:	4b05      	ldr	r3, [pc, #20]	; (8002528 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	0adb      	lsrs	r3, r3, #11
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	4903      	ldr	r1, [pc, #12]	; (800252c <HAL_RCC_GetPCLK2Freq+0x24>)
 800251e:	5ccb      	ldrb	r3, [r1, r3]
 8002520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002524:	4618      	mov	r0, r3
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40021000 	.word	0x40021000
 800252c:	08003e34 	.word	0x08003e34

08002530 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002534:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253c:	2b80      	cmp	r3, #128	; 0x80
 800253e:	d104      	bne.n	800254a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002540:	f000 f828 	bl	8002594 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002544:	4b03      	ldr	r3, [pc, #12]	; (8002554 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002546:	2280      	movs	r2, #128	; 0x80
 8002548:	701a      	strb	r2, [r3, #0]
  }
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000
 8002554:	4002100a 	.word	0x4002100a

08002558 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002560:	4b0a      	ldr	r3, [pc, #40]	; (800258c <RCC_Delay+0x34>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <RCC_Delay+0x38>)
 8002566:	fba2 2303 	umull	r2, r3, r2, r3
 800256a:	0a5b      	lsrs	r3, r3, #9
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	fb02 f303 	mul.w	r3, r2, r3
 8002572:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002574:	bf00      	nop
  }
  while (Delay --);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1e5a      	subs	r2, r3, #1
 800257a:	60fa      	str	r2, [r7, #12]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1f9      	bne.n	8002574 <RCC_Delay+0x1c>
}
 8002580:	bf00      	nop
 8002582:	bf00      	nop
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr
 800258c:	20000004 	.word	0x20000004
 8002590:	10624dd3 	.word	0x10624dd3

08002594 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e076      	b.n	80026a0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d108      	bne.n	80025cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025c2:	d009      	beq.n	80025d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	61da      	str	r2, [r3, #28]
 80025ca:	e005      	b.n	80025d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d106      	bne.n	80025f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7fe f8de 	bl	80007b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2202      	movs	r2, #2
 80025fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800260e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265c:	ea42 0103 	orr.w	r1, r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002664:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	0c1a      	lsrs	r2, r3, #16
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f002 0204 	and.w	r2, r2, #4
 800267e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	69da      	ldr	r2, [r3, #28]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800268e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	4613      	mov	r3, r2
 80026b6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_SPI_Transmit+0x22>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e126      	b.n	8002918 <HAL_SPI_Transmit+0x270>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026d2:	f7fe fdaf 	bl	8001234 <HAL_GetTick>
 80026d6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80026d8:	88fb      	ldrh	r3, [r7, #6]
 80026da:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d002      	beq.n	80026ee <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80026e8:	2302      	movs	r3, #2
 80026ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026ec:	e10b      	b.n	8002906 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <HAL_SPI_Transmit+0x52>
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d102      	bne.n	8002700 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026fe:	e102      	b.n	8002906 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2203      	movs	r2, #3
 8002704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	88fa      	ldrh	r2, [r7, #6]
 8002718:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	88fa      	ldrh	r2, [r7, #6]
 800271e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002746:	d10f      	bne.n	8002768 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002756:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002766:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002772:	2b40      	cmp	r3, #64	; 0x40
 8002774:	d007      	beq.n	8002786 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002784:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800278e:	d14b      	bne.n	8002828 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <HAL_SPI_Transmit+0xf6>
 8002798:	8afb      	ldrh	r3, [r7, #22]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d13e      	bne.n	800281c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	881a      	ldrh	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	1c9a      	adds	r2, r3, #2
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80027c2:	e02b      	b.n	800281c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d112      	bne.n	80027f8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	881a      	ldrh	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	1c9a      	adds	r2, r3, #2
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80027f6:	e011      	b.n	800281c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027f8:	f7fe fd1c 	bl	8001234 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d803      	bhi.n	8002810 <HAL_SPI_Transmit+0x168>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280e:	d102      	bne.n	8002816 <HAL_SPI_Transmit+0x16e>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d102      	bne.n	800281c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	77fb      	strb	r3, [r7, #31]
          goto error;
 800281a:	e074      	b.n	8002906 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002820:	b29b      	uxth	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1ce      	bne.n	80027c4 <HAL_SPI_Transmit+0x11c>
 8002826:	e04c      	b.n	80028c2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <HAL_SPI_Transmit+0x18e>
 8002830:	8afb      	ldrh	r3, [r7, #22]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d140      	bne.n	80028b8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	330c      	adds	r3, #12
 8002840:	7812      	ldrb	r2, [r2, #0]
 8002842:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002852:	b29b      	uxth	r3, r3
 8002854:	3b01      	subs	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800285c:	e02c      	b.n	80028b8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b02      	cmp	r3, #2
 800286a:	d113      	bne.n	8002894 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	330c      	adds	r3, #12
 8002876:	7812      	ldrb	r2, [r2, #0]
 8002878:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002888:	b29b      	uxth	r3, r3
 800288a:	3b01      	subs	r3, #1
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	86da      	strh	r2, [r3, #54]	; 0x36
 8002892:	e011      	b.n	80028b8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002894:	f7fe fcce 	bl	8001234 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d803      	bhi.n	80028ac <HAL_SPI_Transmit+0x204>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028aa:	d102      	bne.n	80028b2 <HAL_SPI_Transmit+0x20a>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d102      	bne.n	80028b8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028b6:	e026      	b.n	8002906 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1cd      	bne.n	800285e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	6839      	ldr	r1, [r7, #0]
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 fbb8 	bl	800303c <SPI_EndRxTxTransaction>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2220      	movs	r2, #32
 80028d6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10a      	bne.n	80028f6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028e0:	2300      	movs	r3, #0
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	77fb      	strb	r3, [r7, #31]
 8002902:	e000      	b.n	8002906 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002904:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002916:	7ffb      	ldrb	r3, [r7, #31]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3720      	adds	r7, #32
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af02      	add	r7, sp, #8
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	4613      	mov	r3, r2
 800292e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800293c:	d112      	bne.n	8002964 <HAL_SPI_Receive+0x44>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10e      	bne.n	8002964 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2204      	movs	r2, #4
 800294a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800294e:	88fa      	ldrh	r2, [r7, #6]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	4613      	mov	r3, r2
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 f8f1 	bl	8002b42 <HAL_SPI_TransmitReceive>
 8002960:	4603      	mov	r3, r0
 8002962:	e0ea      	b.n	8002b3a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_SPI_Receive+0x52>
 800296e:	2302      	movs	r3, #2
 8002970:	e0e3      	b.n	8002b3a <HAL_SPI_Receive+0x21a>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800297a:	f7fe fc5b 	bl	8001234 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b01      	cmp	r3, #1
 800298a:	d002      	beq.n	8002992 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800298c:	2302      	movs	r3, #2
 800298e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002990:	e0ca      	b.n	8002b28 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <HAL_SPI_Receive+0x7e>
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d102      	bne.n	80029a4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029a2:	e0c1      	b.n	8002b28 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2204      	movs	r2, #4
 80029a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	88fa      	ldrh	r2, [r7, #6]
 80029bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	88fa      	ldrh	r2, [r7, #6]
 80029c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ea:	d10f      	bne.n	8002a0c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a0a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a16:	2b40      	cmp	r3, #64	; 0x40
 8002a18:	d007      	beq.n	8002a2a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a28:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d162      	bne.n	8002af8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002a32:	e02e      	b.n	8002a92 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d115      	bne.n	8002a6e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f103 020c 	add.w	r2, r3, #12
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4e:	7812      	ldrb	r2, [r2, #0]
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a6c:	e011      	b.n	8002a92 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a6e:	f7fe fbe1 	bl	8001234 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d803      	bhi.n	8002a86 <HAL_SPI_Receive+0x166>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a84:	d102      	bne.n	8002a8c <HAL_SPI_Receive+0x16c>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d102      	bne.n	8002a92 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002a90:	e04a      	b.n	8002b28 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1cb      	bne.n	8002a34 <HAL_SPI_Receive+0x114>
 8002a9c:	e031      	b.n	8002b02 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d113      	bne.n	8002ad4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab6:	b292      	uxth	r2, r2
 8002ab8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abe:	1c9a      	adds	r2, r3, #2
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	3b01      	subs	r3, #1
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ad2:	e011      	b.n	8002af8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ad4:	f7fe fbae 	bl	8001234 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d803      	bhi.n	8002aec <HAL_SPI_Receive+0x1cc>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aea:	d102      	bne.n	8002af2 <HAL_SPI_Receive+0x1d2>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d102      	bne.n	8002af8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002af6:	e017      	b.n	8002b28 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1cd      	bne.n	8002a9e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	6839      	ldr	r1, [r7, #0]
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 fa46 	bl	8002f98 <SPI_EndRxTransaction>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d002      	beq.n	8002b18 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2220      	movs	r2, #32
 8002b16:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	75fb      	strb	r3, [r7, #23]
 8002b24:	e000      	b.n	8002b28 <HAL_SPI_Receive+0x208>
  }

error :
 8002b26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b08c      	sub	sp, #48	; 0x30
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
 8002b4e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b50:	2301      	movs	r3, #1
 8002b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b54:	2300      	movs	r3, #0
 8002b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_SPI_TransmitReceive+0x26>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e18a      	b.n	8002e7e <HAL_SPI_TransmitReceive+0x33c>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b70:	f7fe fb60 	bl	8001234 <HAL_GetTick>
 8002b74:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002b86:	887b      	ldrh	r3, [r7, #2]
 8002b88:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d00f      	beq.n	8002bb2 <HAL_SPI_TransmitReceive+0x70>
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b98:	d107      	bne.n	8002baa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d103      	bne.n	8002baa <HAL_SPI_TransmitReceive+0x68>
 8002ba2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d003      	beq.n	8002bb2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002baa:	2302      	movs	r3, #2
 8002bac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002bb0:	e15b      	b.n	8002e6a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_SPI_TransmitReceive+0x82>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d002      	beq.n	8002bc4 <HAL_SPI_TransmitReceive+0x82>
 8002bbe:	887b      	ldrh	r3, [r7, #2]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d103      	bne.n	8002bcc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002bca:	e14e      	b.n	8002e6a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d003      	beq.n	8002be0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2205      	movs	r2, #5
 8002bdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	887a      	ldrh	r2, [r7, #2]
 8002bf0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	887a      	ldrh	r2, [r7, #2]
 8002bf6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	887a      	ldrh	r2, [r7, #2]
 8002c02:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	887a      	ldrh	r2, [r7, #2]
 8002c08:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c20:	2b40      	cmp	r3, #64	; 0x40
 8002c22:	d007      	beq.n	8002c34 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c3c:	d178      	bne.n	8002d30 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <HAL_SPI_TransmitReceive+0x10a>
 8002c46:	8b7b      	ldrh	r3, [r7, #26]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d166      	bne.n	8002d1a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	881a      	ldrh	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	1c9a      	adds	r2, r3, #2
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c70:	e053      	b.n	8002d1a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d11b      	bne.n	8002cb8 <HAL_SPI_TransmitReceive+0x176>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d016      	beq.n	8002cb8 <HAL_SPI_TransmitReceive+0x176>
 8002c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d113      	bne.n	8002cb8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	881a      	ldrh	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	1c9a      	adds	r2, r3, #2
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d119      	bne.n	8002cfa <HAL_SPI_TransmitReceive+0x1b8>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d014      	beq.n	8002cfa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cda:	b292      	uxth	r2, r2
 8002cdc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce2:	1c9a      	adds	r2, r3, #2
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002cfa:	f7fe fa9b 	bl	8001234 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d807      	bhi.n	8002d1a <HAL_SPI_TransmitReceive+0x1d8>
 8002d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d10:	d003      	beq.n	8002d1a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d18:	e0a7      	b.n	8002e6a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1a6      	bne.n	8002c72 <HAL_SPI_TransmitReceive+0x130>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1a1      	bne.n	8002c72 <HAL_SPI_TransmitReceive+0x130>
 8002d2e:	e07c      	b.n	8002e2a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d002      	beq.n	8002d3e <HAL_SPI_TransmitReceive+0x1fc>
 8002d38:	8b7b      	ldrh	r3, [r7, #26]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d16b      	bne.n	8002e16 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	330c      	adds	r3, #12
 8002d48:	7812      	ldrb	r2, [r2, #0]
 8002d4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d64:	e057      	b.n	8002e16 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d11c      	bne.n	8002dae <HAL_SPI_TransmitReceive+0x26c>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d017      	beq.n	8002dae <HAL_SPI_TransmitReceive+0x26c>
 8002d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d114      	bne.n	8002dae <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	330c      	adds	r3, #12
 8002d8e:	7812      	ldrb	r2, [r2, #0]
 8002d90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d119      	bne.n	8002df0 <HAL_SPI_TransmitReceive+0x2ae>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d014      	beq.n	8002df0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002dec:	2301      	movs	r3, #1
 8002dee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002df0:	f7fe fa20 	bl	8001234 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d803      	bhi.n	8002e08 <HAL_SPI_TransmitReceive+0x2c6>
 8002e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e06:	d102      	bne.n	8002e0e <HAL_SPI_TransmitReceive+0x2cc>
 8002e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d103      	bne.n	8002e16 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e14:	e029      	b.n	8002e6a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1a2      	bne.n	8002d66 <HAL_SPI_TransmitReceive+0x224>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d19d      	bne.n	8002d66 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f904 	bl	800303c <SPI_EndRxTxTransaction>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d006      	beq.n	8002e48 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002e46:	e010      	b.n	8002e6a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10b      	bne.n	8002e68 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	e000      	b.n	8002e6a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002e68:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3730      	adds	r7, #48	; 0x30
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	4613      	mov	r3, r2
 8002e96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e98:	f7fe f9cc 	bl	8001234 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea0:	1a9b      	subs	r3, r3, r2
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ea8:	f7fe f9c4 	bl	8001234 <HAL_GetTick>
 8002eac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002eae:	4b39      	ldr	r3, [pc, #228]	; (8002f94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	015b      	lsls	r3, r3, #5
 8002eb4:	0d1b      	lsrs	r3, r3, #20
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	fb02 f303 	mul.w	r3, r2, r3
 8002ebc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ebe:	e054      	b.n	8002f6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec6:	d050      	beq.n	8002f6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ec8:	f7fe f9b4 	bl	8001234 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	69fa      	ldr	r2, [r7, #28]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d902      	bls.n	8002ede <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d13d      	bne.n	8002f5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002eec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ef6:	d111      	bne.n	8002f1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f00:	d004      	beq.n	8002f0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f0a:	d107      	bne.n	8002f1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f24:	d10f      	bne.n	8002f46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e017      	b.n	8002f8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4013      	ands	r3, r2
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	bf0c      	ite	eq
 8002f7a:	2301      	moveq	r3, #1
 8002f7c:	2300      	movne	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d19b      	bne.n	8002ec0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3720      	adds	r7, #32
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000004 	.word	0x20000004

08002f98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af02      	add	r7, sp, #8
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fac:	d111      	bne.n	8002fd2 <SPI_EndRxTransaction+0x3a>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb6:	d004      	beq.n	8002fc2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc0:	d107      	bne.n	8002fd2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fd0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fda:	d117      	bne.n	800300c <SPI_EndRxTransaction+0x74>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe4:	d112      	bne.n	800300c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2200      	movs	r2, #0
 8002fee:	2101      	movs	r1, #1
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f7ff ff49 	bl	8002e88 <SPI_WaitFlagStateUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d01a      	beq.n	8003032 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003000:	f043 0220 	orr.w	r2, r3, #32
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e013      	b.n	8003034 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	2200      	movs	r2, #0
 8003014:	2180      	movs	r1, #128	; 0x80
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f7ff ff36 	bl	8002e88 <SPI_WaitFlagStateUntilTimeout>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d007      	beq.n	8003032 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003026:	f043 0220 	orr.w	r2, r3, #32
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e000      	b.n	8003034 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2200      	movs	r2, #0
 8003050:	2180      	movs	r1, #128	; 0x80
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f7ff ff18 	bl	8002e88 <SPI_WaitFlagStateUntilTimeout>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d007      	beq.n	800306e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003062:	f043 0220 	orr.w	r2, r3, #32
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e000      	b.n	8003070 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e03f      	b.n	800310a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fd fbd2 	bl	8000848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2224      	movs	r2, #36	; 0x24
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 fde3 	bl	8003c88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b08a      	sub	sp, #40	; 0x28
 8003116:	af02      	add	r7, sp, #8
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	603b      	str	r3, [r7, #0]
 800311e:	4613      	mov	r3, r2
 8003120:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003122:	2300      	movs	r3, #0
 8003124:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b20      	cmp	r3, #32
 8003130:	d17c      	bne.n	800322c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <HAL_UART_Transmit+0x2c>
 8003138:	88fb      	ldrh	r3, [r7, #6]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e075      	b.n	800322e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <HAL_UART_Transmit+0x3e>
 800314c:	2302      	movs	r3, #2
 800314e:	e06e      	b.n	800322e <HAL_UART_Transmit+0x11c>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2221      	movs	r2, #33	; 0x21
 8003162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003166:	f7fe f865 	bl	8001234 <HAL_GetTick>
 800316a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	88fa      	ldrh	r2, [r7, #6]
 8003170:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	88fa      	ldrh	r2, [r7, #6]
 8003176:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003180:	d108      	bne.n	8003194 <HAL_UART_Transmit+0x82>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d104      	bne.n	8003194 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	61bb      	str	r3, [r7, #24]
 8003192:	e003      	b.n	800319c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003198:	2300      	movs	r3, #0
 800319a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80031a4:	e02a      	b.n	80031fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2200      	movs	r2, #0
 80031ae:	2180      	movs	r1, #128	; 0x80
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 fb54 	bl	800385e <UART_WaitOnFlagUntilTimeout>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e036      	b.n	800322e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10b      	bne.n	80031de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	3302      	adds	r3, #2
 80031da:	61bb      	str	r3, [r7, #24]
 80031dc:	e007      	b.n	80031ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	781a      	ldrb	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	3301      	adds	r3, #1
 80031ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1cf      	bne.n	80031a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2200      	movs	r2, #0
 800320e:	2140      	movs	r1, #64	; 0x40
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 fb24 	bl	800385e <UART_WaitOnFlagUntilTimeout>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e006      	b.n	800322e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	e000      	b.n	800322e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800322c:	2302      	movs	r3, #2
  }
}
 800322e:	4618      	mov	r0, r3
 8003230:	3720      	adds	r7, #32
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b084      	sub	sp, #16
 800323a:	af00      	add	r7, sp, #0
 800323c:	60f8      	str	r0, [r7, #12]
 800323e:	60b9      	str	r1, [r7, #8]
 8003240:	4613      	mov	r3, r2
 8003242:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b20      	cmp	r3, #32
 800324e:	d11d      	bne.n	800328c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <HAL_UART_Receive_DMA+0x26>
 8003256:	88fb      	ldrh	r3, [r7, #6]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e016      	b.n	800328e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_UART_Receive_DMA+0x38>
 800326a:	2302      	movs	r3, #2
 800326c:	e00f      	b.n	800328e <HAL_UART_Receive_DMA+0x58>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800327c:	88fb      	ldrh	r3, [r7, #6]
 800327e:	461a      	mov	r2, r3
 8003280:	68b9      	ldr	r1, [r7, #8]
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 fb36 	bl	80038f4 <UART_Start_Receive_DMA>
 8003288:	4603      	mov	r3, r0
 800328a:	e000      	b.n	800328e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800328c:	2302      	movs	r3, #2
  }
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b084      	sub	sp, #16
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bf14      	ite	ne
 80032b0:	2301      	movne	r3, #1
 80032b2:	2300      	moveq	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b21      	cmp	r3, #33	; 0x21
 80032c2:	d116      	bne.n	80032f2 <HAL_UART_DMAStop+0x5c>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d013      	beq.n	80032f2 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695a      	ldr	r2, [r3, #20]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032d8:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d004      	beq.n	80032ec <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fe f999 	bl	800161e <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 fb65 	bl	80039bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	bf14      	ite	ne
 8003300:	2301      	movne	r3, #1
 8003302:	2300      	moveq	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b22      	cmp	r3, #34	; 0x22
 8003312:	d116      	bne.n	8003342 <HAL_UART_DMAStop+0xac>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d013      	beq.n	8003342 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695a      	ldr	r2, [r3, #20]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003328:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332e:	2b00      	cmp	r3, #0
 8003330:	d004      	beq.n	800333c <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003336:	4618      	mov	r0, r3
 8003338:	f7fe f971 	bl	800161e <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 fb52 	bl	80039e6 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08a      	sub	sp, #40	; 0x28
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800336c:	2300      	movs	r3, #0
 800336e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10d      	bne.n	800339e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	f003 0320 	and.w	r3, r3, #32
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_UART_IRQHandler+0x52>
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 fbcc 	bl	8003b34 <UART_Receive_IT>
      return;
 800339c:	e17b      	b.n	8003696 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 80b1 	beq.w	8003508 <HAL_UART_IRQHandler+0x1bc>
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d105      	bne.n	80033bc <HAL_UART_IRQHandler+0x70>
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 80a6 	beq.w	8003508 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <HAL_UART_IRQHandler+0x90>
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d005      	beq.n	80033dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	f043 0201 	orr.w	r2, r3, #1
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <HAL_UART_IRQHandler+0xb0>
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	f043 0202 	orr.w	r2, r3, #2
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <HAL_UART_IRQHandler+0xd0>
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	f043 0204 	orr.w	r2, r3, #4
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00f      	beq.n	8003446 <HAL_UART_IRQHandler+0xfa>
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	2b00      	cmp	r3, #0
 800342e:	d104      	bne.n	800343a <HAL_UART_IRQHandler+0xee>
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d005      	beq.n	8003446 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f043 0208 	orr.w	r2, r3, #8
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 811e 	beq.w	800368c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	2b00      	cmp	r3, #0
 8003458:	d007      	beq.n	800346a <HAL_UART_IRQHandler+0x11e>
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	f003 0320 	and.w	r3, r3, #32
 8003460:	2b00      	cmp	r3, #0
 8003462:	d002      	beq.n	800346a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fb65 	bl	8003b34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003474:	2b00      	cmp	r3, #0
 8003476:	bf14      	ite	ne
 8003478:	2301      	movne	r3, #1
 800347a:	2300      	moveq	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	2b00      	cmp	r3, #0
 800348a:	d102      	bne.n	8003492 <HAL_UART_IRQHandler+0x146>
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d031      	beq.n	80034f6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 faa7 	bl	80039e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d023      	beq.n	80034ee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695a      	ldr	r2, [r3, #20]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034b4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d013      	beq.n	80034e6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c2:	4a76      	ldr	r2, [pc, #472]	; (800369c <HAL_UART_IRQHandler+0x350>)
 80034c4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fe f8e2 	bl	8001694 <HAL_DMA_Abort_IT>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d016      	beq.n	8003504 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034e0:	4610      	mov	r0, r2
 80034e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e4:	e00e      	b.n	8003504 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f8f5 	bl	80036d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ec:	e00a      	b.n	8003504 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f8f1 	bl	80036d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034f4:	e006      	b.n	8003504 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f8ed 	bl	80036d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003502:	e0c3      	b.n	800368c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003504:	bf00      	nop
    return;
 8003506:	e0c1      	b.n	800368c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350c:	2b01      	cmp	r3, #1
 800350e:	f040 80a1 	bne.w	8003654 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 809b 	beq.w	8003654 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	f003 0310 	and.w	r3, r3, #16
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 8095 	beq.w	8003654 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354a:	2b00      	cmp	r3, #0
 800354c:	d04e      	beq.n	80035ec <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003558:	8a3b      	ldrh	r3, [r7, #16]
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 8098 	beq.w	8003690 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003564:	8a3a      	ldrh	r2, [r7, #16]
 8003566:	429a      	cmp	r2, r3
 8003568:	f080 8092 	bcs.w	8003690 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	8a3a      	ldrh	r2, [r7, #16]
 8003570:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	2b20      	cmp	r3, #32
 800357a:	d02b      	beq.n	80035d4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800358a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0201 	bic.w	r2, r2, #1
 800359a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695a      	ldr	r2, [r3, #20]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035aa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0210 	bic.w	r2, r2, #16
 80035c8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fe f825 	bl	800161e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035dc:	b29b      	uxth	r3, r3
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	4619      	mov	r1, r3
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f87f 	bl	80036e8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80035ea:	e051      	b.n	8003690 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d047      	beq.n	8003694 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003604:	8a7b      	ldrh	r3, [r7, #18]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d044      	beq.n	8003694 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68da      	ldr	r2, [r3, #12]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003618:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695a      	ldr	r2, [r3, #20]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0201 	bic.w	r2, r2, #1
 8003628:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0210 	bic.w	r2, r2, #16
 8003646:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003648:	8a7b      	ldrh	r3, [r7, #18]
 800364a:	4619      	mov	r1, r3
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f84b 	bl	80036e8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003652:	e01f      	b.n	8003694 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365a:	2b00      	cmp	r3, #0
 800365c:	d008      	beq.n	8003670 <HAL_UART_IRQHandler+0x324>
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003664:	2b00      	cmp	r3, #0
 8003666:	d003      	beq.n	8003670 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f9fc 	bl	8003a66 <UART_Transmit_IT>
    return;
 800366e:	e012      	b.n	8003696 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00d      	beq.n	8003696 <HAL_UART_IRQHandler+0x34a>
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003680:	2b00      	cmp	r3, #0
 8003682:	d008      	beq.n	8003696 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 fa3d 	bl	8003b04 <UART_EndTransmit_IT>
    return;
 800368a:	e004      	b.n	8003696 <HAL_UART_IRQHandler+0x34a>
    return;
 800368c:	bf00      	nop
 800368e:	e002      	b.n	8003696 <HAL_UART_IRQHandler+0x34a>
      return;
 8003690:	bf00      	nop
 8003692:	e000      	b.n	8003696 <HAL_UART_IRQHandler+0x34a>
      return;
 8003694:	bf00      	nop
  }
}
 8003696:	3728      	adds	r7, #40	; 0x28
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	08003a3f 	.word	0x08003a3f

080036a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr

080036b2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr

080036d6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr

080036e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr

080036fe <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b084      	sub	sp, #16
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	2b00      	cmp	r3, #0
 8003718:	d12a      	bne.n	8003770 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800372e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695a      	ldr	r2, [r3, #20]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695a      	ldr	r2, [r3, #20]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800374e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375c:	2b01      	cmp	r3, #1
 800375e:	d107      	bne.n	8003770 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0210 	bic.w	r2, r2, #16
 800376e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003774:	2b01      	cmp	r3, #1
 8003776:	d106      	bne.n	8003786 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800377c:	4619      	mov	r1, r3
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f7ff ffb2 	bl	80036e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003784:	e002      	b.n	800378c <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f7ff ff93 	bl	80036b2 <HAL_UART_RxCpltCallback>
}
 800378c:	bf00      	nop
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d108      	bne.n	80037bc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037ae:	085b      	lsrs	r3, r3, #1
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	4619      	mov	r1, r3
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f7ff ff97 	bl	80036e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80037ba:	e002      	b.n	80037c2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f7ff ff81 	bl	80036c4 <HAL_UART_RxHalfCpltCallback>
}
 80037c2:	bf00      	nop
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b084      	sub	sp, #16
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	bf14      	ite	ne
 80037ea:	2301      	movne	r3, #1
 80037ec:	2300      	moveq	r3, #0
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b21      	cmp	r3, #33	; 0x21
 80037fc:	d108      	bne.n	8003810 <UART_DMAError+0x46>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	2200      	movs	r2, #0
 8003808:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800380a:	68b8      	ldr	r0, [r7, #8]
 800380c:	f000 f8d6 	bl	80039bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	bf14      	ite	ne
 800381e:	2301      	movne	r3, #1
 8003820:	2300      	moveq	r3, #0
 8003822:	b2db      	uxtb	r3, r3
 8003824:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b22      	cmp	r3, #34	; 0x22
 8003830:	d108      	bne.n	8003844 <UART_DMAError+0x7a>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2200      	movs	r2, #0
 800383c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800383e:	68b8      	ldr	r0, [r7, #8]
 8003840:	f000 f8d1 	bl	80039e6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003848:	f043 0210 	orr.w	r2, r3, #16
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003850:	68b8      	ldr	r0, [r7, #8]
 8003852:	f7ff ff40 	bl	80036d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003856:	bf00      	nop
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	603b      	str	r3, [r7, #0]
 800386a:	4613      	mov	r3, r2
 800386c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800386e:	e02c      	b.n	80038ca <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003876:	d028      	beq.n	80038ca <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d007      	beq.n	800388e <UART_WaitOnFlagUntilTimeout+0x30>
 800387e:	f7fd fcd9 	bl	8001234 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	429a      	cmp	r2, r3
 800388c:	d21d      	bcs.n	80038ca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800389c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695a      	ldr	r2, [r3, #20]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0201 	bic.w	r2, r2, #1
 80038ac:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e00f      	b.n	80038ea <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	4013      	ands	r3, r2
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	bf0c      	ite	eq
 80038da:	2301      	moveq	r3, #1
 80038dc:	2300      	movne	r3, #0
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	461a      	mov	r2, r3
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d0c3      	beq.n	8003870 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	4613      	mov	r3, r2
 8003900:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	88fa      	ldrh	r2, [r7, #6]
 800390c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2222      	movs	r2, #34	; 0x22
 8003918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003920:	4a23      	ldr	r2, [pc, #140]	; (80039b0 <UART_Start_Receive_DMA+0xbc>)
 8003922:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003928:	4a22      	ldr	r2, [pc, #136]	; (80039b4 <UART_Start_Receive_DMA+0xc0>)
 800392a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003930:	4a21      	ldr	r2, [pc, #132]	; (80039b8 <UART_Start_Receive_DMA+0xc4>)
 8003932:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003938:	2200      	movs	r2, #0
 800393a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800393c:	f107 0308 	add.w	r3, r7, #8
 8003940:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	3304      	adds	r3, #4
 800394c:	4619      	mov	r1, r3
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	88fb      	ldrh	r3, [r7, #6]
 8003954:	f7fd fe04 	bl	8001560 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003958:	2300      	movs	r3, #0
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	613b      	str	r3, [r7, #16]
 800396c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003984:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695a      	ldr	r2, [r3, #20]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0201 	orr.w	r2, r2, #1
 8003994:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695a      	ldr	r2, [r3, #20]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039a4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	080036ff 	.word	0x080036ff
 80039b4:	08003795 	.word	0x08003795
 80039b8:	080037cb 	.word	0x080037cb

080039bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80039d2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr

080039e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80039fc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695a      	ldr	r2, [r3, #20]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0201 	bic.w	r2, r2, #1
 8003a0c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d107      	bne.n	8003a26 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0210 	bic.w	r2, r2, #16
 8003a24:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr

08003a3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b084      	sub	sp, #16
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f7ff fe3c 	bl	80036d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a5e:	bf00      	nop
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b085      	sub	sp, #20
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b21      	cmp	r3, #33	; 0x21
 8003a78:	d13e      	bne.n	8003af8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a82:	d114      	bne.n	8003aae <UART_Transmit_IT+0x48>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d110      	bne.n	8003aae <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	881b      	ldrh	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aa0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	1c9a      	adds	r2, r3, #2
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	621a      	str	r2, [r3, #32]
 8003aac:	e008      	b.n	8003ac0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	1c59      	adds	r1, r3, #1
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6211      	str	r1, [r2, #32]
 8003ab8:	781a      	ldrb	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	4619      	mov	r1, r3
 8003ace:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10f      	bne.n	8003af4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ae2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003af2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	e000      	b.n	8003afa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003af8:	2302      	movs	r3, #2
  }
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr

08003b04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7ff fdbb 	bl	80036a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b22      	cmp	r3, #34	; 0x22
 8003b46:	f040 8099 	bne.w	8003c7c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b52:	d117      	bne.n	8003b84 <UART_Receive_IT+0x50>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d113      	bne.n	8003b84 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b64:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7c:	1c9a      	adds	r2, r3, #2
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	629a      	str	r2, [r3, #40]	; 0x28
 8003b82:	e026      	b.n	8003bd2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b96:	d007      	beq.n	8003ba8 <UART_Receive_IT+0x74>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10a      	bne.n	8003bb6 <UART_Receive_IT+0x82>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d106      	bne.n	8003bb6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	701a      	strb	r2, [r3, #0]
 8003bb4:	e008      	b.n	8003bc8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	4619      	mov	r1, r3
 8003be0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d148      	bne.n	8003c78 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0220 	bic.w	r2, r2, #32
 8003bf4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68da      	ldr	r2, [r3, #12]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695a      	ldr	r2, [r3, #20]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0201 	bic.w	r2, r2, #1
 8003c14:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d123      	bne.n	8003c6e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0210 	bic.w	r2, r2, #16
 8003c3a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0310 	and.w	r3, r3, #16
 8003c46:	2b10      	cmp	r3, #16
 8003c48:	d10a      	bne.n	8003c60 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c64:	4619      	mov	r1, r3
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff fd3e 	bl	80036e8 <HAL_UARTEx_RxEventCallback>
 8003c6c:	e002      	b.n	8003c74 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff fd1f 	bl	80036b2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	e002      	b.n	8003c7e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e000      	b.n	8003c7e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003c7c:	2302      	movs	r3, #2
  }
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003cc2:	f023 030c 	bic.w	r3, r3, #12
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6812      	ldr	r2, [r2, #0]
 8003cca:	68b9      	ldr	r1, [r7, #8]
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699a      	ldr	r2, [r3, #24]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a2c      	ldr	r2, [pc, #176]	; (8003d9c <UART_SetConfig+0x114>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d103      	bne.n	8003cf8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003cf0:	f7fe fc0a 	bl	8002508 <HAL_RCC_GetPCLK2Freq>
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	e002      	b.n	8003cfe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003cf8:	f7fe fbf2 	bl	80024e0 <HAL_RCC_GetPCLK1Freq>
 8003cfc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4613      	mov	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	009a      	lsls	r2, r3, #2
 8003d08:	441a      	add	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d14:	4a22      	ldr	r2, [pc, #136]	; (8003da0 <UART_SetConfig+0x118>)
 8003d16:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	0119      	lsls	r1, r3, #4
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	009a      	lsls	r2, r3, #2
 8003d28:	441a      	add	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d34:	4b1a      	ldr	r3, [pc, #104]	; (8003da0 <UART_SetConfig+0x118>)
 8003d36:	fba3 0302 	umull	r0, r3, r3, r2
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	2064      	movs	r0, #100	; 0x64
 8003d3e:	fb00 f303 	mul.w	r3, r0, r3
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	3332      	adds	r3, #50	; 0x32
 8003d48:	4a15      	ldr	r2, [pc, #84]	; (8003da0 <UART_SetConfig+0x118>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d54:	4419      	add	r1, r3
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009a      	lsls	r2, r3, #2
 8003d60:	441a      	add	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d6c:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <UART_SetConfig+0x118>)
 8003d6e:	fba3 0302 	umull	r0, r3, r3, r2
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	2064      	movs	r0, #100	; 0x64
 8003d76:	fb00 f303 	mul.w	r3, r0, r3
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	3332      	adds	r3, #50	; 0x32
 8003d80:	4a07      	ldr	r2, [pc, #28]	; (8003da0 <UART_SetConfig+0x118>)
 8003d82:	fba2 2303 	umull	r2, r3, r2, r3
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	f003 020f 	and.w	r2, r3, #15
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	440a      	add	r2, r1
 8003d92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d94:	bf00      	nop
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40013800 	.word	0x40013800
 8003da0:	51eb851f 	.word	0x51eb851f

08003da4 <__libc_init_array>:
 8003da4:	b570      	push	{r4, r5, r6, lr}
 8003da6:	2600      	movs	r6, #0
 8003da8:	4d0c      	ldr	r5, [pc, #48]	; (8003ddc <__libc_init_array+0x38>)
 8003daa:	4c0d      	ldr	r4, [pc, #52]	; (8003de0 <__libc_init_array+0x3c>)
 8003dac:	1b64      	subs	r4, r4, r5
 8003dae:	10a4      	asrs	r4, r4, #2
 8003db0:	42a6      	cmp	r6, r4
 8003db2:	d109      	bne.n	8003dc8 <__libc_init_array+0x24>
 8003db4:	f000 f822 	bl	8003dfc <_init>
 8003db8:	2600      	movs	r6, #0
 8003dba:	4d0a      	ldr	r5, [pc, #40]	; (8003de4 <__libc_init_array+0x40>)
 8003dbc:	4c0a      	ldr	r4, [pc, #40]	; (8003de8 <__libc_init_array+0x44>)
 8003dbe:	1b64      	subs	r4, r4, r5
 8003dc0:	10a4      	asrs	r4, r4, #2
 8003dc2:	42a6      	cmp	r6, r4
 8003dc4:	d105      	bne.n	8003dd2 <__libc_init_array+0x2e>
 8003dc6:	bd70      	pop	{r4, r5, r6, pc}
 8003dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dcc:	4798      	blx	r3
 8003dce:	3601      	adds	r6, #1
 8003dd0:	e7ee      	b.n	8003db0 <__libc_init_array+0xc>
 8003dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dd6:	4798      	blx	r3
 8003dd8:	3601      	adds	r6, #1
 8003dda:	e7f2      	b.n	8003dc2 <__libc_init_array+0x1e>
 8003ddc:	08003e3c 	.word	0x08003e3c
 8003de0:	08003e3c 	.word	0x08003e3c
 8003de4:	08003e3c 	.word	0x08003e3c
 8003de8:	08003e40 	.word	0x08003e40

08003dec <memset>:
 8003dec:	4603      	mov	r3, r0
 8003dee:	4402      	add	r2, r0
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d100      	bne.n	8003df6 <memset+0xa>
 8003df4:	4770      	bx	lr
 8003df6:	f803 1b01 	strb.w	r1, [r3], #1
 8003dfa:	e7f9      	b.n	8003df0 <memset+0x4>

08003dfc <_init>:
 8003dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfe:	bf00      	nop
 8003e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e02:	bc08      	pop	{r3}
 8003e04:	469e      	mov	lr, r3
 8003e06:	4770      	bx	lr

08003e08 <_fini>:
 8003e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e0a:	bf00      	nop
 8003e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e0e:	bc08      	pop	{r3}
 8003e10:	469e      	mov	lr, r3
 8003e12:	4770      	bx	lr
